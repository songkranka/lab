"use strict";
app.directive('onLastRepeat', function() {
    return function(scope, element, attrs) {
        if (scope.$last) setTimeout(function() {
            scope.$emit('onRepeatLast', element, attrs);
        }, 1);
    };
});


app.directive('format', ['$filter', function ($filter) {
    return {
        require: '?ngModel',
        link: function (scope, elem, attrs, ctrl) {
            if (!ctrl) return;
            
            ctrl.$formatters.unshift(function (a) {
                return $filter(attrs.format)(ctrl.$modelValue)
            });

            ctrl.$parsers.unshift(function (viewValue) {
                var plainNumber;
                if(attrs.numericDecimal2 != null){
                    plainNumber = viewValue;
                    if(plainNumber.split('.').length == 2){
                        elem.val(plainNumber);
                        var numberWith2Digit = $filter(attrs.format)(plainNumber.replace(/[^\d|\-+|\.+]/g, ''), 2);
                        return numberWith2Digit.replace(',', '');
                    }
                    else plainNumber = viewValue.replace(',', '');
                }
                else {
                    plainNumber = viewValue.replace(/[^\d|\-+|\.+]/g, '');
                }
                if(attrs.numericInteger != null){
                    var re = new RegExp("^\\d+$|^\\d*\\d+$");
                    if(!re.exec(plainNumber)) {
                        elem.val('');
                        return '';
                    }
                }
//                if(attrs.decimal == null) {
//                    
//                }
//                else {
//                    //plainNumber = viewValue.replace(/[^\d|\-+|^\.+]/g, '');
//                    plainNumber = viewValue.replace(',', '');
//                    if(plainNumber.split('.').length == 2){
//                        elem.val($filter(attrs.format)(plainNumber, 2));
//                        return plainNumber;
//                    }
//                    if(plainNumber.split('.').length > 2){
//                        plainNumber = viewValue.replace(/[^\d|\-+]/g, '');
//                    }
//                }
                if(attrs.min != null) {
                    if(parseFloat(plainNumber) < parseFloat(attrs.min)) {
                        elem.val($filter(attrs.format)(attrs.min));
                        return attrs.min;
                    }
                }
                if(attrs.max != null) {
                    if(parseFloat(plainNumber) > parseFloat(attrs.max)) {
                        elem.val($filter(attrs.format)(attrs.max));
                        return attrs.max;
                    }
                }
                elem.val($filter(attrs.format)(plainNumber));
                return plainNumber;
            });
            
            $(elem).on('blur', function(e) {
                if(attrs.numericDecimal2 != null) {
                    if(this.value != "") {
                        this.value = $filter(attrs.format)(this.value.replace(/[^\d|\-+|\.+]/g, ''), 2);
                    }
                }
            });
        }
    };
}]);

app.directive('numberonly', function() {
    return function(scope, element, attrs) {
        element.bind("keypress", function(event) {
            event = (event) ? event : window.event;
            var charCode = (event.which) ? event.which : event.keyCode;
            if (charCode > 31 && (charCode < 48 || charCode > 57)) {
                scope.$apply(function(){
                    scope.$eval(attrs.numberonly);
                    event.preventDefault();
                });
                event.preventDefault();
            }            
        });
    };
});

app.directive('alphanumeric', function() {
    return function(scope, element, attrs) {
        element.bind("keypress", function(event) {
            event = (event) ? event : window.event;
            var charCode = (event.which) ? event.which : event.keyCode;
            if (!(charCode > 47 && charCode < 58) &&
                !(charCode > 64 && charCode < 91) &&
                !(charCode > 96 && charCode < 123)) {
                scope.$apply(function(){
                    scope.$eval(attrs.numberonly);
                    event.preventDefault();
                });
                event.preventDefault();
            }   
        });
    };
});

app.directive('checkColumnEdit', function() {
    return function(scope, element, attrs) {
        if(element.context.type == 'text'){
            element.bind('keyup', function(e){
                if (e.keyCode != 67 && !e.ctrlKey) { //not Ctrl+C
                    setTimeout(function(){
                        attrs.value = attrs.checkControlEdit;
                        scope.$emit('onColumnEdit', element, attrs);
                    }, 50);
                }
            });
        }
        else if(element.context.type == 'checkbox' || element.context.type == 'select-one'){
            element.bind('change', function(e){
                setTimeout(function(){
                    attrs.value = attrs.checkControlEdit;
                    scope.$emit('onColumnEdit', element, attrs);
                }, 50);
            });
        }
    };
});

app.directive('checkControlEdit', function() {
    return function(scope, element, attrs) {
        if(element.context.type == 'text'){
            element.bind('keyup', function(e){
                if (e.keyCode != 67 && !e.ctrlKey) { //not Ctrl+C
                    setTimeout(function(){
                        attrs.value = attrs.checkControlEdit;
                        scope.$emit('onControlEdit', element, attrs);
                    },100);
                }
            });
        }
        else if(element.context.type == 'checkbox' || element.context.type == 'select-one'){
            element.bind('change', function(e){
                setTimeout(function(){
                    attrs.value = attrs.checkControlEdit;
                    scope.$emit('onControlEdit', element, attrs);
                },100);
            });
        }
    };
});

app.directive('dateRangePicker', function(){
    return {
        restrict: 'EA',
        replace: true,
        scope: {
            datePickerId: '@',
            middleText: '@',
            dateFormat: '@',
            startDateValue: '@',
            endDateValue: '@',
            pickTime: '@',
            clearBtn: '@',
            dateElem: '=',
            dateStartView: '@',
            dateMinViewMode: '@'
        },
        template: '<div class="input-daterange input-group" id="{{datePickerId}}">' +
                        '<input type="text" id="{{startInputId}}" class="form-control date-picker date-start" name="start"/>' +
                        '<span class="input-group-btn">' +
                            '<button type="button" id="btn_{{startInputId}}" class="btn btn-default date-picker-button date-start">' +
                                '<i class="fa fa-calendar"></i>' +
                            '</button>' +
                        '</span>' +
                        '<span class="input-group-addon">{{middleText}}</span>' +
                        '<input type="text" id="{{endInputId}}" class="form-control date-picker date-end" name="end"/>' +
                        '<span class="input-group-btn">' +
                            '<button type="button" id="btn_{{endInputId}}" class="btn btn-default date-picker-button date-end">' +
                                '<i class="fa fa-calendar"></i>' +
                            '</button>' +
                        '</span>' +
                    '</div>',
        controller: function($scope){
            angular.element(document).ready(function() {
                var startElem = $("#" + $scope.datePickerId + " input[name='start']")[0];
                var endElem = $("#" + $scope.datePickerId + " input[name='end']")[0];
                
                if(startElem != null){
                    if($scope.startDateValue != null){
                        if($scope.pickTime){
                            $(startElem).datetimepicker('update', $scope.startDateValue);
                        }
                        else {
                            $(startElem).datepicker('update', $scope.startDateValue);
                        }
                    }
                    
                    //----- Input Marks -----//
                    $(startElem).attr("data-inputmask","\'alias\': \'"+ $scope.dateFormat +"\'");
                    $(startElem).inputmask();
                }
                
                if(endElem != null){
                    if($scope.endDateValue != null){
                        if($scope.pickTime){
                            $(endElem).datetimepicker('update', $scope.endDateValue);
                        }
                        else {
                            $(endElem).datepicker('update', $scope.endDateValue);
                        }
                    }
                    
                    //----- Input Marks -----//
                    $(endElem).attr("data-inputmask","\'alias\': \'"+ $scope.dateFormat +"\'");
                    $(endElem).inputmask();
                }
                
                setTimeout(function(){
                    if($scope.pickTime){
                        
                    }
                    else {
                        $scope.dateElem.datepicker('update');
                    }
                },100);
            });
            
        },
        link: function(scope, element, attrs){
            scope.datePickerId = (scope.datePickerId == null) ? 'date_range_picker' : scope.datePickerId;
            scope.dateFormat = (scope.dateFormat == null) ? 'yyyy/mm/dd' : scope.dateFormat;
            scope.clearBtn = (scope.clearBtn == null) ? false : scope.clearBtn;
            scope.startInputId = chance.string({length: 8, pool: 'abcdefghijklmnopqrstuvwxyz'});
            scope.endInputId = chance.string({length: 8, pool: 'abcdefghijklmnopqrstuvwxyz'});
            scope.pickTime = (scope.pickTime != null && scope.pickTime) ? true : false;
            
            if(scope.pickTime){
                //date time
                scope.dateFormat = (scope.dateFormat == 'yyyy/mm/dd') ? 'yyyy/mm/dd hh:ii' : scope.dateFormat;
                scope.dateElem = $('input.date-picker').datetimepicker({
                    format: scope.dateFormat,
                    autoclose: true,
                    clearBtn: true,
                    todayBtn: true,
                    todayHighlight: true
                }); 
            }
            else {
                // date only
                scope.dateElem = element.datepicker({
                    format: scope.dateFormat,
                    startDate: scope.startDate,
                    clearBtn: scope.clearBtn,
                    startView: scope.dateStartView,
                    minViewMode: scope.dateMinViewMode,
                    autoclose: true
                });
            }
            
            scope.dateElem.on('changeDate', function(e){
                scope.$emit(scope.datePickerId + ".change", e, e.target);
                if(e.target.name == "start"){
                    scope.$emit(scope.datePickerId + ".start.change", e);
                }
                else scope.$emit(scope.datePickerId + ".end.change", e);
            });

            scope.dateElem.on('clearDate', function(e){
                scope.$emit(scope.datePickerId + ".clear", e, e.target);
                if(e.target.name == "start"){
                    scope.$emit(scope.datePickerId + ".start.clear", e);
                }
                else scope.$emit(scope.datePickerId + ".end.clear", e);
            });
            
            scope.$on(scope.datePickerId + '.start.update', function(e, newDate){
                if(scope.pickTime){
                    $('#' + scope.startInputId).datetimepicker('update', newDate);
                }
                else {
                    $('#' + scope.startInputId).datepicker('update', newDate);
                }
            });

            scope.$on(scope.datePickerId + '.end.update', function(e, newDate){
                if(scope.pickTime){
                    $('#' + scope.endInputId).datetimepicker('update', newDate);
                }
                else {
                    $('#' + scope.endInputId).datepicker('update', newDate);
                }
            });

            //Activate calendar button
            setTimeout(function(){
                $("#btn_" + scope.startInputId).on('click', function(e){
                    if(scope.pickTime){
                        $('#' + scope.startInputId).datetimepicker('show');
                    }
                    else {
                        $('#' + scope.startInputId).datepicker('show');
                    }
                });

                $("#btn_" + scope.endInputId).on('click', function(e){
                    if(scope.pickTime){
                        $('#' + scope.endInputId).datetimepicker('show');
                    }
                    else {
                        $('#' + scope.endInputId).datepicker('show');
                    }
                });
            },100); 
        }
    }
});

app.directive('tableCheckbox', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            checkId: '@',
            checkName: '@',
            checkCaption: '@',
            checkTheme: '@',
            checkModel: '=',
            actionChange: '&',
            checked: '=',
            disabled: '@',
        },
        template: '<div class="checkbox check-{{checkTheme}} checkbox-edit {{class}}">' +
                        '<input type="checkbox" id="{{checkId}}" name="{{checkName}}" ng-checked="{{checked}}" ng-disabled="{{disabled}}" ng-model="checkModel" ng-click="changeClick({ event: $event, checked: checkModel})">' +
                        '<label for="{{checkId}}"></label>' +
                    '</div>',
        link: function(scope, element, attrs){
            if(scope.checkCaption != null){
                scope.class = 'has-caption';
                element[0].lastChild.innerHTML = scope.checkCaption;
            }
            scope.checkName = (scope.checkName == null) ? 'check-name-directive' : scope.checkName;
            scope.checkTheme = (scope.checkTheme == null) ? 'success' : scope.checkTheme;
            scope.disabled = (scope.disabled == null) ? true : scope.disabled;
            scope.checkModel = scope.checked;
            scope.changeClick = function(e, checkedx){
                scope.actionChange(e, checkedx, scope.checkId);
            };
            scope.disabled = (scope.disabled == null) ? false : true;
        }
    }
});

app.directive('tablePagination', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            caption: '@',
            pageSizeValue: '=',
            selectPageSize: '=',
            selectPage: '=',
            totalPage: '@',
            visiblePage: '@',
            actionChange: '&',
        },
        template: '<div class="table-pagination">' +
                        '<div class="item-per-page pull-left">' +
                            '<div class="input-group">' +
                                '<span class="caption-page">{{caption}}</span>' +
                                '<select class="form-control" ng-model="selectPageSize" ng-options="size for size in pageSizeValue" ng-change="change({ pageSize: selectPageSize, page: selectPage })"></select>' +
                            '</div>' +
                        '</div>' +
                        '<ul id="table_pagination" class="pagination pagination-sm pull-right"></ul>' +
                    '</div>',
        controller: function($scope){
            
            $scope.initPager = function(totalPage, visiblePage){
                if($scope.pager != null) {
                    $scope.pager.twbsPagination('destroy');
                }
                $scope.pager = $('#table_pagination').twbsPagination({
                    totalPages: totalPage,
                    visiblePages: visiblePage,
                    onPageClick: function (event, page) {
                        $scope.selectPage = page;
                        $scope.change({ pageSize: $scope.selectPageSize, page: $scope.selectPage });
                    }
                });
            };
            
            $scope.change = function(selectedValue){
                selectedValue.pageSize = (selectedValue.pageSize.toString().toLowerCase() == 'all') ? -1 : selectedValue.pageSize;
                $scope.actionChange(selectedValue);
            };
            
            $scope.$on('setPage', function (e, page) {
                $scope.selectPage = page;
            });
            
            $scope.$on('setPageSize', function (e, pageSize) {
                $scope.selectPageSize = pageSize;
            });
            
            $scope.$on('initPager', function (e, totalPage, visiblePage) {
                $scope.initPager(totalPage, visiblePage);
            });
        },
        link: function(scope, element, attrs){
            scope.pageSizeValue = (scope.pageSizeValue == null) ? [10, 20, 30, 40, 50, 'All'] : scope.pageSizeValue;
            scope.selectPageSize = (scope.selectPageSize == null) ? 10 : scope.selectPageSize;
            scope.selectPage = (scope.selectPage == null) ? 1 : scope.selectPage;
        }
    }
});

app.directive('tableLoading', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            loadingTheme: '@',
            loadingCaption: '@',
        },
        template: '<div class="table-loading">' +
                    '<div class="progress-circle-indeterminate {{loadingTheme}}"></div>' +
                    '<p class="text-600">{{loadingCaption}}</p>' +
                  '</div>',
        link: function(scope, element, attrs){
            scope.loadingTheme = (scope.loadingTheme == null) ? 'progress-circle-success' : scope.loadingTheme;
            scope.loadingCaption = (scope.loadingCaption == null) ? 'Please Wait...' : scope.loadingCaption;
        }
    }
});



app.directive('fileModel', ['$parse', function ($parse) {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            var model = $parse(attrs.fileModel);
            var modelSetter = model.assign;
            
            element.bind('change', function(){
                scope.$apply(function(){
                    modelSetter(scope, element[0].files[0]);
                });
            });
        }
    };
}]);


app.directive('printIframe', function () {
    return {
        restrict: 'EA',
        scope: {
                src:'@',
                height: '@',
                width: '@',
                scrolling: '@'
              },
        template: '<iframe id="iframe_print_pdf" height="{{height}}" width="{{width}}" frameborder="0" border="0" marginwidth="0" marginheight="0" scrolling="{{scrolling}}" src="{{src}}"></iframe>',
        //<div id="iframe_loading" style="height: 500px"><div class="progress-circle-indeterminate"></div><p class="text-600"></p></div>
        link: function(scope, element, attrs) {
            scope.height = (scope.height == null) ? '500px' : scope.height;
            scope.width = (scope.width == null) ? '100%' : scope.width;
        }
    };
});

app.directive('masterPrintIframe', function () {
    return {
        restrict: 'EA',
        scope: {
                src:'@',
                height: '@',
                width: '@',
                scrolling: '@'
              },
        template: '<iframe id="master_iframe_print_pdf" height="{{height}}" width="{{width}}" frameborder="0" border="0" marginwidth="0" marginheight="0" scrolling="{{scrolling}}" src="{{src}}"></iframe>',
        //<div id="iframe_loading" style="height: 500px"><div class="progress-circle-indeterminate"></div><p class="text-600"></p></div>
        link: function(scope, element, attrs) {
            scope.height = (scope.height == null) ? '500px' : scope.height;
            scope.width = (scope.width == null) ? '100%' : scope.width;
        }
    };
});

/* ---------------
   Picker
------------------ */   

app.directive('brandPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/brandPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_BRAND_CODE = 1044
                BaseService.getPickerData(1044).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'BRAND_CODE',
                            "class": 'text-center'
                        }, {
                            "data": 'BRAND_NAME'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'brand_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('itemDescriptionPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/itemDescriptionPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_DESCRIBE_CODE = 1076
                BaseService.getPickerData(1076, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'DESCRIBE_CODE',
                            "class": 'text-center'
                        }, {
                            "data": 'DESCRIBE_TITLE'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off('click', 'tbody tr');
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                    	BaseService.setRowFocus(this);
                        $scope.currentRow = this;
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'item_description_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('mdPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/mdPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_MD_CODE = 1021
                BaseService.getPickerData(1021, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'MD_CODE',
                            "class": 'text-center'
                        }, {
                            "data": 'MD_NAME'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off('click', 'tbody tr');
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                    	BaseService.setRowFocus(this);
                        $scope.currentRow = this;
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'md_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('subCategoryPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/subCategoryPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_SUBCAT_CODE = 1238
                BaseService.getPickerData(1238, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'SUBCAT_CODE',
                            "class": 'text-center'
                        }, {
                            "data": 'SUBCAT_NAME'
                        }, {
                            "data": 'MD_CODE',
                            "class": 'text-center'
                        }, {
                            "data": 'MD_NAME'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'sub_category_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('sortCodePicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/sortCodePicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_CSPF_GROUP_CODE = 1143
                BaseService.getPickerData(1143, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(row, type, data){
                                return "";
                            }
                        }, {
                            "data": "CSPF_GROUP",
                            "class": "text-center"
                        }, {
                            "data": "CSPF_DESC"
                        }, {
                            "data": "USE_YN",
                            "class": "text-center"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off('click', 'tbody tr');
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                    	BaseService.setRowFocus(this);
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'sort_code_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('itemPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/itemPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.saleGb = [];
            $scope.selectedConstantId = 1002;
            
            $scope.$on($scope.pickerId + ".open", function(e) {
            	
                //clear picker params before get picker data.
                $scope.selectedConstantId = ($scope.pickerParam.constant_id == null) ? 1002 : $scope.pickerParam.constant_id;
                if($scope.selectedConstantId == 1003 || $scope.selectedConstantId == 1161){
                    $scope.pickerParam.r_value = 1;
                }
                $scope.pickerParam.goods_code = "";
                $scope.pickerParam.goods_name = "";
                
                $('#' + $scope.pickerId).on('hidden.bs.modal', function () {
                    $('#' + $scope.pickerId + ' #rdItemCode').prop('checked', true);
                    $('#' + $scope.pickerId + ' #rdItemName').prop('checked', false);
                });
            });
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_GOODS_CODE_ALL = 1002
                //P_GOODS_NAME_ALL = 1157
                //P_GOODS_CODE = 1003
                //P_GOODS_CODE_MD = 1128
                //P_GOODS_NAME_MD = 1129
            	//P_GOODS_CODE_SCM = 1161
                //P_GOODS_CODE_PRICE = 1062
                //P_GOODS_NAME_PRICE = 1063
            	//P_GOODS_CODE_GIFT = 1064
            	//P_GOODS_NAME_GIFT = 1065
                BaseService.getPickerData($scope.selectedConstantId, $scope.pickerParam).then(
                    function(respone){
                        //extra data
                        $scope.saleGb = respone.data.result_c_sale_gb;
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(row, type, data){
                                return "";
                            }
                        }, {
                            "data": "GOODS_CODE",
                            "class": "text-center"
                        }, {
                            "data": "GOODS_NAME"
                        }, {
                            "data": "SALE_GB",
                            "class": "text-center",
                            "render": function(row, type, data){
                                var saleType = "";
                                var selectSaleType = getJSONObjects($scope.saleGb, 'code', data.SALE_GB);
                                if(selectSaleType != null && selectSaleType.length > 0){
                                    saleType = selectSaleType[0].codeName;
                                }
                                return saleType;
                            }
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "bDestroy": true,
                        "dom": 'Zrt<"bottom"lp><"clear">',
                        "colResize": {
                            "tableWidthFixed": false
                        }
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off('click', 'tbody tr');
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                    	BaseService.setRowFocus(this);
                        $scope.currentRow = this;
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
            
            $scope.inputChangeClick = function(e){
                var radioId = $(e.currentTarget).attr('radio-relate');
                if(!$('#' + $scope.pickerId + ' #' + radioId).prop('checked')){
                    $('#' + $scope.pickerId + ' #' + radioId).prop('checked', true);
                    $scope.filterSelectChange(radioId);
                }
            };
            
            $scope.filterSelectChange = function(radioId){
                $scope.dataFilter = ($scope.dataFilter == null) ? {} : $scope.dataFilter;
                switch(radioId){
                    case "rdItemCode":{
                            if($scope.selectedConstantId == 1157){
                                $scope.selectedConstantId = 1002;
                            }
                        
                            if($scope.selectedConstantId == 1129){
                                $scope.selectedConstantId = 1128;
                            }
                        
                            if($scope.selectedConstantId == 1063){
                                $scope.selectedConstantId = 1062;
                            }
                            
                            if($scope.selectedConstantId == 1065){
                                $scope.selectedConstantId = 1064;
                            }
                        
                            if($scope.selectedConstantId == 1003 || $scope.selectedConstantId == 1161){
                                $scope.pickerParam.r_value = 1;
                            }
                        
                            $scope.pickerParam.goods_name = "";
                        }
                        break;
                    case "rdItemName":{
                            if($scope.selectedConstantId == 1002){
                                $scope.selectedConstantId = 1157;
                            }    
                        
                            if($scope.selectedConstantId == 1128){
                                $scope.selectedConstantId = 1129;
                            }
                        
                            if($scope.selectedConstantId == 1062){
                                $scope.selectedConstantId = 1063;
                            }
                            
                            if($scope.selectedConstantId == 1065){
                                $scope.selectedConstantId = 1064;
                            }
                        
                            if($scope.selectedConstantId == 1003 || $scope.selectedConstantId == 1161){
                                delete $scope.pickerParam.r_value;
                            }
                        
                            $scope.pickerParam.goods_code = "";
                        }
                        break;
                }
                $('input[radio-relate="'+ radioId +'"]').focus();
            };
            
            $scope.inquiryClick = function(){
                $scope.isLoading = true;
                
                if($scope.oTable != null){
                    $scope.oTable.fnClearTable();
                    $scope.oTable.fnDestroy();
                }
                
                $scope.getPickerData(function(respone){
                    setTimeout(function(){
                        $scope.isLoading = false;
                        $scope.pickerData = respone.data.result;
                        $scope.$apply();
                        $scope.renderTable($scope.pickerData);
                    },500);
                });
            }
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'item_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('vendorPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/vendorPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.$on($scope.pickerId + ".open",function(e) {
                //clear picker params before get picker data.
                $scope.pickerParam.r_value = 1; //default filter by column ENTP_CODE.
                $scope.pickerParam.entp_code = "";
                $scope.pickerParam.entp_name = "";
            });
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_ENTP_CODE = 1019
                BaseService.getPickerData(1019, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(row, type, data){
                                return "";
                            }
                        }, {
                            "data": "ENTP_CODE",
                            "class": "text-center"
                        }, {
                            "data": "ENTP_NAME"
                        }, {
                            "data": "S_IDNO"
                        }, {
                            "data": "OWNER_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("click", "tbody tr").on("click", "tbody tr", function(e) {
                        BaseService.setRowFocus(this);
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
            
            $scope.inputChangeClick = function(e){
                var radioId = $(e.currentTarget).attr('radio-relate');
                if(!$('#' + $scope.pickerId + ' #' + radioId).prop('checked')){
                    $('#' + $scope.pickerId + ' #' + radioId).prop('checked', true);
                    $scope.filterSelectChange(radioId);
                }
            };
            
            $scope.filterSelectChange = function(radioId){
                switch(radioId){
                    case "rdVendorCode":{
                            $scope.pickerParam.r_value = 1;
                            $scope.pickerParam.entp_code = "";
                        }
                        break;
                    case "rdVendorName":{
                            $scope.pickerParam.r_value = "";
                            $scope.pickerParam.entp_name = "";
                        }
                        break;
                }
                $('input[radio-relate="'+ radioId +'"]').focus();
            };
            
            $scope.inquiryClick = function(){
                $scope.isLoading = true;
                
                if($scope.oTable != null){
                    $scope.oTable.fnClearTable();
                    $scope.oTable.fnDestroy();
                }
                
                $scope.getPickerData(function(respone){
                    setTimeout(function(){
                        $scope.isLoading = false;
                        $scope.pickerData = respone.data.result;
                        $scope.$apply();
                        $scope.renderTable($scope.pickerData);
                    },500);
                });
            }
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'vendor_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('vendorRepPicker', function($compile){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/vendorRepPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.pickerSelectedDataClick = null;
            $scope.selectedStaffType = null;
            $scope.cmbEntpManGbs = [];
            $scope.selectedVendor = {};
            $scope.vendorReqZipCodeParams = {};
            $scope.pickerDataOrigin = null;
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.$on($scope.pickerId + ".open",function(e) {
                
                BaseService.setDisabledControl(true, "vendorrep-picker-info-wrapper");
                
                $('#'+$scope.pickerId).off('hide.bs.modal.prevent').on('hide.bs.modal.prevent', function (e) {
                    
                    var insertList = BaseService.findObject($scope.pickerData, "cwareAction", "I", true);
                    
                    var updateList = BaseService.findObject($scope.pickerData, "cwareAction", "U", true);
                    
                    if(insertList || updateList){
                        
                        var rowChange = $scope.validateRowChange($scope.pickerSelectedDataClick, $scope.temp.selectedData, true);
                        if(rowChange){
                            e.preventDefault();
                        }else{
                            $('#'+$scope.pickerId).modal('hide');
                        }
                    }
                })
            });
            
            $scope.getPickerHeaderData = function(callback){
                //P_ENTP_MAN = 1177
                BaseService.getPickerHeaderData(1177).then(
                    function(respone){
                        $scope.cmbEntpManGbs = respone.data.C_ENTP_MAN_GB;
                        if($scope.cmbEntpManGbs && $scope.cmbEntpManGbs.length > 0){
                            $scope.selectedStaffType = $scope.cmbEntpManGbs[0];
                        }
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.getPickerData = function(callback){
                //P_ENTP_MAN = 1177
                BaseService.getPickerData(1177, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                
                if(!$scope.pickerDataOrigin){
                    $scope.pickerDataOrigin = angular.copy($scope.pickerData);
                }
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "data": "ENTP_MAN_SEQ",
                            "class": "text-center"
                        }, {
                            "data": "ENTP_MAN_GB_NAME"
                        }, {
                            "data": "ENTP_MAN_NAME"
                        }, {
                            "render": function(data, type, row){
                                return $scope.getTel(row);
                            }
                        }, {
                            "data": "ENTP_MAN_FAX",
                            "render": function(data, type, row){
                                return $scope.getFax(row);
                            }
                        }, {
                            "data": "ENTP_MAN_HP",
                            "render": function(data, type, row){
                                return $scope.getHp(row);
                            }
                        }, {
                            "data": "DEFAULT_YN",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "1") ? true : false;
                                return '<table-checkbox check-id="default_yn_'+ row.ENTP_MAN_SEQ +'" checked="'+ checked +'" disabled="disabled"></table-checkbox>';
                            }
                        }, {
                            "data": "USE_YN",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "1") ? true : false;
                                return '<table-checkbox check-id="use_yn_'+ row.ENTP_MAN_SEQ +'" checked="'+ checked +'" disabled="disabled"></table-checkbox>';
                            }
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    BaseService.setFixedHeader($scope.oTable);
                    
                    setTimeout(function(){
                        $scope.temp = {
                            previousRow: null,
                            selectedData: null,
                            previousRowIndex: null
                        };
                        
                        $scope.oTable.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            
                            $scope.currentRowIndex = $scope.oTable.api().row(this).index();
                            
                            //skip listener current row
                            if(($scope.currentRowIndex && $scope.temp.previousRowIndex) && $scope.currentRowIndex == $scope.temp.previousRowIndex){
                                return ;
                            }
                            
                            BaseService.checkItemModify($scope.pickerSelectedDataClick, $scope.temp.selectedData, $scope.temp.previousRow);
                            
                            var rowChange = $scope.validateRowChange($scope.pickerSelectedDataClick, $scope.temp.selectedData);
                            
                            if(rowChange){
                                return;
                            }
                            
                        	BaseService.setRowFocus(this);
                        	$scope.currentVendorRepRow = this;
                            $scope.temp.previousRow = this;
                        	
                        	var aData = $scope.oTable.api().row(this).data();
                            $scope.temp.previousRowIndex = $scope.oTable.api().row(this).index();
                            
                            if(aData != null){
                                BaseService.setDisabledControl(false, "vendorrep-picker-info-wrapper");
                            	$scope.pickerSelectedDataClick = aData;
                                $scope.temp.selectedData = angular.copy(aData);
                            	$scope.retrieveDetail();
                            }
                        });

                        /*if(dataSource.length == 0){
                            $scope.clearInfoData();
                            BaseService.setDisabledControl(true);
                        }*/
                    }, 50);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                    
                }
            };
            
            $scope.btnNewClick = function(){
            	
                var rowChange = $scope.validateRowChange($scope.pickerSelectedDataClick, $scope.temp.selectedData);
                            
                if(rowChange){
                    return ;
                }
                
            	BaseService.setDisabledControl(false, "vendor-picker-info-wrapper");
                
                $scope.selectedStaffType = ($scope.cmbEntpManGbs && $scope.cmbEntpManGbs.length > 0)?$scope.cmbEntpManGbs[0]:"";
                
                var vendor = {
                        cwareAction     : "I",
                        EMAIL_ADDR      : "",
                        ENTP_MAN_FAX    : " ",
                        DEFAULT_YN      : "0",
                        POST_SEQ        : "",
                        ENTP_MAN_HP     : "",
                        ENTP_MAN_HP1    : "",
                        ENTP_MAN_HP2    : "",
                        ENTP_MAN_HP3    : "",
                        ENTP_MAN_FAX3   : "",
                        ENTP_MAN_FAX2   : "",
                        ENTP_MAN_TEL    : "",
                        ENTP_MAN_LEVEL  : "",
                        ENTP_CODE       : $scope.pickerParam.entp_code,
                        ADDR            : "",
                        POST_ADDR       : "",
                        ENTP_MAN_FAX1   : "",
                        ENTP_MAN_GB_NAME: ($scope.selectedStaffType)?$scope.selectedStaffType.codeName:"",
                        ENTP_MAN_GB     : ($scope.selectedStaffType)?$scope.selectedStaffType.code:"",
                        USE_YN          : "1",
                        ENTP_MAN_DDD    : "",
                        TRANS_NOTE      : "",
                        ENTP_MAN_SEQ    : "",
                        ENTP_MAN_NAME   : "",
                        POST_NO         : "",
                        FULL_ADDR       : "",
                        ENTP_MAN_TEL2   : "",
                        ENTP_MAN_TEL3   : "",
                        ENTP_MAN_TEL1   : ""
                };
                
                $scope.pickerData.push(vendor);
                $scope.renderTable($scope.pickerData);
                BaseService.focusTableRow($scope.oTable, -1);
                
                $('#table_vendor_rep_picker_container').animate({ 
                    scrollTop: $('#table_vendor_rep_picker_container').prop("scrollHeight")
                }, 500);
            	
            };
            
            $scope.retrieveDetail = function(){
                
                //set staff type
                $scope.selectedStaffType = BaseService.findObject($scope.cmbEntpManGbs, 'code', $scope.pickerSelectedDataClick.ENTP_MAN_GB);
                
                $scope.vendorReqZipCodeParams.post_no = $scope.pickerSelectedDataClick.POST_NO;
                
                BaseService.setDisabledControl(false, "vendorrep-picker-info-wrapper");
                $scope.$apply();
                
            };
            
			$scope.btnSaveClick = function(){
                
                if($scope.pickerSelectedDataClick && $scope.pickerSelectedDataClick.cwareAction){
                    if($scope.validateSaveData()){
                        $scope.saveData();
                    }
                }else{
                    if($scope.temp.selectedData && (!_.isEqual($scope.pickerSelectedDataClick, $scope.temp.selectedData))){
                        $scope.pickerSelectedDataClick.cwareAction = "U";
                        if($scope.validateSaveData()){
                            $scope.saveData();
                        }
                    }else{
                        BaseService.alertWarning("No data to save.");
                    }
                }
			};
            
            $scope.validateSaveData = function(){
            	if(!$scope.pickerSelectedDataClick.ENTP_MAN_NAME){
                    BaseService.alertEmpty("Staff", function() { 
                        setTimeout(function(){
                            $('#vendorref_picker_input_staff').focus();
                        },200);
                    });
                    return false;
                }
                
                if(!$scope.pickerSelectedDataClick.ENTP_MAN_DDD){
                    BaseService.alertEmpty("Staff Tel", function() { 
                        setTimeout(function(){
                            $('#vendorref_picker_input_man_ddd').focus();
                        },200);
                    });
                    return false;
                }
                
                if(!$scope.pickerSelectedDataClick.ENTP_MAN_TEL1){
                    BaseService.alertEmpty("Staff Tel", function() { 
                        setTimeout(function(){
                            $('#vendorref_picker_input_man_tel1').focus();
                        },200);
                    });
                    return false;
                }
                
                if(!$scope.pickerSelectedDataClick.ENTP_MAN_TEL2){
                    BaseService.alertEmpty("Staff Tel", function() { 
                        setTimeout(function(){
                            $('#vendorref_picker_input_man_tel2').focus();
                        },200);
                    });
                    return false;
                }
            
                if(!$scope.pickerSelectedDataClick.POST_NO){
                    BaseService.alertEmpty("Zip Code", function() { 
                        setTimeout(function(){
                            $('#input_vendor_req_zip_code_picker input.picker-input').focus();
                        },200);
                    });
                    return false;
                }
                
                if(!$scope.pickerSelectedDataClick.ADDR){
                    BaseService.alertEmpty("Address Detail", function() { 
                        setTimeout(function(){
                            $('#vendorref_picker_input_addr').focus();
                        },200);
                    });
                    return false;
                }
                
                if(getJSONObjects($scope.pickerData, 'DEFAULT_YN', '1').length == 0){
                	BaseService.alertWarning("Enter Default.");
                    return false;
                }
                
                return true;
            };
            
            $scope.saveData = function(){
                
            	var paramsVendor = [];
            	
                var vendor = {
                    cwareAction:    $scope.pickerSelectedDataClick.cwareAction,
                    ENTP_CODE:      $scope.pickerSelectedDataClick.ENTP_CODE,
                    ENTP_MAN_SEQ:   $scope.pickerSelectedDataClick.ENTP_MAN_SEQ,
                    ENTP_MAN_GB:    ($scope.selectedStaffType && $scope.selectedStaffType.code)?$scope.selectedStaffType.code:"",
                    ENTP_MAN_NAME:  $scope.pickerSelectedDataClick.ENTP_MAN_NAME,
                    ENTP_MAN_LEVEL: $scope.pickerSelectedDataClick.ENTP_MAN_LEVEL,
                    ENTP_MAN_DDD:   $scope.pickerSelectedDataClick.ENTP_MAN_DDD,
                    ENTP_MAN_TEL1:  $scope.pickerSelectedDataClick.ENTP_MAN_TEL1,
                    ENTP_MAN_TEL2:  $scope.pickerSelectedDataClick.ENTP_MAN_TEL2,
                    ENTP_MAN_TEL3:  $scope.pickerSelectedDataClick.ENTP_MAN_TEL3,
                    ENTP_MAN_FAX1:  $scope.pickerSelectedDataClick.ENTP_MAN_FAX1,
                    ENTP_MAN_FAX2:  $scope.pickerSelectedDataClick.ENTP_MAN_FAX2,
                    ENTP_MAN_FAX3:  $scope.pickerSelectedDataClick.ENTP_MAN_FAX3,
                    ENTP_MAN_HP1:   $scope.pickerSelectedDataClick.ENTP_MAN_HP1,
                    ENTP_MAN_HP2:   $scope.pickerSelectedDataClick.ENTP_MAN_HP2,
                    ENTP_MAN_HP3:   $scope.pickerSelectedDataClick.ENTP_MAN_HP3,
                    EMAIL_ADDR:     $scope.pickerSelectedDataClick.EMAIL_ADDR,
                    POST_NO:        $scope.pickerSelectedDataClick.POST_NO,
                    POST_SEQ:       $scope.pickerSelectedDataClick.POST_SEQ,
                    ADDR:           $scope.pickerSelectedDataClick.ADDR,
                    TRANS_NOTE:     $scope.pickerSelectedDataClick.TRANS_NOTE,
                    DEFAULT_YN:     $scope.pickerSelectedDataClick.DEFAULT_YN,
                    USE_YN:         $scope.pickerSelectedDataClick.USE_YN
                };
                
                paramsVendor.push(vendor);

	        	var data = {"saveParamList" : paramsVendor};
	
	            BaseService.savePopupData('popup/save-entp-man', data).then(
                    function(response){
                        if(response.data.result == '000000'){
                            BaseService.alertSaveSuccess(function(){
                                setTimeout(function(){
                                    $scope.pickerDataOrigin = null;
                                    
                                    $scope.isLoading = true;
                                    
                                    if($scope.oTable != null){
                                        $scope.oTable.fnClearTable();
                                        $scope.oTable.fnDestroy();
                                    }

                                    $scope.getPickerData(function(respone){
                                        setTimeout(function(){
                                            $scope.isLoading = false;
                                            $scope.pickerData = respone.data.result;
                                            $scope.$apply();
                                            $scope.renderTable($scope.pickerData);
                                            BaseService.focusTableRow($scope.oTable, 0);
                                        },500);
                                    });
                                    
                                },50);
                            });
                        }
                        else {
                            BaseService.alertWarning(response.data.result);
                        }
                    },
                    function(response){
                        BaseService.alertError(response.message);
                    }
                );
                    
            };
            
            $scope.getTel = function(data){
                var ddd = (data.ENTP_MAN_DDD) ? data.ENTP_MAN_DDD : "";
                var tel1 = (data.ENTP_MAN_TEL1) ? "-" + data.ENTP_MAN_TEL1 : "";
                var tel2 = (data.ENTP_MAN_TEL2) ? "-" + data.ENTP_MAN_TEL2 : "";
                var tel3 = (data.ENTP_MAN_TEL3) ? data.ENTP_MAN_TEL3 : "";
                
                if(tel3){
                    
                    return ddd + tel1 + tel2 + ' - ['+tel3+']';
                }
                
                return ddd + tel1 + tel2;
            };
            
            $scope.getFax = function(data){
                var fax1 = (data.ENTP_MAN_FAX1) ? data.ENTP_MAN_FAX1 : "";
                var fax2 = (data.ENTP_MAN_FAX2) ? "-" + data.ENTP_MAN_FAX2 : "";
                var fax3 = (data.ENTP_MAN_FAX3) ? "-" + data.ENTP_MAN_FAX3 : "";
                return fax1 + fax2 + fax3;
            };
            
            $scope.getHp = function(data){
                var hp1 = (data.ENTP_MAN_HP1) ? data.ENTP_MAN_HP1 : "";
                var hp2 = (data.ENTP_MAN_HP2) ? "-" + data.ENTP_MAN_HP2 : "";
                var hp3 = (data.ENTP_MAN_HP3) ? "-" + data.ENTP_MAN_HP3 : "";
                return hp1 + hp2 + hp3;
            };

            $scope.defaultChecked = function(){
                
                if($scope.pickerSelectedDataClick && $scope.pickerSelectedDataClick.DEFAULT_YN == '1'){
                    return true;
                }else{
                    return false;
                }
            }
            
            $scope.defaultClicked = function(){
                if($('#chkDefault').prop("checked")){
                    $scope.pickerSelectedDataClick.DEFAULT_YN = "1";
                }else{
                    $scope.pickerSelectedDataClick.DEFAULT_YN = "0";
                }
            }
            
            $scope.useChecked = function(){
                
                if($scope.pickerSelectedDataClick && $scope.pickerSelectedDataClick.USE_YN == '1'){
                    return true;
                }else{
                    return false;
                }
            }
            
            $scope.useClicked = function(){
                if($('#chkUse').prop("checked")){
                    $scope.pickerSelectedDataClick.USE_YN = "1";
                }else{
                    $scope.pickerSelectedDataClick.USE_YN = "0";
                }
            }
            
            $scope.inquiryClick = function(){
                BaseService.setDisabledControl(true, "vendorrep-picker-info-wrapper");
                var rowChange = $scope.validateRowChange($scope.pickerSelectedDataClick, $scope.temp.selectedData);
                if(!rowChange){
                    $scope.isLoading = true;
                
                    if($scope.oTable != null){
                        $scope.oTable.fnClearTable();
                        $scope.oTable.fnDestroy();
                    }

                    $scope.getPickerData(function(respone){
                        setTimeout(function(){
                            $scope.isLoading = false;
                            $scope.pickerData = respone.data.result;
                            $scope.$apply();
                            $scope.renderTable($scope.pickerData);
                            BaseService.focusTableRow($scope.oTable, 0);
                        },500);
                    });
                }
            };
            
            $scope.validateRowChange = function(currentItem, tempItem, isClose){
                //check first loading
                if(!tempItem){
                    return false;
                }
                
                //check insert row
                if(currentItem && currentItem.cwareAction == "I"){
                    swal({ 
                        title: "Question ?",
                        text: "Details changed. Do you want to Save?",
                        type: "warning",
                        showCancelButton: true,
                        showRejectButton: true,
                        confirmButtonText: "Yes",
                        closeOnConfirm: true
                    }, function(button){
                            if(button == 'confirm'){
                                setTimeout(function(){
                                    if($scope.validateSaveData()){
                                        $scope.saveData();
                                    }
                                },500);
                            } else if (button == 'reject') {
                                if(isClose){
                                    $scope.pickerData = angular.copy($scope.pickerDataOrigin);
                                    $('#'+$scope.pickerId).modal('hide');
                                }else{
                                    $scope.pickerData = angular.copy($scope.pickerDataOrigin);
                                    $scope.renderTable($scope.pickerData);
                                    BaseService.focusTableRow($scope.oTable, 0);
                                    $scope.$apply();
                                }
                            }
                    });
                    return true;
                }
                
                //check change data
                if(!_.isEqual(currentItem, tempItem)){
                    if(!currentItem.cwareAction){
                        currentItem.cwareAction = 'U';
                    }
                    
                    swal({ 
                        title: "Question ?",
                        text: "Details changed. Do you want to Save?",
                        type: "warning",
                        showCancelButton: true,
                        showRejectButton: true,
                        confirmButtonText: "Yes",
                        closeOnConfirm: true
                    }, function(button){
                            if(button == 'confirm'){
                                setTimeout(function(){
                                    if($scope.validateSaveData()){
                                        $scope.saveData();
                                    }
                                },500);
                            } else if (button == 'reject') {
                                if(isClose){
                                    $scope.pickerData = angular.copy($scope.pickerDataOrigin);
                                    $('#'+$scope.pickerId).modal('hide');
                                }else{
                                    $scope.pickerData = angular.copy($scope.pickerDataOrigin);
                                    $scope.renderTable($scope.pickerData);
                                    BaseService.focusTableRow($scope.oTable, 0);
                                    $scope.$apply();
                                }
                            }
                    });
                    return true;
                }
                
                return false;
            }
            
            $scope.$on('onColumnEdit', function(elem){
                if($scope.oTable  != null && $scope.currentVendorRepRow  != null && $scope.pickerSelectedDataClick != null){
                    
                    var aData1 = $scope.oTable.api().row($scope.currentVendorRepRow).data();
                    if(aData1 != null){

                        var seq = aData1.ENTP_MAN_SEQ;
                        
                        $scope.oTable.api()
                        .cell($scope.currentVendorRepRow.childNodes[2])
                        .data($scope.selectedStaffType.codeName)
                        .draw();
                        
                        $scope.oTable.api()
                        .cell($scope.currentVendorRepRow.childNodes[3])
                        .data($scope.pickerSelectedDataClick.ENTP_MAN_NAME)
                        .draw();
                        
                        //default yn
                        var defaultYn = $scope.pickerSelectedDataClick.DEFAULT_YN;
                        var checkedDefaultYn = (defaultYn == "1")?true:false;
                        $('#default_yn_'+seq).prop('checked', checkedDefaultYn);
                        
                        //use yn
                        var useYn = $scope.pickerSelectedDataClick.USE_YN;
                        var checkedUseYn = (useYn == "1")?true:false;
                        $('#use_yn_'+seq).prop('checked', checkedUseYn);
                        
                         /*$scope.oTable.api()
                        .cell($scope.currentVendorRepRow.childNodes[7])
                        .data($scope.pickerSelectedDataClick.DEFAULT_YN)
                        .draw(); */
                        
                        $scope.oTable.api()
                        .cell($scope.currentVendorRepRow.childNodes[4])
                        .data($scope.getTel($scope.pickerSelectedDataClick))
                        .draw();
                        
                        $scope.oTable.api()
                        .cell($scope.currentVendorRepRow.childNodes[5])
                        .data($scope.getFax($scope.pickerSelectedDataClick))
                        .draw();
                        
                        $scope.oTable.api()
                        .cell($scope.currentVendorRepRow.childNodes[6])
                        .data($scope.getHp($scope.pickerSelectedDataClick))
                        .draw();
 
                    }
                    $scope.$apply();
                }
            });
            
            $scope.$on('vendor_req_zip_code_picker.select', function(e, data){
                $scope.pickerSelectedDataClick.POST_NO = data.POST_NO;
                $scope.pickerSelectedDataClick.POST_ADDR = data.COMP_ADDR;
                $scope.pickerSelectedDataClick.POST_SEQ = data.POST_SEQ;
                
                $scope.vendorReqZipCodeParams.post_no = "";
                $scope.$apply();
            });
            $scope.$on('vendor_req_zip_code_picker.clear', function(e, data){
                $scope.pickerSelectedDataClick.POST_NO = "";
                $scope.pickerSelectedDataClick.POST_ADDR = "";
                $scope.pickerSelectedDataClick.POST_SEQ = "";
                
                $scope.vendorReqZipCodeParams.post_no = "";
                $scope.$apply();
            });
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'vendor_rep_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('vendorManSeqPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/vendorManSeqPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.$on($scope.pickerId + ".open",function(e) {
                //clear picker params before get picker data.
                $scope.pickerParam.r_value = 1; //default filter by column ENTP_CODE.
                $scope.pickerParam.entp_code = "";
                $scope.pickerParam.entp_name = "";
            });
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_ENTP_MAN_SEQ = 1020;
                BaseService.getPickerData(1020, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(row, type, data){
                                return "";
                            }
                        }, {
                            "data": "ENTP_CODE",
                            "class": "text-center"
                        }, {
                            "data": "ENTP_NAME"
                        }, {
                            "data": "S_IDNO"
                        }, {
                            "data": "OWNER_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    setTimeout(function(){
                 	  $scope.oTable.off("click", "tbody tr").on("click", "tbody tr", function(e) {
                 		  	BaseService.setRowFocus(this);
                           var aData = $scope.oTable.api().row(this).data();
                       });                   
                   },50);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
            
            $scope.inputChangeClick = function(e){
                var radioId = $(e.currentTarget).attr('radio-relate');
                if(!$('#' + $scope.pickerId + ' #' + radioId).prop('checked')){
                    $('#' + $scope.pickerId + ' #' + radioId).prop('checked', true);
                    $scope.filterSelectChange(radioId);
                }
            };
            
            $scope.filterSelectChange = function(radioId){
                switch(radioId){
                    case "rdVendorCode":{
                            $scope.pickerParam.r_value = 1;
                            $scope.pickerParam.entp_code = "";
                        }
                        break;
                    case "rdVendorName":{
                            $scope.pickerParam.r_value = "";
                            $scope.pickerParam.entp_name = "";
                        }
                        break;
                }
                $('input[radio-relate="'+ radioId +'"]').focus();
            };
            
            $scope.inquiryClick = function(){
                $scope.isLoading = true;
                
                if($scope.oTable != null){
                    $scope.oTable.fnClearTable();
                    $scope.oTable.fnDestroy();
                }
                
                $scope.getPickerData(function(respone){
                    setTimeout(function(){
                        $scope.isLoading = false;
                        $scope.pickerData = respone.data.result;
                        //$scope.$apply();
                        $scope.renderTable($scope.pickerData);
                    },500);
                });
            }
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'vendor_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('rackPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/rackPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_RACK_CODE = 1029
                BaseService.getPickerData(1029, $scope.pickerParam).then(
                    function(respone){
                    	var str = "";
                    	$.each(respone.data.result, function(index, item){
                    		str = item.RACK_CODE+""; 
                    		item.RACK_CODE = str.substring(3,10);
                         });
                    	
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'RACK_CODE',
                            "class": 'text-center'
                        }, {
                            "data": 'GRADE'
                        }, {
                            "data": 'GB'
                        }, {
                            "data": 'RACK_NOTE'
                        }
                        ],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                        BaseService.setRowFocus(this);
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'rack_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('checkPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/checkPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_CHECK_CODE = 1030
                BaseService.getPickerData(1030, $scope.pickerParam).then(
                    function(respone){
                    	callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'CHECK_CODE',
                            "class": 'text-center'
                        }, {
                            "data": 'CHECK_GB'
                        }, {
                            "data": 'STOCK_CHECK_NOTE'
                        }, {
                            "data": 'CHECK_DATE'
                        }
                        ],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                        BaseService.setRowFocus(this);
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'check_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('lgroupPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/lgroupPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_LGROUP = 1011
                BaseService.getPickerData(1011, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'LGROUP',
                            "class": 'text-center'
                        }, {
                            "data": 'LGROUP_NAME'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                        BaseService.setRowFocus(this);
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'lgroup_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('lgroupToPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/lgroupToPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_LGROUP = 1011
                BaseService.getPickerData(1011, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'LGROUP',
                            "class": 'text-center'
                        }, {
                            "data": 'LGROUP_NAME'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'lgroup_to_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('mgroupPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/mgroupPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_MGROUP = 1012
                BaseService.getPickerData(1012, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'LGROUP',
                            "class": 'text-center'
                        }, {
                            "data": 'LGROUP_NAME'
                        }, {
                            "data": 'MGROUP',
                            "class": 'text-center'
                        }, {
                            "data": 'MGROUP_NAME'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    BaseService.activateInputFilterTable($scope.oTable, $scope.tableId, 3);
                    
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                        BaseService.setRowFocus(this);
                    });
                
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'mgroup_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('sgroupPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/sgroupPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_SGROUP = 1013
                BaseService.getPickerData(1013, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'LGROUP',
                            "class": 'text-center'
                        }, {
                            "data": 'LGROUP_NAME'
                        }, {
                            "data": 'MGROUP',
                            "class": 'text-center'
                        }, {
                            "data": 'MGROUP_NAME'
                        }, {
                            "data": 'SGROUP',
                            "class": 'text-center'
                        }, {
                            "data": 'SGROUP_NAME'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                        BaseService.setRowFocus(this);
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'sgroup_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('dgroupPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/dgroupPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_DGROUP = 1014
                BaseService.getPickerData(1014, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'LGROUP',
                            "class": 'text-center'
                        }, {
                            "data": 'LGROUP_NAME'
                        }, {
                            "data": 'MGROUP',
                            "class": 'text-center'
                        }, {
                            "data": 'MGROUP_NAME'
                        }, {
                            "data": 'SGROUP',
                            "class": 'text-center'
                        }, {
                            "data": 'SGROUP_NAME'
                        }, {
                            "data": 'DGROUP',
                            "class": 'text-center'
                        }, {
                            "data": 'DGROUP_NAME'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                        BaseService.setRowFocus(this);
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'dgroup_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('programIdPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerHeaderData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/programIdPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.$on($scope.pickerId + ".open",function(e) {
                //clear picker params before get picker data.
                $scope.selectedLGrp = null;
                $scope.pickerParam.lmenu_id = null;
                $scope.pickerParam.smenu_id = null;
                $scope.pickerParam.smenu_name = null;
                
                $scope.pickerParam.disablePickerEdit = true;
                
                $('#' + $scope.pickerId + '_btn_smenu_picker').on('click', function(e){
                    $('#' + $scope.pickerId + ' .modal-content-wrapper').css('opacity', 0);
                });
                
                $('#' + $scope.pickerId + '_smenu_picker').on('hidden.bs.modal', function () {
                	$('#' + $scope.pickerId + ' .modal-content-wrapper').css('opacity', 1);
                });
            });
            
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerHeaderData = function(callback){
                //C_LMENU = 5081
                BaseService.getPickerHeaderData(5081).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.getPickerData = function(callback){
                //P_PROGRAM_ID = 1108
                if($scope.selectedLGrp != null){
                    $scope.pickerParam.lmenu_id = $scope.selectedLGrp.code;
                }
                BaseService.getPickerData(1108, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "data": "LMENU_ID",
                            "class": "text-center"
                        }, {
                            "data": "SMENU_ID",
                            "class": "text-center"
                        }, {
                            "data": "PROGRAM_ID"
                        }, {
                            "data": "PROGRAM_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    
                    $scope.oTable.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                    	BaseService.setRowFocus(this);
                        $scope.currentRow = this;
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
            
            $scope.inquiryClick = function(){
                $scope.isLoading = true;
                
                if($scope.oTable != null){
                    $scope.oTable.fnClearTable();
                    $scope.oTable.fnDestroy();
                }
                
                $scope.getPickerData(function(respone){
                    setTimeout(function(){
                        $scope.isLoading = false;
                        $scope.pickerData = respone.data.result;
                        
                        $scope.renderTable($scope.pickerData);
                        BaseService.focusTableRow($scope.oTable, 0);
                        $scope.$apply();
                    },500);
                });
            };
            
            //for Parents-Child case
            $scope.$on($scope.pickerId+'_smenu_picker.select', function(e, data){
            	$scope.pickerParam.smenu_id = data.SMENU_ID;
            	$scope.pickerParam.smenu_name = data.SMENU_NAME;

            	setTimeout(function(){
            		
                    $scope.$apply();
                },50);
            });
            
            $scope.onLgrpChange = function(){
            	$scope.pickerParam.smenu_id = null;
                $scope.pickerParam.smenu_name = null;
                $scope.pickerParam.disablePickerEdit = true;
                
            	if($scope.selectedLGrp != null){
            		$scope.pickerParam.disablePickerEdit = false;
                    $scope.pickerParam.lmenu_id = $scope.selectedLGrp.code;
                    
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerHeaderData = (scope.pickerHeaderData == null) ? [] : scope.pickerHeaderData;
            scope.pickerId = (scope.pickerId == null) ? 'program_id_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('smenuPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/smenuPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_SMENU = 1216
                BaseService.getPickerData(1216, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'LMENU_NAME',
                            "class": 'text-center'
                        }, {
                            "data": 'MMENU_ID'
                        }, {
                            "data": 'MMENU_NAME',
                            "class": 'text-center'
                        }, {
                            "data": 'SMENU_ID'
                        }, {
                            "data": 'SMENU_NAME',
                            "class": 'text-center'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off('click', 'tbody tr');
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                    	BaseService.setRowFocus(this);
                        $scope.currentRow = this;
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'smenu_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('creditCardPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/creditCardPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_CARD_CODE = 1038
                BaseService.getPickerData(1038, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'CARD_CODE',
                            "class": 'text-center'
                        }, {
                            "data": 'CARD_NAME'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                        "bSort": true,
                        "paging": false,
                        "filter": false,
                        "info": false,
                        "scrollX": true,
                        "scrollCollapse": true
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off('click', 'tbody tr');
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                    	BaseService.setRowFocus(this);
                       
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'credit_card_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('programSelectionMultiPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerClearOnClose: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/programSelectionMultiPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.cmbChannels = [];
            $scope.selectedChannel = {};
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.$on($scope.pickerId + ".open",function(e) {
                BaseService.activateDatePicker('#' + $scope.pickerId);
                if(!$scope.pickerParam.bd_date){
                    $scope.pickerParam.bd_date = Date.today().toString("yyyy/MM/dd");
                    $('#' + $scope.pickerId + ' #input_date_pgm').datepicker('update', $scope.pickerParam.bd_date);
                }
                
                if($scope.pickerParam.cmbChannels){
                    $scope.cmbChannels = angular.copy($scope.pickerParam.cmbChannels);
                    delete $scope.pickerParam.cmbChannels;
                }
            });
            
            $scope.getPickerData = function(callback, currentValue){
            	//P_MULTI_FRAME = 1167
                $scope.pickerParam.media_code = $scope.selectedChannel.code;
                BaseService.getPickerData(1167, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(row, type, data){
                                return "";
                            }
                        }, {
                            "data": "MEDIA_NAME"
                        }, {
                            "data": "BD_DATE",
                            "class": "text-center"
                        }, {
                            "data": "BTIME",
                            "class": "text-center"
                        }, {
                            "data": "PROG_NAME"
                        }, {
                            "data": "GOODS_CODE"
                        }, {
                            "data": "GOODS_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "bDestroy": true,
                        "dom": 'Zrt<"bottom"lp><"clear">',
                        "colResize": {
                            "tableWidthFixed": false
                        }
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    BaseService.focusTableRow($scope.oTable, 0);
                    
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                        BaseService.setRowFocus(this);

                       });
                    
                    $scope.oTable.off('dblclick', 'tbody tr');
                    $scope.oTable.on('dblclick', 'tbody tr', function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
            
            $scope.inquiryClick = function(){
                $scope.isLoading = true;
                
                if($scope.oTable != null){
                    $scope.oTable.fnClearTable();
                    $scope.oTable.fnDestroy();
                }
                
                $scope.pickerParam.bd_date = $('#' + $scope.pickerId + ' #input_date_pgm').val();
                
                $scope.getPickerData(function(respone){
                    setTimeout(function(){
                        $scope.isLoading = false;
                        $scope.pickerData = respone.data.result;
                        $scope.$apply();
                        $scope.renderTable($scope.pickerData);
                    },500);
                });
            }
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'program_selection_multi_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
            scope.pickerClearOnClose = false;
        }
    }
});

app.directive('videoPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/videoPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_VIDEO_SNO = 1232
                BaseService.getPickerData(1232, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'VIDEO_CODE',
                            "class": 'text-center'
                        }, {
                            "data": 'VIDEO_NAME'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'video_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('manufacturerPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/manufacturerPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_MAKECOMP_CODE = 1027
                BaseService.getPickerData(1027, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'MAKECO_CODE',
                            "class": 'text-center'
                        }, {
                            "data": 'MAKECO_NAME'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off('click', 'tbody tr');
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                    	BaseService.setRowFocus(this);
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'manufacturer_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('originPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/originPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_ORIGIN_CODE = 1035
                BaseService.getPickerData(1035, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'CODE_MGROUP',
                            "class": 'text-center'
                        }, {
                            "data": 'CODE_NAME'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'origin_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('unitSizePicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/unitSizePicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_CSPF_GROUP_SIZE_CODE = 1141
                BaseService.getPickerData(1141, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(row, type, data){
                                return "";
                            }
                        }, {
                            "data": "CSPF_GROUP",
                            "class": "text-center"
                        }, {
                            "data": "CSPF_DESC"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'unit_size_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('unitFormPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/unitFormPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_CSPF_GROUP_FORM_CODE = 1139
                BaseService.getPickerData(1139, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(row, type, data){
                                return "";
                            }
                        }, {
                            "data": "CSPF_GROUP",
                            "class": "text-center"
                        }, {
                            "data": "CSPF_DESC"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'unit_form_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('colourCodePicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/colourCodePicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.$on($scope.pickerId + ".open",function(e) {
                //clear picker params before get picker data.
                $scope.selectedColorGroup = null;
                $scope.pickerParam.cspf_group = null;
            });
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerHeaderData = function(callback){
                //P_CSPF_GROUP_AUTO = 1144
                BaseService.getPickerHeaderData(1144).then(
                    function(respone){
                        if((respone.data.C_CSPF_C != null && respone.data.C_CSPF_C.length > 0)){
                            $scope.selectedColorGroup = respone.data.C_CSPF_C[0];
                        }
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.getPickerData = function(callback){
                //P_CSPF_GROUP_AUTO = 1144
                if($scope.selectedColorGroup != null){
                    $scope.pickerParam.cspf_group = $scope.selectedColorGroup.code;
                }
                BaseService.getPickerData(1144, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "data": "CSPF_CODE",
                        }, {
                            "data": "CSPF_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
            
            $scope.colorGroupChange = function(){
                $scope.isLoading = true;
                
                if($scope.oTable != null){
                    $scope.oTable.fnClearTable();
                    $scope.oTable.fnDestroy();
                }
                
                $scope.getPickerData(function(respone){
                    setTimeout(function(){
                        $scope.isLoading = false;
                        $scope.pickerData = respone.data.result;
                        $scope.$apply();
                        $scope.renderTable($scope.pickerData);
                    },500);
                });
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerHeaderData = (scope.pickerHeaderData == null) ? [] : scope.pickerHeaderData;
            scope.pickerId = (scope.pickerId == null) ? 'color_code_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('sizeCodePicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/sizeCodePicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_SIZE_CODE = 1016
                BaseService.getPickerData(1016, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(row, type, data){
                                return "";
                            }
                        }, {
                            "data": "CSPF_CODE",
                            "class": "text-center"
                        }, {
                            "data": "CSPF_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'size_code_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('patternCodePicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/patternCodePicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.$on($scope.pickerId + ".open",function(e) {
                //clear picker params before get picker data.
                $scope.selectedPatternGroup = null;
                $scope.pickerParam.cspf_group = null;
            });
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerHeaderData = function(callback){
                //P_CSPF_GROUP_AUTO = 1144
                BaseService.getPickerHeaderData(1144).then(
                    function(respone){
                        if((respone.data.C_CSPF_P != null && respone.data.C_CSPF_P.length > 0)){
                            $scope.selectedPatternGroup = respone.data.C_CSPF_P[0];
                        }
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.getPickerData = function(callback){
                //P_CSPF_GROUP_AUTO = 1144
                if($scope.selectedPatternGroup != null){
                    $scope.pickerParam.cspf_group = $scope.selectedPatternGroup.code;
                }
                BaseService.getPickerData(1144, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "data": "CSPF_CODE",
                        }, {
                            "data": "CSPF_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
            
            $scope.colorGroupChange = function(){
                $scope.isLoading = true;
                
                if($scope.oTable != null){
                    $scope.oTable.fnClearTable();
                    $scope.oTable.fnDestroy();
                }
                
                $scope.getPickerData(function(respone){
                    setTimeout(function(){
                        $scope.isLoading = false;
                        $scope.pickerData = respone.data.result;
                        $scope.$apply();
                        $scope.renderTable($scope.pickerData);
                    },500);
                });
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerHeaderData = (scope.pickerHeaderData == null) ? [] : scope.pickerHeaderData;
            scope.pickerId = (scope.pickerId == null) ? 'pattern_code_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('formCodePicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/formCodePicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_FORM_CODE = 1018
                BaseService.getPickerData(1018, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(row, type, data){
                                return "";
                            }
                        }, {
                            "data": "CSPF_GROUP",
                            "class": "text-center"
                        }, {
                            "data": "CSPF_CODE",
                            "class": "text-center"
                        }, {
                            "data": "CSPF_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'form_code_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('zipCodePicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/zipCodePicker.html',
        controller: function($scope, $rootScope, BaseService) {
            setTimeout(function(){
                $scope.$on($scope.pickerId + ".open",function(e) {
                //clear picker params before get picker data.
                $scope.pickerParam.r_value = 1; //default filter by column POST_NO.
                $scope.pickerParam.post_no = "";
                $scope.pickerParam.dong_name = "";
                $scope.pickerParam.city_name = "";
                $scope.pickerParam.gu_name = "";
                
                $('#rdZipCode').prop('checked', true);
            });
                        
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback, currentValue){
                //P_POST_NO = 1023
                if(currentValue) {
                    $scope.pickerParam.r_value = 1;
                    $scope.pickerParam.post_no = currentValue;
                }
            	BaseService.getPickerData(1023, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(row, type, data){
                                return "";
                            }
                        }, {
                            "data": "POST_NO",
                            "class": "text-center"
                        }, {
                            "data": "COMP_ADDR"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off('click', 'tbody tr');
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                    	BaseService.setRowFocus(this);
                        $scope.currentRow = this;
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
            
            $scope.inputChangeClick = function(e){
                var radioId = $(e.currentTarget).attr('radio-relate');
                if(!$('#' + $scope.pickerId + ' #' + radioId).prop('checked')){
                    $('#' + $scope.pickerId + ' #' + radioId).prop('checked', true);
                    $scope.filterSelectChange(radioId);
                }
            };
            
            $scope.filterSelectChange = function(radioId){
                $scope.dataFilter = ($scope.dataFilter == null) ? {} : $scope.dataFilter;
                switch(radioId){
                    case "rdZipCode":{
                            $scope.dataFilter.r_value = 1;
                            $scope.dataFilter.dong_name = "";
                            $scope.dataFilter.city_name = "";
                            $scope.dataFilter.gu_name = "";
                        }
                        break;
                    case "rdTown":{
                            $scope.dataFilter.r_value = 2;
                            $scope.dataFilter.post_no = "";
                            $scope.dataFilter.city_name = "";
                            $scope.dataFilter.gu_name = "";
                        }
                        break;
                    case "rdCity":{
                            $scope.dataFilter.r_value = "";
                            $scope.dataFilter.post_no = "";
                            $scope.dataFilter.dong_name = "";
                            $scope.dataFilter.city_name = "";
                        }
                        break;
                    case "rdProvince":{
                            $scope.dataFilter.r_value = 4;
                            $scope.dataFilter.post_no = "";
                            $scope.dataFilter.dong_name = "";
                            $scope.dataFilter.gu_name = "";
                        }
                        break;
                }
                $scope.pickerParam = angular.copy($scope.dataFilter);
                $('input[radio-relate="'+ radioId +'"]').focus();
            };
            
            $scope.inquiryClick = function(){
                
                var validateResult = {
                    message: "",
                    radio_id: ""
                };
                
                switch($scope.pickerParam.r_value){
                    case 1: {
                            if($scope.pickerParam.post_no == null || $scope.pickerParam.post_no.length < 3){
                                validateResult.message = "Please enter Zip Code<br>more than three character.";
                                validateResult.radio_id = "rdZipCode";
                            }
                        }
                        break;
                    case 4: {
                            if($scope.pickerParam.city_name == null || $scope.pickerParam.city_name.length < 2){
                                validateResult.message = "Please enter Province<br>more than two character.";
                                validateResult.radio_id = "rdProvince";
                            }
                        }
                        break;
                    case 2: {
                            if($scope.pickerParam.dong_name == null || $scope.pickerParam.dong_name.length < 2){
                                validateResult.message = "Please enter Town<br>more than two character.";
                                validateResult.radio_id = "rdTown";
                            }
                        }
                        break;
                    default: {
                            if($scope.pickerParam.gu_name == null || $scope.pickerParam.gu_name.length < 2){
                                validateResult.message = "Please enter City<br>more than two character.";
                                validateResult.radio_id = "rdCity";
                            }
                        }
                        break;
                }
                
                if(validateResult.message != ""){
                    BaseService.alertWarning(validateResult.message, function() { 
                        setTimeout(function(){
                            $('input[radio-relate="'+ validateResult.radio_id +'"]').focus();
                        },200);
                    });
                    return;
                }
        
                $scope.isLoading = true;
                
                if($scope.oTable != null){
                    $scope.oTable.fnClearTable();
                    $scope.oTable.fnDestroy();
                }
                
                $scope.getPickerData(function(respone){
                    setTimeout(function(){
                        $scope.isLoading = false;
                        $scope.pickerData = respone.data.result;
                        $scope.$apply();
                        $scope.renderTable($scope.pickerData);
                    },500);
                });
            }
            }, 500);
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'zip_code_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('customerPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/customerPicker.html',
        controller: function($scope, $rootScope, BaseService ,$compile) {
            
            $scope.cmbCustFilter = [
                { value: 1, caption: mainMessage.word.phone_no },
                { value: 2, caption: mainMessage.word.cust_name },
                { value: 3, caption: mainMessage.word.resident_no },
                { value: 6, caption: mainMessage.word.caller_id },
                { value: 8, caption: mainMessage.word.cust_no }
            ];
            $scope.cmbSex = [
                { value: "1", caption: mainMessage.word.male },
                { value: "2", caption: mainMessage.word.female }
            ];
            $scope.cmbCustSort = [];
            $scope.cmbCustLevel = [];
            $scope.cmbJoinMotive = [];
            $scope.cmbCharacter = [];
            $scope.cmbReceiverGb = [];
            
            $scope.selectedCustFilter = $scope.cmbCustFilter[0];
            $scope.selectCustomer = {};
            
            $scope.selectedNationality = {};
            $scope.allowEnterKeyPress = false;
            
            $scope.$on($scope.pickerId + ".open",function(e) {
            	
            	$("input[numeric-positive]").numeric({ negative: false });
            	
                //clear picker params before get picker data.
                $scope.selectedCustFilter = $scope.cmbCustFilter[0];
                $scope.pickerParam.query_value = "";
                
                BaseService.activateDatePicker('#' + $scope.pickerId);
                BaseService.setDisabledControl(true, "customer-picker-info-wrapper");
                
                setTimeout(function(){
                	$scope.activateControlEvent();
                }, 200);
                
                $('#' + $scope.pickerId).on('hidden.bs.modal', function () {
                	
                	$scope.pickerData = null;
                	$scope.selectCustomer = {};
                	
                	$('#customer_picker_input_birthday').datepicker('update', "");
                	$scope.selectedJoinMotive = null;
                    $scope.selectedCharacter = null;
                	$scope.$apply();
                });
                
                //picker opacity
                $('#customer_picker_input_zip_code_picker .picker-button').on('click', function(e){
                	$('#' + $scope.pickerId + ' .modal-content-wrapper').css('opacity', 0);
                });
                   
                $('#customer_picker_input_zip_code_picker .picker-input').on('keyup', function(e){
                	if(e.keyCode == 113){
                		$('#' + $scope.pickerId + ' .modal-content-wrapper').css('opacity', 0);
                	}
                });
                
                
                $('#customer_picker_zip_code_picker').on('hidden.bs.modal', function () {
                	$('#' + $scope.pickerId + ' .modal-content-wrapper').css('opacity', 1);
                });
                
            });
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerHeaderData = function(callback){
                //P_CUST_SEARCH = 1191
                BaseService.getPickerHeaderData(1191).then(
                    function(respone){
                        $scope.cmbCustSort = respone.data.C_CODE_MGROUP;
                        $scope.cmbCustLevel = respone.data.C_TCODE_C067;
                        $scope.cmbJoinMotive = respone.data.C_TCODE_C079;
                        $scope.cmbCharacter = respone.data.C_CUST_CHAR;
                        $scope.cmbReceiverGb = respone.data.C_RECEIVER_GB;
                        
                        $scope.selectedCustSort = BaseService.findObject($scope.cmbCustSort, 'code', '10');
                        $scope.selectedCustLevel = BaseService.findObject($scope.cmbCustLevel, 'code', '40');
                        $scope.selectedJoinMotive = BaseService.findObject($scope.cmbJoinMotive, 'code', '001');
                        $scope.selectedCharacter = BaseService.findObject($scope.cmbCharacter, 'code', '99');
                        $scope.selectedSex = BaseService.findObject($scope.cmbSex, 'value', "1");
                        
                        $scope.isLoading = false;
                    }
                );
            };
            
            $scope.getPickerData = function(callback, currentValue){
                //P_CUST_SEARCH = 1191
                if(currentValue){
                    $scope.pickerParam.query_gb = 8; //Customer No.
                    $scope.pickerParam.query_value = currentValue;
                    
                    $scope.selectedCustFilter = BaseService.findObject($scope.cmbCustFilter, 'value', $scope.pickerParam.query_gb);
                }
                else {
                    $scope.pickerParam.query_gb = $scope.selectedCustFilter.value;
                }
                
                BaseService.getPickerData(1191, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                    	"data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "data": "CUST_NO",
                            "class": "text-center"
                        }, {
                            "data": "RECEIVER"
                        }, {
                            "data": "RECEIVER_GB",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.cmbReceiverGb, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                        }, {
                            "render": function(data, type, row){
                                return row.RECEIVER_DDD + row.RECEIVER_TEL1 + row.RECEIVER_TEL2;
                            }
                        }, {
                            "data": "RECEIVER_POST",
                            "class": "text-center"
                        }, {
                            "data": "COMP_ADDR"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "order": [ 2, 'aesc' ],
                        "bDestroy": true,
                        "dom": 'Zrt<"bottom"lp><"clear">',
                        "colResize": {
                            "tableWidthFixed": false
                        }
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    setTimeout(function(){
                    	
                    	$scope.oTable.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                    		
                    		if($scope.oTable != null){
                        		$scope.selectedRow = $scope.oTable.api().row(this).index();
//                        		$scope.alreadyOkPress = false;
                        	}
                        	
                        	if($scope.currentCustomerRow != this){
                        		BaseService.setRowFocus(this);
                        		
                        		$('#picker_button_inquiry').blur();
                        		$('#picker_input_query_value').blur();
                        		$scope.currentCustomerRow = this;
                            	
                            	$scope.aData = $scope.oTable.api().row(this).data();
                                if($scope.aData != null){
                                	$scope.pickerSelectedDataClick = $scope.aData;
                                    $scope.allowEnterKeyPress = false;
                                	$scope.retrieveDetail();
                                }
                        	}
                        });
                    	
                    	/*$('#table_customer_picker').off('keypress').on('keypress',function(e) {
                            
                    		var keycode = (event.keyCode ? event.keyCode : event.which);
                        	if(keycode == '13' && $scope.pickerData && $scope.alreadyOkPress == false) {
                               if($scope.aData != null){
                          		 if($scope.selectCustomer){
                          			 
                          	     if($scope.selectCustomer.WITHDRAWAL_YN == "1"){
                          	    	 setTimeout(function(){
                          	    		$scope.alreadyOkPress = true;
                             			BaseService.alertWarning("Cannot select customer who opted out." , function(){                             				
                             				$(this).focus();
                             				return;	
                             			});
                          	    	}, 200);
                          	    	return;
                             			
                             		}
                             		else if($scope.selectCustomer.CUST_NO == "1"){
                             			setTimeout(function(){
                             				$scope.alreadyOkPress = true;
                             			BaseService.alertWarning("Proceed with customer query." , function(){
                             				$(this).focus();
                             				return;
                             			});
                             			}, 200);
                             			return;
                             			
                             		}
                             		else{
                             			$scope.pickerSelectedData = $scope.aData
                             			$scope.$emit($scope.pickerId + ".select", angular.copy($scope.aData));
                                      $('#' + $scope.pickerId).modal('hide');
                             		}
                             		
                             	}
                             }//here
                          	 
                          }
                    	
                    	
                        });*/
                    	
                    	
                    	
                    	$scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        	var aData = $scope.oTable.api().row(this).data();
                            if(aData != null){
                                if($scope.selectCustomer.CUST_NO) {
                                    if($scope.validateCustomer()){
                                        $scope.pickerSelectedData = aData;
                                        $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                                        $('#' + $scope.pickerId).modal('hide');
                                    }
                                }
                            }
                            
                            
                            
                    		//if($scope.alreadyOkPress == false){
                    			
//                    			if($scope.aData != null){
//                            		 if($scope.selectCustomer){
//                            			 
//                            	     if($scope.selectCustomer.WITHDRAWAL_YN == "1"){
//                            	    	 setTimeout(function(){
//                            	    		$scope.alreadyOkPress = true;
//                               			BaseService.alertWarning("Cannot select customer who opted out." , function(){                             				
//                               				$(this).focus();
//                               				return;	
//                               			});
//                            	    	}, 200);
//                            	    	return;
//                               			
//                               		}
//                               		else if($scope.selectCustomer.CUST_NO == "1"){
//                               			setTimeout(function(){
//                               				$scope.alreadyOkPress = true;
//                               			BaseService.alertWarning("Proceed with customer query." , function(){
//                               				$(this).focus();
//                               				return;
//                               			});
//                               			}, 200);
//                               			return;
//                               			
//                               		}
//                               		else{
//                               			$scope.pickerSelectedData = $scope.aData
//                               			$scope.$emit($scope.pickerId + ".select", angular.copy($scope.aData));
//                                        $('#' + $scope.pickerId).modal('hide');
//                               		}
//                               		
//                               	}
//                               }//here
                    			
                    			
                    		//}
                    		
                        });
                    	
                    	$('#table_customer_picker').off('keypress').on('keypress',function(e) {
                            setTimeout(function(){
                                var keycode = (e.keyCode ? e.keyCode : e.which);
                                if(keycode == '13') {
                                    if($scope.selectCustomer.CUST_NO) {
                                        if($scope.currentCustomerRow && $scope.allowEnterKeyPress) {
                                            var aData = $scope.oTable.api().row($scope.currentCustomerRow).data();
                                            if(aData) {
                                                if($scope.validateCustomer()){
                                                    $scope.pickerSelectedData = aData;
                                                    $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                                                    $('#' + $scope.pickerId).modal('hide');
                                                }
                                            }
                                        }
                                    }
                                }
                            }, 300);
                        });
                        
                       /*if(dataSource.length == 0){
                            $scope.clearInfoData();
                            BaseService.setDisabledControl(true);
                        }*/
                    }, 200);
                    
                   
                    
                    
//                    setTimeout(function(){
//                    	$(document).on('keypress',function(event) {
//                            	
//                    		var keycode = (event.keyCode ? event.keyCode : event.which);
//                                if(keycode == '13' && $scope.pickerData) {
//                                     if($scope.aData != null){
//                                		 if($scope.selectCustomer){
//                                	     if($scope.selectCustomer.WITHDRAWAL_YN == "1"){
//                                	    	 
//                                	    	setTimeout(function(){
//                                   			BaseService.alertWarning("Cannot select customer who opted out." , function(){
//                                   				return;	
//                                   			});
//                                	    	}, 200);
//                                	    	return;
//                                   			
//                                   		}
//                                   		else if($scope.selectCustomer.CUST_NO == "1"){
//                                   			setTimeout(function(){
//                                   			BaseService.alertWarning("Proceed with customer query." , function(){
//                                   				return;
//                                   			});
//                                   			}, 200);
//                                   			return;
//                                   			
//                                   		}
//                                   		else{
//                                   			$scope.pickerSelectedData = $scope.aData
//                                   			$scope.$emit($scope.pickerId + ".select", angular.copy($scope.aData));
//                                            $('#' + $scope.pickerId).modal('hide');
//                                   		}
//                                   		
//                                   	}
//                                   }
//                                	 
//                                }
//                                
//                            });
//                    }, 100);
 
                }
            };
            
            $scope.retrieveDetail = function(){
                
                var filter = {
                	cust_no: $scope.pickerSelectedDataClick.CUST_NO
                };
                
                BaseService.getPopupData("popup/retrieve-many/1192", filter).then(
                    function(response){
                        $scope.dataSheetDetail = response.data.result.RESULT;
                        $scope.selectCustomer = $scope.dataSheetDetail;
                        
                        $scope.selectCustomer.cwareAction = "MODIFY";
                        $scope.selectCustomer.ISMODIFYCUST = "1";
                        $scope.selectCustomer.ISMODIFYRECEIVER = "1";
                        
                        $('#customer_picker_input_birthday').datepicker('update', $scope.selectCustomer.BIRTHDAY.replace(/(\d{4})(\d{2})(\d{2})/, "$1-$2-$3"));
	                	
                        $scope.selectedCustSort = BaseService.findObject($scope.cmbCustSort, 'code', $scope.selectCustomer.CUST_GB);
                        $scope.selectedCustLevel = BaseService.findObject($scope.cmbCustLevel, 'code', $scope.selectCustomer.MEMB_GB);
                        $scope.selectedJoinMotive = BaseService.findObject($scope.cmbJoinMotive, 'code', $scope.selectCustomer.JOIN_MOTIVE);
                        $scope.selectedCharacter = BaseService.findObject($scope.cmbCharacter, 'code', $scope.selectCustomer.CUST_CHAR);
                        $scope.selectedSex = BaseService.findObject($scope.cmbSex, 'value', $scope.selectCustomer.SEX);
                        
                        $('#customer_picker_chkSMSReceivingQuery').prop('checked', ($scope.selectCustomer.SMS_YN == 0) ? false : true);
                        $('#customer_picker_chkOrderMail').prop('checked', ($scope.selectCustomer.ORDER_EMAIL_YN == 0) ? false : true);
                        $('#customer_picker_chkInfoMail').prop('checked', ($scope.selectCustomer.EMAIL_YN == 0) ? false : true);
                        
                        BaseService.setDisabledControl(false, "customer-picker-info-wrapper");
                        
                        $scope.allowEnterKeyPress = true;
                        if($scope.selectCustomer.CUST_WARNING) {
                            if(parseInt($scope.selectCustomer.CUST_WARNING) > 3000){
                                //$scope.alreadyOkPress = true;
                                $scope.allowEnterKeyPress = false;
                                BaseService.alertWarning('โปรดอ่านข้อมูลก่อนให้บริการลูกค้า');
                                return false;
                            }
                        }
                    }
                );  
            };
            
            $scope.inquiryClick = function(){
                $scope.isLoading = true;
                $scope.selectedRow = null;
                $scope.selectCustomer = {};
                
                if($scope.oTable != null){
                    $scope.oTable.fnClearTable();
                    $scope.oTable.fnDestroy();
                }
                
                $scope.getPickerData(function(respone){
                    setTimeout(function(){
                        $scope.isLoading = false;
                        $scope.pickerData = respone.data.result;
                        
                        if($scope.pickerData)
                        $.each($scope.pickerData, function(index, item){
                        	item.rowId = BaseService.generateId(18);
                        });
                        
                        
                        $scope.$apply();
                        
                        if($scope.pickerData){
                        	$scope.renderTable($scope.pickerData);
                            $('#table_customer_picker').focus();
                            setTimeout(function(){
                                BaseService.focusTableRow($scope.oTable, 0);
                            },200);
                        }
                        
                    },500);
                });
            };
            
            $scope.btnNewClick = function(){
            	
            	$scope.dataFilter = {};
            	$scope.selectCustomer = {};
            	
            	if($scope.selectedCustFilter.value == "1" && $scope.pickerParam.query_value != ""){
            		var telStr = $scope.pickerParam.query_value;
            		var localeTel = telStr.substr(0, 2);
            		var remainTel = '';
            		var remainLength = 0;
            		
            		if(localeTel == "02"){
            			remainTel = telStr.substr(2, telStr.length);
            			remainLength = remainTel.length;
            			if(remainLength == 7){
            				$scope.selectCustomer.RECEIVER_DDD = localeTel 
            				$scope.selectCustomer.RECEIVER_TEL1 = telStr.substr(2, 3); 
            				$scope.selectCustomer.RECEIVER_TEL2 = telStr.substr(5, telStr.length);
            			}
            			else{
            				$scope.selectCustomer.RECEIVER_DDD = localeTel 
            				$scope.selectCustomer.RECEIVER_TEL1 = telStr.substr(2, 4); 
            				$scope.selectCustomer.RECEIVER_TEL2 = telStr.substr(6, telStr.length);
            			}
            		}
            		else
					{
						localeTel = telStr.substr(0, 3);
						remainTel = telStr.substr(3, telStr.length);
						remainLength = remainTel.length;
						if(remainLength == 7)
						{
							$scope.selectCustomer.RECEIVER_DDD = localeTel;
							$scope.selectCustomer.RECEIVER_TEL1 = telStr.substr(3, 3);
							$scope.selectCustomer.RECEIVER_TEL2 = telStr.substr(6, telStr.length);
						}
						else
						{
							$scope.selectCustomer.RECEIVER_DDD = localeTel;
							$scope.selectCustomer.RECEIVER_TEL1 = telStr.substr(3, 4);
							$scope.selectCustomer.RECEIVER_TEL2 = telStr.substr(7, telStr.length);
						}
					}
            	}
            	
            	$scope.initForm();
            	
            	BaseService.setDisabledControl(false, "customer-picker-info-wrapper");
            	
                $('#customer_picker_input_cust_name3').focus();
            	
            };
            
            // Save Customer
            $scope.btnSaveClick = function(){
                
            	if($scope.validateForSave()){
            		
            		var paramsCustomer = [];
                    
                    $scope.selectCustomer.WITHDRAWAL_CODE = ($scope.selectedReasonCode == null) ? "" : $scope.selectedReasonCode.code;
                    $scope.selectCustomer.ORDER_EMAIL_YN = ($('#customer_picker_chkOrderMail').prop('checked')) ? 1 : 0;
                    $scope.selectCustomer.EMAIL_YN = ($('#customer_picker_chkInfoMail').prop('checked')) ? 1 : 0;

                    var customer = {
                    	
                    	CUST_NO: $scope.selectCustomer.CUST_NO,
                    	MEMB_NO: $scope.selectCustomer.MEMB_NO,
                    	PASSWD: $scope.selectCustomer.PASSWD,
                    	RESIDENT_NO: $scope.selectCustomer.RESIDENT_NO,
                    	ID_INSERT_DATE: $scope.selectCustomer.ID_INSERT_DATE,
                    	SEX: $scope.selectedSex.value,
                		ENAME: $scope.selectCustomer.ENAME,
                		BIRTHDAY_YN: $scope.selectCustomer.BIRTHDAY_YN,
                		BIRTHDAY: $('#customer_picker_input_birthday').val().replace('/', ""),

                		WEDDING_DATE: $scope.selectCustomer.WEDDING_DATE,
                		//JOB_CODE: $scope.selectedOccupation.code,
                		COUNTRY: $scope.selectCustomer.COUNTRY,
                		EMAIL_FLAG: $scope.selectCustomer.EMAIL_FLAG,
                		//RECEIVE_METHOD: $scope.selectedEntryMethod.code,
                		//WITHDRAWAL_CODE: $scope.selectCustomer.WITHDRAWAL_CODE,
                		//WITHDRAWAL_DATE: $('#customer_picker_input_withdrawal_date').val(),
                		INSERT_DATE: $scope.selectCustomer.INSERT_DATE,
                		INSERT_ID: $scope.selectCustomer.INSERT_ID,
                		MODIFY_DATE: $scope.selectCustomer.MODIFY_DATE,
                		MODIFY_ID: $scope.selectCustomer.MODIFY_ID,

                		CUST_NAME1: $scope.selectCustomer.CUST_NAME1,
                		CUST_NAME2: $scope.selectCustomer.CUST_NAME2,
                		CUST_NAME3: $scope.selectCustomer.CUST_NAME3,
                		MEM_ID: $scope.selectCustomer.MEM_ID,
                		PASSWD_HINT: $scope.selectCustomer.PASSWD_HINT,
                		PASSWD_ANSWER: $scope.selectCustomer.PASSWD_ANSWER,
                		COMP_NAME: $scope.selectCustomer.COMP_NAME,
                		COMP_DEPTNAME: $scope.selectCustomer.COMP_DEPTNAME,
                		EMAIL_ADDR: $scope.selectCustomer.EMAIL_ADDR,
                		EM_NO: $scope.selectCustomer.EM_NO,
                		NOMINATE_ID: $scope.selectCustomer.NOMINATE_ID,
                		NOMINATE_YN: $scope.selectCustomer.NOMINATE_YN,
                		WITHDRAWAL_CONTENT: $scope.selectCustomer.WITHDRAWAL_CONTENT,

                		WEDDING_YN: $scope.selectCustomer.WEDDING_YN,
                        JOIN_MOTIVE: $scope.selectedJoinMotive.code,
                		EMAIL_YN: $scope.selectCustomer.EMAIL_YN,
                		ORDER_EMAIL_YN: $scope.selectCustomer.ORDER_EMAIL_YN,
                		SMS_YN: $scope.selectCustomer.SMS_YN,
                		EM_YN: $scope.selectCustomer.EM_YN,
                		WITHDRAWAL_YN: $scope.selectCustomer.WITHDRAWAL_YN,
                		HEAD_OFFICE: $scope.selectCustomer.HEAD_OFFICE,
                		
                		CUST_GB: $scope.selectedCustSort.code,
                		MEMB_GB: $scope.selectedCustLevel.code,
                		CUST_CHAR: $scope.selectedCharacter.code,
                		//CUST_WARNING: $scope.selectedWarning.code,
                		DM_YN: $scope.selectCustomer.DM_YN,
                		DM_NO_GB: "00",
                		DM_NO_ID: $scope.selectCustomer.DM_NO_ID,
                		DM_NO_DATE: $scope.selectCustomer.DM_NO_DATE,
                		
                		RECEIVER_GB: "00",
                        RECEIVER_ADDR1: $scope.selectCustomer.RECEIVER_ADDR1,
                        RECEIVER_ADDR2: $scope.selectCustomer.RECEIVER_ADDR2,
                        RECEIVER_ADDR3: $scope.selectCustomer.RECEIVER_ADDR3,
                        RECEIVER_ADDR4: $scope.selectCustomer.RECEIVER_ADDR4,
                        RECEIVER_ADDR5: $scope.selectCustomer.RECEIVER_ADDR5,
                                
                		RECEIVER_POST: $scope.selectCustomer.RECEIVER_POST,
                		RECEIVER_DDD: $scope.selectCustomer.RECEIVER_DDD,
                		RECEIVER_TEL1: $scope.selectCustomer.RECEIVER_TEL1,
                		RECEIVER_TEL2: $scope.selectCustomer.RECEIVER_TEL2,
                		RECEIVER_TEL3: $scope.selectCustomer.RECEIVER_TEL3,

                		RECEIVER_HP1: $scope.selectCustomer.RECEIVER_HP1,
                		RECEIVER_HP2: $scope.selectCustomer.RECEIVER_HP2,
                		RECEIVER_HP3: $scope.selectCustomer.RECEIVER_HP3,

                		RECEIVER_SEQ: $scope.selectCustomer.RECEIVER_SEQ,
                		RECEIVER_POST_SEQ: $scope.selectCustomer.RECEIVER_POST_SEQ,
                		REC_INSERT_ID: $scope.selectCustomer.REC_INSERT_ID,
                		REC_INSERT_DATE: $scope.selectCustomer.REC_INSERT_DATE,
                		REC_MODIFY_ID: $scope.selectCustomer.REC_MODIFY_ID,
                		REC_MODIFY_DATE: $scope.selectCustomer.REC_MODIFY_DATE,
                		
                		ISMODIFYCUST: $scope.selectCustomer.ISMODIFYCUST,
                		ISMODIFYSYSTEM: $scope.selectCustomer.ISMODIFYSYSTEM,
                		ISMODIFYRECEIVER: $scope.selectCustomer.ISMODIFYRECEIVER,
                		ISMODIFYSPINFO: $scope.selectCustomer.ISMODIFYSPINFO,
                    	cwareAction: $scope.selectCustomer.cwareAction
                    };
                    	
                    paramsCustomer.push(customer);
                        	
                    var data = {paramsCustomer: paramsCustomer}
                    
                    BaseService.save(data,'4510001').then(
                    	function(response){
                            sweetAlert("Success", "Processing is complete.", "success");
                            
                            $scope.saveResult = response.data.result;
                            
                            $scope.selectCustomer.CUST_NO = $scope.saveResult.split('|')[1];
                            
                            
                            $scope.getPickerData(function(response){
                                setTimeout(function(){
                                	$scope.selectedRow = null;
                                    $scope.isLoading = false;
                                    $scope.pickerData = response.data.result;
                                    if($scope.pickerData)
                                    $.each($scope.pickerData, function(index, item){
                                    	item.rowId = BaseService.generateId(18);
                                    });
                                    $scope.$apply();
                                    
                                    if($scope.pickerData){
                                    	$scope.renderTable($scope.pickerData);
                                    	$('#table_customer_picker').focus();
                                    	 setTimeout(function(){
                                             BaseService.focusTableRow($scope.oTable, 0);
                                             },200);
                                        
                                    }
                                    
                                },500);
                            }, $scope.selectCustomer.CUST_NO);
                            //$scope.$emit('onRetrieveClick');
                        },
                        function(response){
                            sweetAlert("Error", response.message, "error");
                        }
                    );
            	}
            };
            
            $scope.btnOrderingClick = function(){
                if($scope.validateCustomerSelected()){
                    var params = {
                        cust_no: $scope.selectCustomer.CUST_NO
                    };
                    BaseService.openNewTab('3510003', params);   
                }
            };
            
            $scope.validateCustomerSelected = function(){
                if(!$scope.selectCustomer.CUST_NO){
                    BaseService.alertWarning("Proceed with customer query.");
                    return false;
                }
                return true;
            };
            
            $scope.initForm = function(){
            	
            	$scope.selectCustomer.ISMODIFYCUST = "0";
            	$scope.selectCustomer.ISMODIFYSYSTEM = "0";
    			$scope.selectCustomer.ISMODIFYRECEIVER = "0";
    			$scope.selectCustomer.ISMODIFYSPINFO = "0";
                $scope.selectCustomer.cwareInfo = "0";
                
            	$scope.selectCustomer.cwareAction = "INSERT";    
            	$scope.selectCustomer.dt_cwareAction = "INSERT";
            	
            	$scope.selectCustomer.CUST_GB = "10";
            	$scope.selectCustomer.MEMB_GB = "40";
            	$scope.selectCustomer.JOB_CODE = "99";
            	$scope.selectCustomer.COUNTRY = "0066";
            	$scope.selectCustomer.JOIN_MOTIVE = "001";
            	$scope.selectCustomer.RECEIVE_METHOD  = "01";
            	$scope.selectCustomer.CUST_CHAR = "99";
            	$scope.selectCustomer.WITHDRAWAL_CODE = "";
            	$scope.selectCustomer.DM_NO_GB = "00";
            	$scope.selectCustomer.DM_NO_ID = "";
            	$scope.selectCustomer.DM_NO_DATE = "";
            	$scope.selectCustomer.DEFAULT_YN = "1";
            	$scope.selectCustomer.BIRTHDAY_YN = "1";
                $scope.selectCustomer.NOMINATE_YN = "0";
            	$scope.selectCustomer.WITHDRAWAL_YN = "0";
            	$scope.selectCustomer.WEDDING_YN = "0";
            	$scope.selectCustomer.SMS_YN = "1";
            	$scope.selectCustomer.ORDER_EMAIL_YN = "0";
            	$scope.selectCustomer.EMAIL_YN = "0";
            	$scope.selectCustomer.EM_YN = "0";
            	$scope.selectCustomer.EMAIL_FLAG = "01";
            	$scope.selectCustomer.DM_YN = "1";

            	//= tcustomer
            	//$scope.selectCustomer.JOB_CODE = getJSONObjects($scope.cmbOccupation, 'code', "99");
            	//$scope.selectCustomer.RECEIVE_METHOD = getJSONObjects($scope.cmbEntryMethod, 'code', "01");
    	        $scope.selectedSex = BaseService.findObject($scope.cmbSex, 'value', "1");

    	        //= tcustsystem
    	        $scope.selectCustomer.DM_NO_GB = "00";
    	        $scope.selectCustomer.DM_NO_ID = "";
    	        $scope.selectCustomer.DM_NO_DATE = "";
    	        $scope.selectCustomer.CUST_WARNING = "1001";

    	        //= treceiver
    	        $scope.selectCustomer.RECEIVER_GB = "00";
    	        $scope.selectCustomer.DEFAULT_YN = "1";

    	        //= set radio, check
    	        $scope.selectCustomer.birthday_yn = "1";
                //$('#customer_picker_chkRecommendation').prop('checked', false);
    	        $('#customer_picker_chkSMSReceivingQuery').prop('checked', true);
                //$('#customer_picker_chkMarriage').prop('checked', false);
                $('#customer_picker_chkOrderMail').prop('checked', false);
                $('#customer_picker_chkInfoMail').prop('checked', false);

    	        //$scope.selectCustomer.PWMAIL_YN = "";
                
                $scope.selectedCustSort = BaseService.findObject($scope.cmbCustSort, 'code', '10');
                $scope.selectedCustLevel = BaseService.findObject($scope.cmbCustLevel, 'code', '40');
                //$scope.selectedOccupation = BaseService.findObject($scope.cmbOccupation, 'code', '99');
                //$scope.selectedEntryMethod = ($scope.cmbEntryMethod.length > 0) ? $scope.cmbEntryMethod[0] : {};
                $scope.selectedJoinMotive = BaseService.findObject($scope.cmbJoinMotive, 'code', '001');
                $scope.selectedCharacter = BaseService.findObject($scope.cmbCharacter, 'code', '99');
                //$scope.selectedReasonCode = null;
                //$scope.selectedFirstSaleType = null;
                
                $('#customer_picker_input_birthday').data('datepicker').setDate(null);
                //$('#input_withdrawal_date').data('datepicker').setDate(null);
                //$('#input_date_wedding_anniversary').data('datepicker').setDate(null);
                
            }
            
            $scope.validateForSave = function(){
            	
            	//Check Tile
    			if(!$scope.selectCustomer.CUST_NAME3){
    				swal({
                        title: "warning",
                        text: "Enter Tile Name.",
                        type: "warning"
                    }, function() { 
                        setTimeout(function(){
                        	$('#customer_picker_input_cust_name3').focus();
                        },200);
                    });
    				return false;
    			}
    			
    			//Check First Name
    			if(!$scope.selectCustomer.CUST_NAME2){
    				swal({
                        title: "warning",
                        text: "Enter First Name.",
                        type: "warning"
                    }, function() { 
                        setTimeout(function(){
                        	$('#customer_picker_input_cust_name2').focus();
                        },200);
                    });
    				return false;
    			}
    			
    			//Check Customer
    			if(!$scope.selectCustomer.CUST_NAME1){
    				swal({
                        title: "warning",
                        text: "Enter Last Name.",
                        type: "warning"
                    }, function() { 
                        setTimeout(function(){
                        	$('#customer_picker_input_cust_name1').focus();
                        },200);
                    });
    				return false;
    			}
    			
    			//Check Citizen Id.
    			if($scope.selectCustomer.RESIDENT_NO){
    				if($scope.selectCustomer.RESIDENT_NO.length == 10 || $scope.selectCustomer.RESIDENT_NO.length == 13){
    					//Do not take things.
    				} else {
    					swal({
    	                    title: "warning",
    	                    text: "Social Security number is incorrect.",
    	                    type: "warning"
    	                }, function() { 
    	                    setTimeout(function(){
    	                    	$('#customer_picker_input_citizen_id').focus();
    	                    },200);
    	                });
    					return false;
    				}
    			}
    			
    			//Check House No.
    			if(!$scope.selectCustomer.RECEIVER_ADDR5){
    				swal({
                        title: "warning",
                        text: "Enter House No.",
                        type: "warning"
                    }, function() { 
                        setTimeout(function(){
                        	$('#customer_picker_input_reciver_addr5').focus();
                        },200);
                    });
    				return false;
    			}
    			    			
    			//Check Zip
    			if(!$scope.selectCustomer.RECEIVER_POST){
    				swal({
                        title: "warning",
                        text: "Enter Zip Code.",
                        type: "warning"
                    }, function() { 
                        setTimeout(function(){
                        	$('#customer_picker_input_receiver_post').focus();
                        },200);
                    });
    				return false;
    			}
    			
    			//Check Tel
    			if(!$scope.selectCustomer.RECEIVER_DDD){
    				swal({
                        title: "warning",
                        text: "Enter Tel.(DDD).",
                        type: "warning"
                    }, function() { 
                        setTimeout(function(){
                        	$('#customer_picker_input_receiver_ddd').focus();
                        },200);
                    });
    				return false;
    			}
    			
    			//Check Tel_1
    			if(!$scope.selectCustomer.RECEIVER_TEL1){
    				swal({
                        title: "warning",
                        text: "Enter Tel.",
                        type: "warning"
                    }, function() { 
                        setTimeout(function(){
                        	$('#customer_picker_input_receiver_tel1').focus();
                        },200);
                    });
    				return false;
    			} 
    			
    			//Check Tel_2
    			if(!$scope.selectCustomer.RECEIVER_TEL2){
    				swal({
                        title: "warning",
                        text: "Enter Tel.",
                        type: "warning"
                    }, function() { 
                        setTimeout(function(){
                        	$('#customer_picker_input_receiver_tel2').focus();
                        },200);
                    });
    				return false;
    			} 
    			
    			/*if(!$('#input_join_motive').val()){
    				swal({
                        title: "warning",
                        text: "Enter Join Motive.",
                        type: "warning"
                    }, function() { 
                        setTimeout(function(){
                        	$('#customer_picker_input_join_motive').focus();
                        },200);
                    });
    				return false;
    			}*/
    			
    			return true;
            }
            
            $scope.validateCustomer = function(){
                if($scope.selectCustomer) {
                    if($scope.selectCustomer.WITHDRAWAL_YN == "1"){
                        //$scope.alreadyOkPress = true;
                        $scope.allowEnterKeyPress = false;
                        BaseService.alertWarning("Cannot select customer who opted out.", null, 430);
                        return false;
                    }
                    else if($scope.selectCustomer.CUST_NO == "1"){
                        //$scope.alreadyOkPress = true;
                        $scope.allowEnterKeyPress = false;
                        BaseService.alertWarning("Proceed with customer query.");
                        return false;
                    }
                }
                return true;
            };
            
           /* $scope.checkEditData = function(){
                var isEdit = false;
                if($scope.popupData != null){
                    $.each($scope.popupData, function(index, item){
                        if(item.cwareAction == 'I' || item.cwareAction == 'U'){
                            isEdit = true;
                            return;
                        }
                    });
                }
                return isEdit;
            };*/
            // End Save Customer
            
            $scope.setDataModify = function(type){
            	switch(type){
                    case "1": {
                            $scope.selectCustomer.ISMODIFYSYSTEM = "1";
                        }
                        break;
                    case "2": {
                            $scope.selectCustomer.ISMODIFYCUST = "1";
                            $scope.selectCustomer.ISMODIFYSYSTEM = "1";
                        }
                        break;
                    case "3": {
                            $scope.selectCustomer.ISMODIFYSPINFO = "1";
                            $scope.selectCustomer.ISMODIFYRECEIVER = "1";
                        }
                        break;
                    case "4": {
                            $scope.selectCustomer.ISMODIFYRECEIVER = "1";
                            $scope.selectCustomer.DT_CWAREINFO = "1";
                        }
                        break;
                    case "5": {
                            $scope.selectCustomer.ISMODIFYRECEIVER = "1";
                        }
                        break;
                }
            };
            
            $scope.activateControlEvent = function(){
            	$('#'+ $scope.pickerId +'_input_birthday').datepicker().on('changeDate', function(e) {
            		//$scope.setDataModify("2");
                }); 
            };
            
            $scope.$on('customer_picker_zip_code_picker.select', function(e, data){
                $scope.selectCustomer.RECEIVER_POST = data.POST_NO;
                $scope.selectCustomer.RECEIVER_POST_SEQ = data.POST_SEQ;
                $scope.selectCustomer.COMP_ADDR = data.COMP_ADDR;
                $scope.$apply();
            });
            $scope.$on('customer_picker_zip_code_picker.clear', function(e, data){
                $scope.selectCustomer.RECEIVER_POST = "";
                $scope.selectCustomer.RECEIVER_POST_SEQ = "";
                $scope.selectCustomer.COMP_ADDR = "";
                $scope.$apply();
            });
            
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'customer_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('programCodePicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/programCodePicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_PROG_CODE_REAL = 1049
                BaseService.getPickerData(1049, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "data": "PROG_CODE",
                            "class": "text-center"
                        }, {
                            "data": "PROG_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                        "paging": false,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    BaseService.focusTableRow($scope.oTable, 0);
                    
                    setTimeout(function(){
                        $scope.oTable.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                        	BaseService.setRowFocus(this);
                        	$scope.currentRow = this;
                        }); 
                     },50);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'program_code_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('stockCardForAccountingPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/stockCardForAccountingPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_STOCK_CARD_FOR_ACCOUNTING = 1225
                BaseService.getPickerData(1225, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );

            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'BRAND_CODE',
                            "class": 'text-center'
                        }, {
                            "data": 'BRAND_NAME'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'stock_card_for_accounting_picker' : scope.pickerId;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('staffPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/staffPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_STAFF_SNO = 1231
                BaseService.getPickerData(1231, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "data": "USER_GB",
                            "class": "text-center"
                        }, {
                            "data": "USER_ID",
                            "class": "text-center"
                        }, {
                            "data": "USER_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'staff_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('pdPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/pdPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_USER_ID = 1001
                $scope.pickerParam.user_gb = "05";
                BaseService.getPickerData(1001, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "data": "USER_ID"
                        }, {
                            "data": "USER_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'pd_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('shPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/shPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_USER_ID = 1001
                $scope.pickerParam.user_gb = "06";
                BaseService.getPickerData(1001, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "data": "USER_ID"
                        }, {
                            "data": "USER_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'sh_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('userPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerHeaderData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/userPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.$on($scope.pickerId + ".open",function(e) {
                //clear picker params before get picker data.
                $scope.selectedUserType = null;
//            	$scope.pickerParam.user_gb = null;
            	
                $scope.pickerParam.user_gb = ($scope.pickerParam.user_gb == null) ? null : $scope.pickerParam.user_gb;
            
              
            });
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerHeaderData = function(callback){
                //P_USER_ID = 1001
                BaseService.getPickerHeaderData(1001).then(
                    function(respone){
                        callback(respone);
                        if($scope.pickerParam.user_gb)
                        $scope.selectedUserType = getJSONObjects(respone.data.C_USER_GB, 'code', $scope.pickerParam.user_gb)[0];
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.getPickerData = function(callback){
                //P_USER_ID = 1001
                if($scope.selectedUserType != null){
                    $scope.pickerParam.user_gb = $scope.selectedUserType.code;
                }
                BaseService.getPickerData(1001, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "data": "USER_ID",
                        }, {
                            "data": "USER_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off('click', 'tbody tr');
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                    	BaseService.setRowFocus(this);
                        $scope.currentRow = this;
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
            
            $scope.inquiryClick = function(){
                $scope.isLoading = true;
                
                if($scope.oTable != null){
                    $scope.oTable.fnClearTable();
                    $scope.oTable.fnDestroy();
                }
                
                $scope.getPickerData(function(respone){
                    setTimeout(function(){
                        $scope.isLoading = false;
                        $scope.pickerData = respone.data.result;
                        $scope.$apply();
                        $scope.renderTable($scope.pickerData);
                    },500);
                });
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerHeaderData = (scope.pickerHeaderData == null) ? [] : scope.pickerHeaderData;
            scope.pickerId = (scope.pickerId == null) ? 'user_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('userGbPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerHeaderData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/userGbPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.$on($scope.pickerId + ".open",function(e) {
                //clear picker params before get picker data.
                $scope.selectedUserType = null;
                $scope.pickerParam.user_gb = null;
            });
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerHeaderData = function(callback){
                //P_USER_GROUP_ID = 1142
                BaseService.getPickerHeaderData(1142).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.getPickerData = function(callback){
            	//P_USER_GROUP_ID = 1142
                if($scope.selectedUserType != null){
                    $scope.pickerParam.user_gb = $scope.selectedUserType.code;
                }
                BaseService.getPickerData(1142, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "data": "CODE_MGROUP",
                        }, {
                            "data": "CODE_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                    	BaseService.setRowFocus(this);
                        $scope.currentRow = this;
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
            
            $scope.inquiryClick = function(){
                $scope.isLoading = true;
                
                if($scope.oTable != null){
                    $scope.oTable.fnClearTable();
                    $scope.oTable.fnDestroy();
                }
                
                $scope.getPickerData(function(respone){
                    setTimeout(function(){
                        $scope.isLoading = false;
                        $scope.pickerData = respone.data.result;
                        $scope.$apply();
                        $scope.renderTable($scope.pickerData);
                    },500);
                });
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerHeaderData = (scope.pickerHeaderData == null) ? [] : scope.pickerHeaderData;
            scope.pickerId = (scope.pickerId == null) ? 'user_gb_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('promotionPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/promotionPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_PROMO_NO = 1034
                BaseService.getPickerData(1034, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "data": "PROMO_NO",
                            "class": "text-center"
                        }, {
                            "data": "PROMO_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off('click', 'tbody tr');
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                    	BaseService.setRowFocus(this);
                        $scope.currentRow = this;
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'promotion_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('masterCodePicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/masterCodePicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.saleGb = [];
            
            $scope.$on($scope.pickerId + ".open",function(e) {
                //clear picker params before get picker data.
                $scope.pickerParam.r_value = 1; //default filter by column GOODS_CODE.
                $scope.pickerParam.goods_code = "";
                $scope.pickerParam.goods_name = "";
            });
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_MASTER_CODE = 1089
                BaseService.getPickerData(1089, $scope.pickerParam).then(
                    function(respone){
                        //extra data
                        $scope.saleGb = respone.data.result_c_sale_gb;
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(row, type, data){
                                return "";
                            }
                        }, {
                            "data": "GOODS_CODE",
                            "class": "text-center"
                        }, {
                            "data": "GOODS_NAME"
                        }, {
                            "data": "SALE_GB",
                            "class": "text-center",
                            "render": function(row, type, data){
                                var saleType = "";
                                var selectSaleType = getJSONObjects($scope.saleGb, 'code', data.SALE_GB);
                                if(selectSaleType != null && selectSaleType.length > 0){
                                    saleType = selectSaleType[0].codeName;
                                }
                                return saleType;
                            }
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
            
            $scope.inputChangeClick = function(e){
                var radioId = $(e.currentTarget).attr('radio-relate');
                if(!$('#' + $scope.pickerId + ' #' + radioId).prop('checked')){
                    $('#' + $scope.pickerId + ' #' + radioId).prop('checked', true);
                    $scope.filterSelectChange(radioId);
                }
            };
            
            $scope.filterSelectChange = function(radioId){
                $scope.dataFilter = ($scope.dataFilter == null) ? {} : $scope.dataFilter;
                switch(radioId){
                    case "rdItemCode":{
                            $scope.dataFilter.r_value = 1;
                            $scope.dataFilter.goods_name = "";
                        }
                        break;
                    case "rdItemName":{
                            $scope.dataFilter.r_value = "";
                            $scope.dataFilter.goods_code = "";
                        }
                        break;
                }
                $scope.pickerParam = angular.copy($scope.dataFilter);
                $('input[radio-relate="'+ radioId +'"]').focus();
            };
            
            $scope.inquiryClick = function(){
                $scope.isLoading = true;
                
                if($scope.oTable != null){
                    $scope.oTable.fnClearTable();
                    $scope.oTable.fnDestroy();
                }
                
                $scope.getPickerData(function(respone){
                    setTimeout(function(){
                        $scope.isLoading = false;
                        $scope.pickerData = respone.data.result;
                        $scope.$apply();
                        $scope.renderTable($scope.pickerData);
                    },500);
                });
            }
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'master_code_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('buyMethodPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/buyMethodPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_BUY_MED = 1237
                BaseService.getPickerData(1237, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(row, type, data){
                                return "";
                            }
                        }, {
                            "data": "BUY_MED",
                            "class": "text-center"
                        }, {
                            "data": "BUY_MED_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'buy_method_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('bankPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/bankPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_BANK_CODE = 1061
                BaseService.getPickerData(1061, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'BANK_CODE',
                            "class": 'text-center'
                        }, {
                            "data": 'BANK_NAME'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bSort": true,
                        "paging": false,
                        "filter": false,
                        "info": false,
                        "scrollX": true,
                        "scrollCollapse": true
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off('click', 'tbody tr');
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                    	BaseService.setRowFocus(this);
                       
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'bank_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('receiptBankPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/receiptBankPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_RECEIPTSBANK_CODE = 1060
                BaseService.getPickerData(1060, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'BANK_CODE',
                            "class": 'text-center'
                        }, {
                            "data": 'BANK_NAME'
                        }, {
                            "data": 'BANK_DEPOSIT_NO'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                        "bSort": true,
                        "paging": false,
                        "filter": false,
                        "info": false,
                        "scrollX": true,
                        "scrollCollapse": true
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                    	BaseService.setRowFocus(this);
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'receipt_bank_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('channelPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/channelPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_MEDIA_CODE = 1028
                BaseService.getPickerData(1028, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'CODE_NAME'
                        }, {
                            "data": 'MEDIA_CODE',
                            "class": 'text-center'
                        }, {
                            "data": 'MEDIA_NAME'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
//                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                        "bSort": true,
                        "paging": false,
                        "filter": false,
                        "info": false,
                        "scrollX": true,
                        "scrollCollapse": true
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                    	BaseService.setRowFocus(this);
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'channel_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('orderItemPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/orderItemPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.cmbProductLine = [];
            $scope.saleGb = [];
            $scope.selectedProductLine = {};
            $scope.itemDescriptionParam = {};
            
            $scope.$on($scope.pickerId + ".open",function(e) {
                $('#' + $scope.pickerId).on('hidden.bs.modal', function () {
                    $scope.pickerParam = {}
                    $scope.itemDescriptionParam = {};
                    $scope.selectedProductLine = {};
                    $("#txtFilter").val("");
                });
                

            });
            
            $scope.$on($scope.pickerId +'.show', function(e, data){
            	$('#' + $scope.pickerId + ' .modal-content-wrapper').css('opacity', 1);
            });
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                $scope.pickerParam.product_line = ($scope.selectedProductLine.code) ? $scope.selectedProductLine.code : '01';
                
                BaseService.getPickerData(null, $scope.pickerParam, 'retrieve-order-goods').then(
                    function(respone){
                        //extra data
                        $scope.saleGb = respone.data.C_SALE_GB;
                        if($scope.selectedProductLine.code == null){
                            $scope.cmbProductLine = respone.data.C_PRODUCT_LINE;
                            if($scope.cmbProductLine != null && $scope.cmbProductLine.length > 0){
                                $scope.selectedProductLine = $scope.cmbProductLine[0];
                            }
                        }
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.descriptionClick = function(){
            	
            	$scope.itemDescriptionParam.goods_code = ($scope.pickerSingleSelectedData.GOODS_CODE == null || $scope.pickerSingleSelectedData.GOODS_CODE == "") ? "" : $scope.pickerSingleSelectedData.GOODS_CODE
            	$scope.itemDescriptionParam.goods_name = ($scope.pickerSingleSelectedData.GOODS_NAME == null || $scope.pickerSingleSelectedData.GOODS_NAME == "") ? "" : $scope.pickerSingleSelectedData.GOODS_NAME
        		setTimeout(function(){
            		$scope.$broadcast('make_order_item_description_popup.open');
            		$('#' + $scope.pickerId + ' .modal-content-wrapper').css('opacity', 0);
                }, 200);
            }
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "lengthMenu": [
                            [10, 25, 50, 100, 200, -1],
                            [10, 25, 50, 100, 200, "All"]
                        ],
                        "pageLength": 50,
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "data": "GOODS_CODE",
                            "class": "text-center"
                        }, {
                            "data": "GOODS_NAME"
                        }, {
                            "data": "ORDER_POSSIBLE",
                            "class": "text-right"
                        }, {
                            "data": "SALE_PRICE",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 2)
                            }
                        }, {
                            "data": "EXCH_YN",
                            "render": function(data, type, row){
                                return (data == 1) ? "" : "Not Possible";
                            }
                        }, {
                            "data": "RETURN_YN",
                            "render": function(data, type, row){
                                return (data == 1) ? "" : "Not Possible";
                            }
                        }, {
                            "data": "SALE_GB",
                            "class": "text-center",
                            "render": function(data, type, row){
                                var saleType = "";
                                var selectSaleType = getJSONObjects($scope.saleGb, 'code', data);
                                if(selectSaleType != null && selectSaleType.length > 0){
                                    saleType = selectSaleType[0].codeName;
                                }
                                return saleType;
                            }
                        }, {
                            "data": "PRODUCT_LINE1"
                        }, {
                            "data": "DELIVERY_LOCATION1"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "order": [ 2, 'asc' ],
//                        "dom": 'Zrt<lp><"clear">',
                        "dom": 'Zrt<lp>',
                        "bDestroy": true,
                        "colResize": {
                            "tableWidthFixed": false
                        },
                        "bSort": true,
                        //"paging": false,
                        //"filter": false,
                        "info": false,
                        "scrollX": true,
                        "scrollCollapse": true
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    setTimeout(function(){
                        $("#txtFilter").keyup(function() {
                            if ($scope.oTable != null) {
                                $scope.oTable.api().search( this.value ).draw();
                            }
                        });
                        
                        $scope.oTable.off("click", "tbody tr").on("click", "tbody tr", function(e) {
                        	var aData = $scope.oTable.api().row(this).data();
                            BaseService.setRowFocus(this);
                            $scope.currentRow = this;
                            if(aData != null){
                                $scope.pickerSingleSelectedData = aData;
                               
                            }
                        });

                        $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                            var aData = $scope.oTable.api().row(this).data();
                            if(aData != null){
                                $scope.pickerSelectedData = aData;
                                if(aData.SALE_GB != '00') {
                                    BaseService.alertWarning('Unit of which selling is suspended temporarily/permanently. Unable to select.<br>[Item : '+ aData.GOODS_NAME +']');
                                    return false;
                                }
                                $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                                $('#' + $scope.pickerId).modal('hide');
                            }
                        });
                        
                        BaseService.focusTableRow($scope.oTable, 0);
                    }, 50);
                }
            };
            
            $scope.inputChangeClick = function(e){
                var radioId = $(e.currentTarget).attr('radio-relate');
                if(!$('#' + $scope.pickerId + ' #' + radioId).prop('checked')){
                    $('#' + $scope.pickerId + ' #' + radioId).prop('checked', true);
                    $scope.filterSelectChange(radioId);
                }
            };
            
            $scope.filterSelectChange = function(radioId){
                $scope.dataFilter = ($scope.dataFilter == null) ? {} : $scope.dataFilter;
                switch(radioId){
                    case "rdItemCode":{
                            $scope.dataFilter.r_value = 1;
                            $scope.dataFilter.goods_name = "";
                        }
                        break;
                    case "rdItemName":{
                            $scope.dataFilter.r_value = "";
                            $scope.dataFilter.goods_code = "";
                        }
                        break;
                }
                $scope.pickerParam = angular.copy($scope.dataFilter);
                $('input[radio-relate="'+ radioId +'"]').focus();
            };
            
            $scope.inquiryClick = function(){
                $scope.isLoading = true;
                
                if($scope.oTable != null){
                    $scope.oTable.fnClearTable();
                    $scope.oTable.fnDestroy();
                }
                
                $scope.getPickerData(function(respone){
                    setTimeout(function(){
                        $scope.isLoading = false;
                        $scope.pickerData = respone.data.result;
                        $scope.$apply();
                        $scope.renderTable($scope.pickerData);
                    },500);
                });
            }
            
            $scope.confirmClick = function(){
                var aData = $scope.oTable.api().row($scope.currentRow).data();
                if(aData != null){
                    $scope.pickerSelectedData = aData;
                    $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                    $('#' + $scope.pickerId).modal('hide');
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'order_item_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('controlReasonPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/controlReasonPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_RACK_CONTROL_NAME = 1073
                BaseService.getPickerData(1073, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'CODE_MGROUP',
                            "class": 'text-center'
                        }, {
                            "data": 'CODE_NAME'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off('click', 'tbody tr');
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                    	BaseService.setRowFocus(this);
                       
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'control_reason_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('warehousePicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/warehousePicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_WH_CODE = 1040
                BaseService.getPickerData(1040, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'WH_CODE',
                            "class": 'text-center'
                        }, {
                            "data": 'WH_NAME'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'warehouse_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('paymentPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/paymentPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_SETTLEINFO = 1156
                BaseService.getPickerData(1156, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'SETTLE_FLAG',
                            "class": 'text-center'
                        }, {
                            "data": 'SETTLE_NAME'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off('click', 'tbody tr');
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                    	BaseService.setRowFocus(this);
                        $scope.currentRow = this;
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'payment_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('receiptBankInfoPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/receiptBankInfoPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_CUST_RECEIPTSBANK2 = 1235
                BaseService.getPickerData(1235, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'BANK_CODE',
                            "class": 'text-center'
                        }, {
                            "data": 'BANK_NAME'
                        }, {
                            "data": 'TYPE'
                        }, 
//                        {
//                            "data": 'BANK_DEPOSIT_NO'
//                        }
//                        , 
                        {
                            "data": 'SERV_CODE'
                        }, {
                            //"data": 'SERV_CODE'
                            "render": function(row, type, data){
                                return '';
                            }
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'Zrt<"bottom"lp><"clear">',
                        "bDestroy": true,
                        "colResize": {
                            "tableWidthFixed": false
                        },
                        "bDestroy": true,
                        "bSort": true,
                        "paging": false,
                        "filter": false,
                        "info": false,
                        "scrollX": true,
                        "scrollCollapse": true
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off('click', 'tbody tr');
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                    	BaseService.setRowFocus(this);
                        $scope.currentRow = this;
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'receipt_bank_info_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('itemTakeoutPicker', function(){ 
    return {  
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/itemTakeoutPicker.html',
        controller: function($scope, $rootScope, BaseService) {
        	$scope.selectedConstantId = 1111;
        	$scope.$on($scope.pickerId + ".open",function(e) {
                //clear picker params before get picker data.
                $scope.selectedConstantId = 1111;
                $scope.pickerParam.goods_code = "";
                $scope.pickerParam.goods_name = "";
            });

            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_GOODS_CODE_ENTPTAKEOUT = 1111
                //P_GOODS_NAME_ENTPTAKEOUT = 1112
            	//console.log($scope.pickerParam.goods_code+"/popModCase="+$scope.pickerParam.popModCase+"/buy_med="+$scope.pickerParam.buy_med+"/entp_code="+$scope.pickerParam.entp_code);
                BaseService.getPickerData($scope.selectedConstantId, $scope.pickerParam).then(
                    function(respone){
                        //extra data
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(row, type, data){
                                return "";
                            }
                        }, {
                            "data": "GOODS_CODE",
                            "class": "text-center"
                        }, {
                            "data": "GOODSDT_CODE"
                        }, {
                            "data": "GOODS_NAME"
                        }, {
                            "data": "GOODSDT_INFO"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    setTimeout(function(){
                 	  $scope.oTable.off("click", "tbody tr").on("click", "tbody tr", function(e) {
                 		  	BaseService.setRowFocus(this);
                           var aData = $scope.oTable.api().row(this).data();
                       });                   
                   },50);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
            
            $scope.inputChangeClick = function(e){
                var radioId = $(e.currentTarget).attr('radio-relate');
                if(!$('#' + $scope.pickerId + ' #' + radioId).prop('checked')){
                    $('#' + $scope.pickerId + ' #' + radioId).prop('checked', true);
                    $scope.filterSelectChange(radioId);
                }
            };
            
            $scope.filterSelectChange = function(radioId){
                $scope.dataFilter = ($scope.dataFilter == null) ? {} : $scope.dataFilter;
                switch(radioId){
                    case "rdItemTaCode":{
                            $scope.selectedConstantId = 1111;
                            $scope.dataFilter.goods_name = "";
                        }
                        break;
                    case "rdItemTaName":{
                            $scope.selectedConstantId = 1112;
                            $scope.dataFilter.goods_code = "";
                        }
                        break;
                }
                $scope.pickerParam.goods_code = angular.copy($scope.dataFilter.goods_code);
                $scope.pickerParam.goods_name = angular.copy($scope.dataFilter.goods_name);

                $('input[radio-relate="'+ radioId +'"]').focus();
            };
            
            $scope.inquiryClick = function(){
                $scope.isLoading = true;
                
                if($scope.oTable != null){
                    $scope.oTable.fnClearTable();
                    $scope.oTable.fnDestroy();
                }
                
                $scope.getPickerData(function(respone){
                    setTimeout(function(){
                        $scope.isLoading = false;
                        $scope.pickerData = respone.data.result;
                        $scope.$apply();
                        $scope.renderTable($scope.pickerData);
                    },500);
                });
            }
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.tableId = 'table_item_takeout_picker';
            scope.pickerId = (scope.pickerId == null) ? 'item_takeout_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.isLoading = true;
        }
    }
});

app.directive('itemPoPicker', function(){ 
    return {  
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/itemPoPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.$on($scope.pickerId + ".open",function(e) {
                //clear picker params before get picker data.
                $scope.pickerParam.r_value = 1; //default filter by column GOODS_CODE.
                $scope.pickerParam.goods_code = "";
                $scope.pickerParam.goods_name = "";
            });

            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_GOODS_CODE_BALJU = 1070;
                BaseService.getPickerData(1070, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(row, type, data){
                                return "";
                            }
                        }, {
                            "data": "GOODS_CODE",
                            "class": "text-center"
                        }, {
                            "data": "GOODSDT_CODE"
                        }, {
                            "data": "GOODS_NAME"
                        }, {
                            "data": "GOODSDT_INFO"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
            
            $scope.inputChangeClick = function(e){
                var radioId = $(e.currentTarget).attr('radio-relate');
                if(!$('#' + $scope.pickerId + ' #' + radioId).prop('checked')){
                    $('#' + $scope.pickerId + ' #' + radioId).prop('checked', true);
                    $scope.filterSelectChange(radioId);
                }
            };
            
            $scope.filterSelectChange = function(radioId){
                $scope.dataFilter = ($scope.dataFilter == null) ? {} : $scope.dataFilter;
                switch(radioId){
                    case "rdItemPoCode":{
                            $scope.dataFilter.r_value = 1;
                            $scope.dataFilter.goods_name = "";
                        }
                        break;
                    case "rdItemPoName":{
                            $scope.dataFilter.r_value = "";
                            $scope.dataFilter.goods_code = "";
                        }
                        break;
                }
                $scope.pickerParam = angular.copy($scope.dataFilter);
                $('input[radio-relate="'+ radioId +'"]').focus();
            };
            
            $scope.inquiryClick = function(){
                $scope.isLoading = true;
                
                if($scope.oTable != null){
                    $scope.oTable.fnClearTable();
                    $scope.oTable.fnDestroy();
                }
                
                $scope.getPickerData(function(respone){
                    setTimeout(function(){
                        $scope.isLoading = false;
                        $scope.pickerData = respone.data.result;
                        $scope.$apply();
                        $scope.renderTable($scope.pickerData);
                    },500);
                });
            }
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.tableId = 'table_item_po_picker';
            scope.pickerId = (scope.pickerId == null) ? 'item_po_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.isLoading = true;
        }
    }
});

app.directive('itemStockPicker', function(){ 
    return {  
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/itemStockPicker.html',
        controller: function($scope, $rootScope, BaseService) {
        	var constantId = 1007;
            $scope.$on($scope.pickerId + ".open",function(e) {
                $scope.pickerParam.r_value = 1; 
                $scope.pickerParam.goods_code = ($scope.pickerParam.goods_code != null)?$scope.pickerParam.goods_code:"";
                $scope.pickerParam.goods_name = "";
                
                if($scope.pickerParam.constructText == ''){
                	//P_GOODS_CODE_UNIT = 1007;
                	constantId = 1007;
    	        }else if(angular.equals($scope.pickerParam.constructText, 'P_GOODS_CODE_D')){
    	        	//P_GOODS_CODE_D = 1004;
    	        	constantId = 1004; 
    	        }
            });
     
            BaseService.activatePicker($scope, $rootScope);

            $scope.getPickerData = function(callback){
                BaseService.getPickerData(constantId, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(row, type, data){
                                return "";
                            }
                        }, {
                            "data": "GOODS_CODE",
                            "class": "text-center"
                        }, {
                            "data": "GOODSDT_CODE"
                        }, {
                            "data": "GOODS_NAME"
                        }, {
                            "data": "GOODSDT_INFO"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off('click', 'tbody tr');
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                    	BaseService.setRowFocus(this);
                       
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
            
            $scope.inputChangeClick = function(e){
                var radioId = $(e.currentTarget).attr('radio-relate');
                if(!$('#' + $scope.pickerId + ' #' + radioId).prop('checked')){
                    $('#' + $scope.pickerId + ' #' + radioId).prop('checked', true);
                    $scope.filterSelectChange(radioId);
                }
            };
            
            $scope.filterSelectChange = function(radioId){
                $scope.dataFilter = ($scope.dataFilter == null) ? {} : $scope.dataFilter;
                switch(radioId){
                    case "rdItemStCode":{
                            $scope.dataFilter.r_value = "1";
                            $scope.dataFilter.goods_name = "";
                        }
                        break;
                    case "rdItemStName":{
                            $scope.dataFilter.r_value = "";
                            $scope.dataFilter.goods_code = "";
                        }
                        break;
                }
                $scope.pickerParam = angular.copy($scope.dataFilter);
                $('input[radio-relate="'+ radioId +'"]').focus();
            };
            
            $scope.inquiryClick = function(){
                $scope.isLoading = true;
                
                if($scope.oTable != null){
                    $scope.oTable.fnClearTable();
                    $scope.oTable.fnDestroy();
                }
                
                $scope.getPickerData(function(respone){
                    setTimeout(function(){
                        $scope.isLoading = false;
                        $scope.pickerData = respone.data.result;
                        $scope.$apply();
                        $scope.renderTable($scope.pickerData);
                        
                    },500);
                });
            }
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.tableId = 'table_' + scope.pickerId;
            scope.pickerId = (scope.pickerId == null) ? 'item_stock_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.isLoading = true;
        }
    }
});

app.directive('itemPricePicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/itemPricePicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.saleGb = [];
            $scope.selectedConstantId = 1062;
            
            $scope.$on($scope.pickerId + ".open",function(e) {
                //clear picker params before get picker data.
                $scope.selectedConstantId = 1062;
                $scope.pickerParam.goods_code = "";
                $scope.pickerParam.goods_name = "";
            });
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_GOODS_NAME_PRICE = 1062
                //P_GOODS_NAME_PRICE = 1063
                BaseService.getPickerData($scope.selectedConstantId, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(row, type, data){
                                return "";
                            }
                        }, {
                            "data": "GOODS_CODE",
                            "class": "text-center"
                        }, {
                            "data": "GOODS_NAME"
                        }, {
                            "data": "SALE_PRICE",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(row.SALE_PRICE, 2, '.', ',');
                            }
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off('click', 'tbody tr');
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                    	BaseService.setRowFocus(this);
                        $scope.currentRow = this;
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
            
            $scope.inputChangeClick = function(e){
                var radioId = $(e.currentTarget).attr('radio-relate');
                if(!$('#' + $scope.pickerId + ' #' + radioId).prop('checked')){
                    $('#' + $scope.pickerId + ' #' + radioId).prop('checked', true);
                    $scope.filterSelectChange(radioId);
                }
            };
            
            $scope.filterSelectChange = function(radioId){
                $scope.dataFilter = ($scope.dataFilter == null) ? {} : $scope.dataFilter;
                switch(radioId){
                    case "rdItemCode":{
                            $scope.selectedConstantId = 1062;
                            $scope.dataFilter.goods_name = "";
                        }
                        break;
                    case "rdItemName":{
                            $scope.selectedConstantId = 1063;
                            $scope.dataFilter.goods_code = "";
                        }
                        break;
                }
                $scope.pickerParam = angular.copy($scope.dataFilter);
                $('input[radio-relate="'+ radioId +'"]').focus();
            };
            
            $scope.inquiryClick = function(){
                $scope.isLoading = true;
                
                if($scope.oTable != null){
                    $scope.oTable.fnClearTable();
                    $scope.oTable.fnDestroy();
                }
                
                $scope.getPickerData(function(respone){
                    setTimeout(function(){
                        $scope.isLoading = false;
                        $scope.pickerData = respone.data.result;
                        $scope.$apply();
                        $scope.renderTable($scope.pickerData);
                    },500);
                });
            }
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'item_price_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('broadcastFilePicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/broadcastFilePicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.selectedFile = {};

            $scope.$on($scope.pickerId + ".open",function(e) {
                //clear picker params before get picker data.
                $scope.pickerParam.tape_code = "";
                $scope.pickerParam.tape_name = "";
                $scope.pickerParam.goods_code = "";
                $scope.pickerParam.goods_name = "";
                $scope.pickerParam.popModCase = "CASE_1";
                
                $('#rdFileCode').prop('checked', true);
                $scope.selectedConstantId = 1126; //File Code
                $scope.selectedFile = {};
            });
                        
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback, currentValue){
                //P_TAPE_CODE = 1126
                //P_TAPE_NAME = 1127
                //P_TAPE_CODE_GOODS = 1133
                //P_TAPE_NAME_GOODS = 1134
                if(currentValue){
                    $scope.selectedConstantId = 1126;
                    $scope.pickerParam.tape_code = currentValue;
                }
                BaseService.getPickerData($scope.selectedConstantId, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                        $scope.selectedFile = {};
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(row, type, data){
                                return "";
                            }
                        }, {
                            "data": "TAPE_CODE",
                            "class": "text-center",
                            "bSortable": false,
                        }, {
                            "data": "TAPE_NAME",
                            "bSortable": false,
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "bDestroy": true,
                        "bSort": true,
                        "paging": false,
                        "filter": false,
                        "info": false,
                        "dom": 'Zrt<"bottom"lp><"clear">',
                        "colResize": {
                            "tableWidthFixed": false
                        },
                        "order": [ 1, 'aesc' ],
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    BaseService.focusTableRow($scope.oTable, 0);
                    
                    //fixed table header
                    $('#' + $scope.tableId).floatThead({
                        scrollContainer: function($table){
                            return $table.closest('.table-container');
                        }
                    });
                    
                    $scope.oTable.off('click', 'tbody tr');
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                        $.each(this.parentElement.childNodes, function(index, elem){
                            $(elem).removeClass("row-focus");
                        });
                        $(this).addClass("row-focus");
                        $scope.currentRow = this;
                        
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.selectedFile = aData;
                            $scope.selectedFile.item = "[" + $scope.selectedFile.GOODS_CODE + "] " + $scope.selectedFile.GOODS_NAME;
                            setTimeout(function(){
                                $scope.$apply();
                            },200);
                        }
                    }); 
                    
                    $scope.oTable.off('dblclick', 'tbody tr');
                    $scope.oTable.on('dblclick', 'tbody tr', function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
            
            $scope.inputChangeClick = function(e){
                var radioId = $(e.currentTarget).attr('radio-relate');
                if(!$('#' + $scope.pickerId + ' #' + radioId).prop('checked')){
                    $('#' + $scope.pickerId + ' #' + radioId).prop('checked', true);
                    $scope.filterSelectChange(radioId);
                }
            };
            
            $scope.filterSelectChange = function(radioId){
                switch(radioId){
                    case "rdFileCode":{
                            $scope.selectedConstantId = 1126;
                            $scope.pickerParam.tape_name = "";
                            $scope.pickerParam.goods_code = "";
                            $scope.pickerParam.goods_name = "";
                        }
                        break;
                    case "rdFileName":{
                            $scope.selectedConstantId = 1127;
                            $scope.pickerParam.tape_code = "";
                            $scope.pickerParam.goods_code = "";
                            $scope.pickerParam.goods_name = "";
                        }
                        break;
                    case "rdItemCode":{
                            $scope.selectedConstantId = 1133;
                            $scope.pickerParam.tape_code = "";
                            $scope.pickerParam.tape_name = "";
                            $scope.pickerParam.goods_name = "";
                        }
                        break;
                    case "rdItemName":{
                            $scope.selectedConstantId = 1134;
                            $scope.pickerParam.tape_code = "";
                            $scope.pickerParam.tape_name = "";
                            $scope.pickerParam.goods_code = "";
                        }
                        break;
                }
                $('input[radio-relate="'+ radioId +'"]').focus();
            };
            
            $scope.inquiryClick = function(){
                $scope.isLoading = true;
                
                if($scope.oTable != null){
                    $scope.oTable.fnClearTable();
                    $scope.oTable.fnDestroy();
                }
                
                $scope.getPickerData(function(respone){
                    setTimeout(function(){
                        $scope.isLoading = false;
                        $scope.pickerData = respone.data.result;
                        $scope.$apply();
                        $scope.renderTable($scope.pickerData);
                    },500);
                });
            }
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'broadcast_file_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('programSelectionPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerClearOnClose: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/programSelectionPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.cmbChannels = [];
            $scope.selectedChannel = {};
            
            $scope.$on($scope.pickerId + ".open",function(e) {
                BaseService.activateDatePicker('#' + $scope.pickerId);
                
                if(!$scope.pickerParam.bd_date){
                    $scope.pickerParam.bd_date = Date.today().toString("yyyy/MM/dd");
                    $('#' + $scope.pickerId + ' #input_date_pgm').datepicker('update', $scope.pickerParam.bd_date);
                }
                if($scope.pickerParam.cmbChannels){
                    $scope.cmbChannels = angular.copy($scope.pickerParam.cmbChannels);
                    delete $scope.pickerParam.cmbChannels;
                }
//                $('#' + $scope.pickerId + ' #input_date_pgm').datepicker().on('changeDate', function(e) {
//                    $scope.inquiryClick();
//                });
                
                setTimeout(function(){
                    $scope.inquiryClick();
                }, 400);
            });

            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback, currentValue){
                //P_BD_PROGRAM_SELECT = 1163
                $scope.pickerParam.media_code = $scope.selectedChannel.code;
                BaseService.getPickerData(1163, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(row, type, data){
                                return "";
                            }
                        }, {
                            "data": "MEDIA_NAME"
                        }, {
                            "data": "BD_DATE",
                            "class": "text-center"
                        }, {
                            "data": "BD_BTIME",
                            "class": "text-center"
                        }, {
                            "data": "PROG_NAME"
                        }, {
                            "data": "GOODS_CODE"
                        }, {
                            "data": "GOODS_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "bDestroy": true,
                        "dom": 'Zrt<"bottom"lp><"clear">',
                        "colResize": {
                            "tableWidthFixed": false
                        }
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off('click', 'tbody tr');
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                    	BaseService.setRowFocus(this);
                       
                    });
                   
                    
                    $scope.oTable.off('dblclick', 'tbody tr');
                    $scope.oTable.on('dblclick', 'tbody tr', function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
            
            $scope.inquiryClick = function(){
                $scope.isLoading = true;
                
                if($scope.oTable != null){
                    $scope.oTable.fnClearTable();
                    $scope.oTable.fnDestroy();
                }
                
                $scope.pickerParam.bd_date = $('#' + $scope.pickerId + ' #input_date_pgm').val();
                
                $scope.getPickerData(function(respone){
                    setTimeout(function(){
                        $scope.isLoading = false;
                        $scope.pickerData = respone.data.result;
                       
                        $scope.renderTable($scope.pickerData);
                        BaseService.focusTableRow($scope.oTable, 0);
                        
                        $scope.$apply();
                    },500);
                });
            }
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'program_selection_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
            scope.pickerClearOnClose = false;
        }
    }
});

app.directive('dailySaleQtyPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/dailySaleQtyPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.sum = {
                order_qty: 0,
                order_amt: 0
            };
            
            $scope.$on($scope.pickerId + ".open", function(e, currentValue) {
            	$scope.sum.order_qty = 0;
                $scope.sum.order_amt = 0;
            });
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_DAILY_SALE = 1125
                BaseService.getPickerData(1125, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'GATHER_DATE',
                            "class": 'text-center'
                        }, {
                            "data": "ORDER_QTY",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0)
                            }
                        }, {
                            "data": "ORDER_AMT",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 2)
                            }
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                    
                    $.each(dataSource, function(index, item){
                        $scope.sum.order_qty += parseInt(item.ORDER_QTY);
                        $scope.sum.order_amt += parseFloat(item.ORDER_AMT);
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'daily_sale_qty_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('codeNamePicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/codeNamePicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_CODE_NAME = 1000
                BaseService.getPickerData(1000, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'CODE_MGROUP',
                            "class": 'text-center'
                        }, {
                            "data": 'CODE_NAME'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off('click', 'tbody tr');
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                    	BaseService.setRowFocus(this);
                        $scope.currentRow = this;
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'lgroup_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('counselLgroupPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/counselLgroupPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_COUNSEL_LGROUP_CODE = 1041
                BaseService.getPickerData(1041, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'CODE_MGROUP',
                            "class": 'text-center'
                        }, {
                            "data": 'CODE_NAME'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.on('click', 'tbody tr', function(e) {
                        BaseService.setRowFocus(this);
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'counsel_lgroup_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('counselGroupPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/counselGroupPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_COUNSEL_GROUP = 1087
                BaseService.getPickerData(1087, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'LGROUP',
                            "class": 'text-center'
                        }, {
                            "data": 'LGROUP_NAME'
                        }, {
                            "data": 'MGROUP',
                            "class": 'text-center'
                        }, {
                            "data": 'MGROUP_NAME'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false,
                        "dom": 'Zlfrtip',
                        "colResize": {
                            "tableWidthFixed": false
                        }
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    BaseService.activateInputFilterTable($scope.oTable, $scope.tableId, 3);
                
                    
                    $scope.oTable.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                    	BaseService.setRowFocus(this);
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'counsel_group_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('deliveryInquiryPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/deliveryInquiryPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.dataSheet30 = [];
            $scope.cmbReceiverGb = [];
            $scope.selectedDelivery = {};
            $scope.selectedDeliveryTemp = {};
            $scope.selectedReceiverGb = {};
            
            $scope.deliveryType = 0;
            $scope.doFlag = 0;
            
            $scope.$on($scope.pickerId + ".open", function(e) {
                
                $scope.deliveryType = $scope.pickerParam.delivery_type;
                $scope.doFlag = ($scope.pickerParam.do_flag == null) ? 0 : $scope.pickerParam.do_flag;
                
                delete $scope.pickerParam.delivery_type;
                delete $scope.pickerParam.do_flag;
                
                $('#' + $scope.pickerId).on('hidden.bs.modal', function() {
                    $scope.form_delivery.$setPristine();
                });
                
                $("input[numeric-positive]").numeric({ negative: false });
                
//                $('#dip_input_zip_code_picker .picker-button').on('click', function(e){
//                	$('#' + $scope.pickerId + ' .modal-content-wrapper').css('opacity', 0);
//                    if($('#invoice_request_popup .modal-content-wrapper').length > 0) {
//                        $('#invoice_request_popup .modal-content-wrapper').css('opacity', 0);
//                    }
//                });
//                
//                $('#dip_input_zip_code_picker .picker-input').on('keyup', function(e){
//                	if(e.keyCode == 113){
//                		$('#' + $scope.pickerId + ' .modal-content-wrapper').css('opacity', 0);
//                        if($('#invoice_request_popup .modal-content-wrapper').length > 0) {
//                            $('#invoice_request_popup .modal-content-wrapper').css('opacity', 0);
//                        }
//                	}
//                });
//                
//                $('#dip_zip_code_picker').on('hidden.bs.modal', function () {
//                	$('#' + $scope.pickerId + ' .modal-content-wrapper').css('opacity', 1);
//                    if($('#invoice_request_popup .modal-content-wrapper').length > 0) {
//                        $('#invoice_request_popup .modal-content-wrapper').css('opacity', 1);
//                    }
//                });
            });
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback, currentValue){
                //P_DELIVERY_SEARCH = 1195
                BaseService.getPickerData(1195, $scope.pickerParam).then(
                    function(respone){
                        $scope.cmbReceiverGb = respone.data.result_c_receiver_gb;
                        
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "data": "RECEIVER_GB",
                            "class": "text-center",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.cmbReceiverGb, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                row.RECEIVER_GB_NAME = returnData;
                                return returnData;
                            }
                        }, {
                            "data": "RECEIVER"
                        }, {
                            "data": "TEL"
                        }, {
                            "data": "RECEIVER_POST",
                            "class": "text-center"
                        }, {
                            "data": "STORE_NO",
                            "class": "text-center"
                        }, {
                            "data": "COMP_ADDR2"
                        }, {
                            "data": "INSERT_NAME"
                        }, {
                            "data": "MODIFY_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "bDestroy": true,
                        "dom": 'Zrt<"bottom"lp><"clear">',
                        "colResize": {
                            "tableWidthFixed": false
                        }
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("click", "tbody tr").on("click", "tbody tr", function(e) {
                        if($scope.form_delivery.$dirty){
                            var self = this;
                            $scope.validateSaveChange(function(){
                                $scope.oTable.api().row($scope.currentRow).data($scope.selectedDeliveryTemp);
                                $scope.tableSelectRow(self);
                            });
                            return;
                        }
                        $scope.tableSelectRow(this);
                    });
                    
                    $scope.tableSelectRow = function(rowElem) {
                        BaseService.setRowFocus(rowElem);
                        $scope.currentRow = rowElem;
                        var aData = $scope.oTable.api().row(rowElem).data();
                        if(aData != null){
                            $scope.selectedDelivery = aData;
                            $scope.selectedDeliveryTemp = angular.copy(aData);
                            $scope.selectedReceiverGb = BaseService.findObject($scope.cmbReceiverGb, 'code', $scope.selectedDelivery.RECEIVER_GB);
                            $scope.$apply();
                        }
                        $scope.form_delivery.$setPristine();
                    };
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;

                            if($scope.validateDeliveryLocation()) {
                                $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                                $('#' + $scope.pickerId).modal('hide');
                            }
                        }
                    });
                    
                    BaseService.focusTableRow($scope.oTable, 0);
                }
            };
            
            $scope.validateDeliveryLocation = function() {
                /* 1 : not Check delivery type with product line @ all */
                /* Process exchange or return product when user change delivery type from '71' to '00' or '10' */
                if($scope.deliveryType == "1" && $.isNumeric($scope.doFlag) && parseInt($scope.doFlag) > 30) {
                    if($scope.pickerSelectedData.RECEIVER_GB != "71" ) {
                        BaseService.alertWarning("Cannot delivery at home.<br>Please select 7-Eleven shop.");
                        return false;
                    }
                    if($scope.pickerSelectedData.RECEIVER_GB == "71" ) {
                        BaseService.alertWarning("Cannot delivery at 7-Eleven.<br>Please select Default or Other address.");
                        return false;
                    }
                }
                
                /* 2 : Check delivery type with product line @ home */
                if($scope.deliveryType == "2" && $scope.pickerSelectedData.RECEIVER_GB == "71") {
                    BaseService.alertWarning("Cannot delivery at 7-Eleven.<br>Please select Default or Other address.");
                    return false;
                }
                
                /* 3 : Check delivery type with product line @ 7-11 */
                if($scope.deliveryType == "3" && $scope.pickerSelectedData.RECEIVER_GB != "71") {
                    BaseService.alertWarning("Cannot delivery at home.<br>Please select 7-Eleven shop.");
                    return false;
                }
                
                /* Check Renovate or close shop */
                if($scope.pickerSelectedData.RECEIVER_GB == "71" && $scope.pickerSelectedData.STORE_STATUS_CODE != "01") {
                    BaseService.alertWarning("Please check Receiver address.<br>7 Eleven shop are Renovate or Close.");
                    return;
                }
                return true;
            };
            
            $scope.validateSaveData = function(){
                
                /*Check input Pick @711 address*/
				if($scope.selectedReceiverGb.code == '71' && $scope.selectedDelivery.STORE_NO == ""){
                    BaseService.alertWarning("Please input store no.", function(){
                        
                    });
                    return false;
				}
                
                if(!$scope.selectedDelivery.RECEIVER1) {
                    BaseService.alertEmpty("Receiver.");
                    return false;
                }
                
                if(!$scope.selectedDelivery.RECEIVER_DDD) {
                    BaseService.alertEmpty("TEL.");
                    return false;
                }
                
                if(!$scope.selectedDelivery.RECEIVER_TEL1) {
                    BaseService.alertEmpty("TEL.");
                    return false;
                }
                
                if(!$scope.selectedDelivery.RECEIVER_TEL2) {
                    BaseService.alertEmpty("TEL.");
                    return false;
                }
                
                if(!$scope.selectedDelivery.RECEIVER_ADDR5) {
                    BaseService.alertEmpty("Address detail.");
                    return false;
                }
                
                if(!$scope.selectedDelivery.RECEIVER_POST) {
                    BaseService.alertEmpty("Zip Code.");
                    return false;
                }
                
                /* Check zip address */
				if( $scope.selectedDelivery.COMP_ADDR == "" && $scope.selectedReceiverGb.code != '71') {
                    BaseService.alertEmpty("Town/City/Province");
                    return false;
	            }	
                
                /* Check default address */
                if($scope.selectedDelivery.cwareAction == "INSERT" && $scope.selectedReceiverGb.code == '00') {
                    BaseService.alertWarning("Cannot add default address.");
                    return false;
                }
                
                /* Check mobile tel */
            	/*
                var telLength = $scope.selectedDelivery.RECEIVER_DDD + $scope.selectedDelivery.RECEIVER_TEL1 + $scope.selectedDelivery.RECEIVER_TEL2;
            	if(telLength.length < 10 && $scope.selectedReceiverGb.code == "71"){
            		BaseService.alertWarning("Please input mobile phone.");
                    return false;
            	}
            	*/
                
                /* Check Renovate or close shop */
                /*
            	if($scope.selectedReceiverGb.code == "71" && $scope.selectedDelivery.STORE_STATUS_CODE != "01" && $scope.selectedDelivery.STORE_STATUS_CODE != ""){
            		BaseService.alertWarning("Please check Receiver address.<br>7 Eleven shop are Renovate or Close.");
	                return false;
            	}
                */
                return true;
            };
            
            $scope.validateSaveChange = function(callback){
                swal({ 
                    title: "Question ?",
                    text: "Details changed. Do you want to save?",
                    type: "info",
                    showCancelButton: true,
                    showRejectButton: true,
                    confirmButtonText: "Yes"
                }, function(button){
                    if(button == 'confirm'){
                        setTimeout(function(){
                            $scope.saveClick();
                        },500);
                    }
                    else if(button == 'reject'){
                        $scope.form_delivery.$rollbackViewValue();
                        if(callback) {
                            callback();
                        }
                    }
                });
            };
            
            $scope.newData = function() {
                $scope.selectedDelivery = {};
                $scope.selectedDelivery.cwareAction = "INSERT";
                $scope.selectedDelivery.USE_YN = "1";
                $scope.selectedDelivery.DEFAULT_YN = "0";
                $scope.selectedReceiverGb = BaseService.findObject($scope.cmbReceiverGb, 'code', '10');
                
                $scope.form_delivery.$dirty = true;
                $($scope.currentRow).removeClass("row-focus");
                $scope.currentRow = null;
                setTimeout(function(){
                    $scope.$apply();
                }, 100);
            };
            
            $scope.getData = function() {
                $scope.isLoading = true;
                
                if($scope.oTable != null){
                    $scope.oTable.fnClearTable();
                    $scope.oTable.fnDestroy();
                }

                $scope.getPickerData(function(respone){
                    setTimeout(function(){
                        $scope.isLoading = false;
                        $scope.pickerData = respone.data.result;
                        $scope.form_delivery.$setPristine();
                        $scope.$apply();
                        $scope.renderTable($scope.pickerData);
                        
                    },500);
                });
            };
            
            $scope.deliveryTypeChange = function(){
                if($scope.selectedReceiverGb != null) {
                    if($scope.selectedDelivery != null) {
                        $scope.selectedDelivery.STORE_NO = "";
                        $scope.selectedDelivery.RECEIVER_ADDR5 = "";
                        $scope.selectedDelivery.RECEIVER_ADDR4 = "";
                        $scope.selectedDelivery.RECEIVER_ADDR3 = "";
                        $scope.selectedDelivery.RECEIVER_ADDR2 = "";
                        $scope.selectedDelivery.RECEIVER_ADDR1 = "";
                        $scope.selectedDelivery.RECEIVER_POST = "";
                        $scope.selectedDelivery.RECEIVER_POST_SEQ = "";
                        $scope.selectedDelivery.COMP_ADDR = "";
                        setTimeout(function(){
                            $scope.$apply();
                        }, 100);
                    }
                }
            };
            
            $scope.inquiryClick = function(){
                if($scope.form_delivery.$dirty){
                    $scope.validateSaveChange(function(){
                        $scope.getData();
                    });
                    return;
                }
                $scope.getData();
            };
            
            $scope.newClick = function(){
                if($scope.form_delivery.$dirty){
                    $scope.validateSaveChange(function(){
                        $scope.newData();
                    });
                    return;
                }
                $scope.newData();
            };
            
            $scope.saveClick = function(){
                if($scope.validateSaveData()) {
                    if($scope.selectedDelivery.cwareAction == null) {
                        $scope.selectedDelivery.cwareAction = 'UPDATE';
                        $scope.selectedDelivery.cwareInfo = "102";
                    }
                    $scope.selectedDelivery.CUST_NO = $scope.pickerParam.cust_no;
                    $scope.selectedDelivery.RECEIVER_GB = $scope.selectedReceiverGb.code;

                    var data = {
                        saveParamList: [$scope.selectedDelivery]
                    };

                    BaseService.savePopupData('popup/save-delivery-search', data).then(
                        function(response){
                            BaseService.alertSaveSuccess(function(){
                                $scope.getData();
                            });
                        },
                        function(response){
                            BaseService.alertError(response.message);
                        }
                    );
                }
            };
            
            $rootScope.$on('dip_zip_code_picker.select', function(e, data){
                $scope.selectedDelivery.RECEIVER_POST = data.POST_NO;
                $scope.selectedDelivery.RECEIVER_POST_SEQ = data.POST_SEQ;
                $scope.selectedDelivery.COMP_ADDR = data.COMP_ADDR;
                $scope.$apply();
            });
            
            $rootScope.$on('dip_zip_code_picker.clear', function(e, data){
                $scope.selectedDelivery.RECEIVER_POST = "";
                $scope.selectedDelivery.RECEIVER_POST_SEQ = "";
                $scope.selectedDelivery.COMP_ADDR = "";
                $scope.$apply();
            });

            $rootScope.$on('dip_seven_eleven_store_picker.select', function(e, data){
                $scope.selectedDelivery.STORE_NO = data.STORE_NO;
                $scope.selectedDelivery.RECEIVER_ADDR5 = data.RECEIVER_ADDR5;
                $scope.selectedDelivery.RECEIVER_ADDR4 = data.RECEIVER_ADDR4;
                $scope.selectedDelivery.RECEIVER_ADDR3 = data.RECEIVER_ADDR3;
                $scope.selectedDelivery.RECEIVER_ADDR2 = data.RECEIVER_ADDR2;
                $scope.selectedDelivery.RECEIVER_ADDR1 = data.RECEIVER_ADDR1;
                $scope.selectedDelivery.RECEIVER_POST = data.POST_NO;
                $scope.selectedDelivery.RECEIVER_POST_SEQ = data.POST_SEQ;
                $scope.selectedDelivery.COMP_ADDR = "";
                $scope.selectedDelivery.COMP_ADDR_711 = data.COMP_ADDR_711;
                $scope.$apply();
            });
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'delivery_inquiry_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('exchangeGoodsPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/exchangeGoodsPicker.html',
        controller: function($scope, $rootScope, BaseService) {
              
        	$scope.isConfirmClicked = false;
        	$scope.isSaveClicked = false;
        	$scope.imgLoadingPath = currentUrl + "/resources/assets/images/progress/progress-circle-success.svg";
        	
            $scope.$on($scope.pickerId + ".open",function(e) {
            	$scope.isConfirmClicked = false;
            	$scope.isSaveClicked = false;
            	
                $scope.dataList = [];
                
            	$scope.paramList = {};
                $scope.paramList.data = {};
                
                $scope.doFlag = $scope.pickerParam.DO_FLAG;
                
                $scope.paramList.dataSheet32 = $scope.pickerParam.dataSheet32;
                
                if($scope.doFlag < 30){
                    $scope.pickerTitle = "Item (Before Ship)";
                    
                    $scope.paramList.data.goodsList = [];
                    
                    $scope.goods_code_org = $scope.paramList.dataSheet32[0].GOODS_CODE;
                    $scope.goods_name_org = $scope.paramList.dataSheet32[0].GOODS_NAME;
                    $scope.goodsdt_code_org = $scope.paramList.dataSheet32[0].GOODSDT_CODE;
                    $scope.goodsdt_info_org = $scope.paramList.dataSheet32[0].GOODSDT_INFO;
                    $scope.$apply();
                }else{
                    $scope.pickerTitle = "Item (After Ship)";
                    
                    $scope.paramList.data.param = $scope.pickerParam.result.param
                    $scope.paramList.data.goodsList = $scope.paramList.data.param.goodsList;
                    $scope.$apply();
                }
                
                
                $scope.unitParams = {};
                $scope.unitParams.constructText = '';
                $scope.unitParams.popModCase = "CASE_1";
            	
                $scope.exchangeDeliveryParam = {};
                $scope.exchangeDeliveryReturnParam = {};
                $scope.iValue = $scope.pickerParam.iValue;
                $scope.DELIVERY_TYPE = $scope.pickerParam.DELIVERY_TYPE;
                $scope.cmbClaimCodes = $scope.pickerParam.RESULT_C_CLAIM_CODE;
                $scope.selectedClaimCode = null;
                
                $scope.claimCode = {};
                $.each($scope.cmbClaimCodes, function(index, item){
                    $scope.claimCode[item.code] = item.codeName;
                })
                
                $('#input_exchange_goods_unit_picker .picker-button').on('click', function(e){
                	$('#' + $scope.pickerId + ' .modal-content-wrapper').css('opacity', 0);
                });
                   
                $('#input_exchange_goods_unit_picker .picker-input').on('keyup', function(e){
                	if(e.keyCode == 113){
                		$('#' + $scope.pickerId + ' .modal-content-wrapper').css('opacity', 0);
                	}
                });
                
                $('#exchange_goods_unit_picker').on('hidden.bs.modal', function () {
                	$('#' + $scope.pickerId + ' .modal-content-wrapper').css('opacity', 1);
                });
                
                delete $scope.pickerParam.result;
                
            });
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                
                $scope.wf_initSheetSet();
                setTimeout(function(){
                    callback($scope.dataList);
                }, 500);
            };
            
            $scope.renderTable = function(dataSource){
                if($scope.doFlag >= 30){
                    
                    $scope.renderTableExchange(dataSource);
                }else{
                    $scope.renderTableDt(dataSource);
                    BaseService.focusTableRow($scope.oTableDt, 0);
                }
            };
            
            $scope.renderTableExchange = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "data": "VIEW_GOODS_CODE",
                            "class": "text-center"
                        }, {
                            "data": "GOODS_NAME",
                        }, {
                            "data": "BEF_GOODSDT_CODE",
                            "class": "text-center"
                        }, {
                            "data": "BEF_GOODSDT_INFO",
                        }, {
                            "data": "PB_QTY",
                            "class": "text-right"
                        }, {
                            "data": "EXCH_GOODSDT_CODE",
                            "class": "col-EXCH_GOODSDT_CODE editable text-center",
                        }, {
                            "data": "EXCH_GOODSDT_INFO",
                        }, {
                            "data": "CLAIM_QTY",
                            "class": "col-CLAIM_QTY editable text-right"
                        }, {
                            "data": "CLAIM_CODE",
                            "class": "col-CLAIM_CODE editable select-in-row",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.cmbClaimCodes, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                        }, {
                            "data": "RECEIVER",
                            "class": "col-RECEIVER editable text-center",
                        }, {
                            "data": "R_RECEIVER",
                            "class": "col-R_RECEIVER editable text-center",
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    //BaseService.generateTooltip($scope.oTable);
                    
                    setTimeout(function(){
                        $scope.oTable.off("click", "tbody tr").on("click", "tbody tr", function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentRow = this;
                            var aData = $scope.oTable.api().row(this).data();
                            if(aData != null){
                                $scope.selectedData = aData;
                                $scope.unitParams.goods_code = aData.VIEW_GOODS_CODE;
                                
                                $scope.deliveryInquiryParam = {
                                    cust_no: $scope.iValue.cust_no,
                                    receiver: aData.RECEIVER,
                                    delivery_type: $scope.DELIVERY_TYPE
                                };
                                
                                $scope.exchangeDeliveryParam = {
                                    cust_no: $scope.iValue.cust_no,
                                    receiver: $scope.selectedData.RECEIVER,
                                    delivery_type: $scope.DELIVERY_TYPE
                                }
                                
                                $scope.exchangeDeliveryReturnParam = {
                                    cust_no: $scope.iValue.cust_no,
                                    receiver: $scope.selectedData.R_RECEIVER,
                                    delivery_type: $scope.DELIVERY_TYPE
                                }
                                $scope.$apply();
                            }
                        });

                        $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                            var aData = $scope.oTable.api().row(this).data();
                            if(aData != null){
                                $scope.pickerSelectedData = aData;
                                $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                                $('#' + $scope.pickerId).modal('hide');
                            }
                        });
                        
                        BaseService.focusTableRow($scope.oTable, 0);
                        
                        BaseService.activateEditTable($scope.oTable, 'EXCH_GOODSDT_CODE', {
                            "type": "inputPicker",
                            "typeClassName": "focus-border text-center",
                            "pickerId": "exchange_goods_unit_picker",
                            "pickerInputClassName": "text-center",
                            "angularScope": $scope
                        });
                        
                        BaseService.activateEditTable($scope.oTable, 'CLAIM_QTY', {
                            "typeClassName": "text-right",
                            "inputFormat": "number",
                            "select": true
                        });
                        
                        BaseService.activateEditTable($scope.oTable, 'CLAIM_CODE', {
                            "data": angular.toJson($scope.claimCode),
                            "type": "select",
                            "selectId": "exchangeClaimCode",
                            "angularScope": $scope,
                            "angularValidate": function (value, settings){
                                return true;

                            },
                            "callback": function(value, settings, selectedValue) {
                                $(this).html($scope.claimCode[value]);

                                $scope.selectedData.CLAIM_CODE = selectedValue;
                                $scope.selectedData.CLAIM_CODE_NAME = $scope.claimCode[value];
                            }
                        });
                        
                        BaseService.activateEditTable($scope.oTable, 'RECEIVER', {
                            "type": "inputPicker",
                            "typeClassName": "focus-border text-center",
                            "pickerId": "exchange_delivery_inquiry_picker",
                            "pickerInputClassName": "text-center",
                            "angularScope": $scope,
                            "angularValidate": function (value, settings){
                                return true;
                            }
                        });
                        
                        BaseService.activateEditTable($scope.oTable, 'R_RECEIVER', {
                            "type": "inputPicker",
                            "typeClassName": "focus-border text-center",
                            "pickerId": "exchange_r_delivery_inquiry_picker",
                            "pickerInputClassName": "text-center",
                            "angularScope": $scope,
                            "angularValidate": function (value, settings){
                                return true;
                            }
                        });

                    }, 50);
                }
            };
            
            $scope.renderTableDt = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTableDt = $('#' + $scope.tableId+'_dt').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "data": "GOODSDT_CODE",
                            "class": "text-center"
                        }, {
                            "data": "GOODSDT_INFO",
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.oTableDt, 0);
                    BaseService.generateTooltip($scope.oTableDt);
                    
                    setTimeout(function(){
                        $scope.oTableDt.off("click", "tbody tr").on("click", "tbody tr", function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentRow = this;
                            var focusRow = $scope.oTableDt.api().row(this);
                            var aData = focusRow.data();
                            if(aData != null){
                                $scope.selectedData = aData;
                                
                                $scope.exchangeGoodsDt.goodsdt_code = aData.GOODSDT_CODE;
                                $scope.exchangeGoodsDt.goodsdt_info = aData.GOODSDT_INFO;
                                
                                aData.SALE_GB = $scope.dataListDetail.goods_code[focusRow.index()].SALE_GB;
                            }
                        });

//                        $scope.oTableDt.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
//                            var aData = $scope.oTableDt.api().row(this).data();
//                            if(aData != null){
//                                $scope.pickerSelectedData = aData;
//                                $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
//                                $('#' + $scope.pickerId).modal('hide');
//                            }
//                        });
                        
                        var rowIndex = _.findIndex(dataSource, {"GOODSDT_CODE": $scope.exchangeGoodsDt.goodsdt_code});
                        
                        BaseService.focusTableRow($scope.oTableDt, rowIndex);

                    }, 50);
                }
            };
            
            $scope.wf_initSheetSet = function(){
                var dataList = [];
                
                if($scope.doFlag >= 30){
                
                    for(var i = 0 ; i < $scope.paramList.data.goodsList.length; i++){
                        var row = {
                            "VIEW_GOODS_CODE"     : $scope.paramList.data.goodsList[i].goods_code,                                                                           
                            "GOODS_NAME"          : $scope.paramList.data.goodsList[i].goods_name,                                                                           
                            "BEF_GOODSDT_CODE"    : $scope.paramList.data.goodsList[i].bef_goodsdt_code,                                                                       
                            "BEF_GOODSDT_INFO"    : $scope.paramList.data.goodsList[i].bef_goodsdt_info,                                                                       
                            "PB_QTY"              : $scope.paramList.data.goodsList[i].pb_qty,                                                                           
                            "EXCH_GOODSDT_CODE"   : $scope.paramList.data.goodsList[i].goodsdt_code,                                                                           
                            "EXCH_GOODSDT_INFO"   : $scope.paramList.data.goodsList[i].goodsdt_info,                                                                           
                            "CLAIM_QTY"           : $scope.paramList.data.goodsList[i].claim_qty,                                                                           
                            "CLAIM_CODE"          : $scope.paramList.data.goodsList[i].claim_code,                                                                           
                            "RECEIVER"            : $scope.paramList.data.goodsList[i].cal_receiver,                                                                           
                            "R_RECEIVER"          : $scope.paramList.data.goodsList[i].cal_receiver,
                            "RECEIVER_GB"         : $scope.paramList.data.goodsList[i].cal_receiver_gb, 
                            "R_RECEIVER_GB"       : $scope.paramList.data.goodsList[i].cal_receiver_gb,
                            "STORE_STATUS_CODE"   : $scope.paramList.data.goodsList[i].cal_store_status_code, 
                            "R_STORE_STATUS_CODE" : $scope.paramList.data.goodsList[i].cal_store_status_code,                                                                             
                            "DELY_TYPE"           : $scope.paramList.data.goodsList[i].dely_type,                                                                           
                            "DELY_GB"             : $scope.paramList.data.goodsList[i].dely_gb,  
                            "R_DELY_GB"           : $scope.paramList.data.goodsList[i].dely_gb,                                                                         
                            "STOCK_CHK_PLACE"     : $scope.paramList.data.goodsList[i].stock_chk_place,                                                                        
                            "GOODS_GB"            : $scope.paramList.data.goodsList[i].goods_gb,                                                                           
                            "GOODS_CODE"          : $scope.paramList.data.goodsList[i].goods_code,                                                                           
                            "SET_GOODS_CODE"      : $scope.paramList.data.goodsList[i].set_goods_code,                                                                         
                            "RECEIVER_SEQ"        : $scope.paramList.data.goodsList[i].receiver_seq,                                                                           
                            "R_RECEIVER_SEQ"      : $scope.paramList.data.goodsList[i].receiver_seq,                                                                           
                            "ORDER_D_SEQ"         : $scope.paramList.data.goodsList[i].order_d_seq,                                                                           
                            "ORDER_W_SEQ"         : $scope.paramList.data.goodsList[i].order_w_seq,                                                                           
                            "RECEIVER_POST"       : $scope.paramList.data.goodsList[i].cal_receiver_post,                                                                      
                            "RECEIVER_POST_SEQ"   : $scope.paramList.data.goodsList[i].cal_receiver_post_seq,                                                                  
                            "R_RECEIVER_POST"     : $scope.paramList.data.goodsList[i].cal_receiver_post,                                                                      
                            "R_RECEIVER_POST_SEQ" : $scope.paramList.data.goodsList[i].cal_receiver_post_seq,                                                                  
                            "BEF_CLAIM_QTY"       : $scope.paramList.data.goodsList[i].bef_claim_qty,                                                                          
                            "CODE_NAME"           : "",                                                                           
                            "STOCK_FLAG"          : "",                                                                           
                            "STOCK_KEY"           : "",                                                                           
                            "FIRST_PLAN_DATE"     : "",                                                                           
                            "OUT_PLAN_DATE"       : "",                                                                           
                            "DELY_HOPE_DATE"      : "",                                                                           
                            "FROM_DATE"           : "",                                                                           
                            "TO_DATE"             : "",                                                                           
                            "GOODS_SELECT_NO"     : "",                                                                           
                            "DELY_HOPE_TIME"      : "",                                                                           
                            "DELY_HOPE_YN"        : "",                                                                           
                            "PREOUT_GB"           : "",                                                                           
                            "SELECTEDYN"          : "",                                                                           
                            "WH_CODE"             : $scope.paramList.data.goodsList[i].wh_code,       
                            "R_WH_CODE"           : $scope.paramList.data.goodsList[i].wh_code,                                                                                         
                            "NEW_GOODSDT_INFO"    : "",                                                                           
                            "NEW_GOODS_NAME"      : "",                                                                           
                            "NEW_GOODS_CODE"      : "",                                                                           
                            "NEW_GOODSDT_CODE"    : $scope.paramList.data.goodsList[i].goodsdt_code,
                            "MEDIA_GB"    		  : $scope.paramList.data.goodsList[i].media_gb,  
                            "MEDIA_CODE"    	  : $scope.paramList.data.goodsList[i].media_code,
                            "ORDER_NO"    		  : $scope.paramList.data.param.order_no, 
                            "ORDER_G_SEQ" 		  : $scope.paramList.data.param.order_g_seq, 
                            "I_FLAG"      		  : $scope.paramList.data.param.i_flag,  
                            "WH_CODE"             : ($rootScope.userLogin.userGb == '50') ? $scope.paramList.data.param.wh_code : $scope.paramList.data.goodsList[i].wh_code,
                            "cwareAction"		  : ""
                        }
                        dataList.push(row);
                    }
                    
                    $scope.dataList.data = {};
                    $scope.dataList.data.result = dataList; 
                    
                }else{
                    
                    var row = {
                        "order_no"          : $scope.paramList.dataSheet32[0].ORDER_NO,
                        "order_g_seq"       : $scope.paramList.dataSheet32[0].ORDER_G_SEQ,
                        "order_d_seq"       : $scope.paramList.dataSheet32[0].ORDER_D_SEQ,
                        "order_w_seq"       : $scope.paramList.dataSheet32[0].ORDER_W_SEQ,
                        "stock_chk_place"   : $scope.paramList.dataSheet32[0].STOCK_CHK_PLACE,
                        "dely_type"         : $scope.paramList.dataSheet32[0].DELY_TYPE,
                        "dely_gb"           : $scope.paramList.dataSheet32[0].DELY_GB,
                        "receiver_post"     : $scope.paramList.dataSheet32[0].RECEIVER_POST,
                        "receiver_post_seq" : $scope.paramList.dataSheet32[0].RECEIVER_POST_SEQ,
                        "do_flag"           : $scope.paramList.dataSheet32[0].DO_FLAG,
                        "goods_code"        : $scope.paramList.dataSheet32[0].GOODS_CODE,
                        "goods_name"        : $scope.paramList.dataSheet32[0].GOODS_NAME,
                        "goodsdt_code_org"  : $scope.goodsdt_code_org,
                        "goodsdt_code"      : $scope.paramList.dataSheet32[0].GOODSDT_CODE,
                        "goodsdt_info"      : $scope.paramList.dataSheet32[0].GOODSDT_INFO,
                        "order_qty"         : $scope.paramList.dataSheet32[0].SYSLAST,
                        "media_gb"          : $scope.paramList.dataSheet32[0].MEDIA_GB,
                        "media_code"        : $scope.paramList.dataSheet32[0].MEDIA_CODE,
                        "cust_no"           : $scope.iValue.cust_no,
                        "wh_code"           : $scope.paramList.dataSheet32[0].WH_CODE
                    }
                    
                    $scope.exchangeGoodsDt = row;
                    
                    var filter = {
                        goods_code : $scope.paramList.dataSheet32[0].GOODS_CODE
                    } 
                    
                    BaseService.getPopupData('popup/retrieve-exch-goodsdt', filter).then(
                        function(response){
                            $scope.dataListDetail = response.data.result;

                            $.each($scope.dataListDetail, function(index, item){
                                item.rowId = BaseService.generateId(18);
                            });
                            
                            $scope.dataList.data = {};
                            $scope.dataList.data.result = response.data.result.goods_code; 

                        },
                        function(response){
                            BaseService.alertError(response.message);
                        }
                    );
                    
                }
            }
            
            $scope.wf_button_select = function(){
            	
            	if($scope.isConfirmClicked) {
            		return false;
            	}
            	$scope.isConfirmClicked = true;
                
                var argiValue = [$scope.iValue];

                var chkCnt= 0;
                
                //= 필수항목 체크
                //if (!dg_sheet.requiredCheck()) return;
                
                var modSheet = [];     
                if($scope.dataList.data.result.length && $scope.dataList.data.result.length > 0){
                    for(var i = 0; i < $scope.dataList.data.result.length; i++){
                        chkCnt = 0;
                        if($scope.dataList.data.result[i].EXCH_GOODSDT_CODE != '') chkCnt++;     
                        if($scope.dataList.data.result[i].CLAIM_QTY         != '') chkCnt++;  
                        if($scope.dataList.data.result[i].CLAIM_CODE        != '') chkCnt++;                	                

                        if(chkCnt > 0){            
                            if($scope.dataList.data.result[i].EXCH_GOODSDT_CODE == ''){
                                BaseService.alertWarning("Enter exchange item information.");
                                return; 
                            }
                            /*Check Renovate or close shop*/
                            if($scope.dataList.data.result[i].STORE_STATUS_CODE != '01' && $scope.dataList.data.result[i].STORE_STATUS_CODE != '' && $scope.dataList.data.result[i].RECEIVER_GB =='71'){
                                BaseService.alertWarning("Please check Receiver address.\n 7 Eleven shop are Renovate or Close. ");
                                return; 
                            }
                            if($scope.dataList.data.result[i].CLAIM_CODE == ''){
                                BaseService.alertWarning("Select exchange reason.");
                                return; 
                            }                    
                            if($scope.dataList.data.result[i].CLAIM_QTY != ''){
                                //= TrueGS 본상품과 사은품 개별 교환 처리 - 2011.09.23 by KKS 
    //	                        if(Number($scope.dataList.data.result[i].CLAIM_QTY) <= 0){
                                if(Number($scope.dataList.data.result[i].CLAIM_QTY) <= 0 && $scope.dataList.data.result[i].GOODS_GB != '30'){
                                    BaseService.alertWarning("Enter exchange Qty correctly.");
                                    return;    
                                }                           
                            }else{
                                BaseService.alertWarning("Enter exchange Qty correctly.");
                                return;  
                            }                    
                            if(Number($scope.dataList.data.result[i].CLAIM_QTY) > Number($scope.dataList.data.result[i].PB_QTY)){
                                BaseService.alertWarning("Exchange qty is max. "+" "+$scope.dataList.data.result[i].PB_QTY+" "+"Enter up to");
                                return; 
                            }
                            //= 현대 가유 요청. 우편번호 888888인 고객 주문불가 - 2011.06.30 by KKS 
                            if($scope.dataList.data.result[i].RECEIVER_POST == '888888'){
                                BaseService.alertWarning("Can't find customer. Please change Customer's address.");
                                return;
                            }
                            if($scope.dataList.data.result[i].R_RECEIVER_POST == '888888'){
                                BaseService.alertWarning("Can't find customer. Please change Customer's address.");
                                return;
                            }

    //	                    dg_sheet.uf_SetItem(i , 'CLAIM_CODE',  '732',   false);

                            $scope.dataList.data.result[i].CLAIM_CODE_NAME = $scope.dataList.data.result[i].CLAIM_CODE_NAME;
                            $scope.dataList.data.result[i].WH_CODE = $scope.dataList.data.result[i].WH_CODE;

                            $scope.dataList.data.result[i].NEW_GOODS_CODE =	$scope.dataList.data.result[i].GOODS_CODE;
                            $scope.dataList.data.result[i].NEW_GOODS_NAME = $scope.dataList.data.result[i].GOODS_NAME;
                            $scope.dataList.data.result[i].NEW_GOODSDT_INFO = $scope.dataList.data.result[i].EXCH_GOODSDT_INFO;
                            $scope.dataList.data.result[i].NEW_GOODSDT_CODE = $scope.dataList.data.result[i].EXCH_GOODSDT_CODE;
                            $scope.dataList.data.result[i].SELECTEDYN = "1";
                            $scope.dataList.data.result[i].RECEIVER_SEQ = $scope.dataList.data.result[i].RECEIVER_SEQ;
                            $scope.dataList.data.result[i].RECEIVER_POST = $scope.dataList.data.result[i].RECEIVER_POST;
                            $scope.dataList.data.result[i].RECEIVER_POST_SEQ = $scope.dataList.data.result[i].RECEIVER_POST_SEQ;
                            $scope.dataList.data.result[i].STORE_STATUS_CODE = $scope.dataList.data.result[i].STORE_STATUS_CODE;
                            $scope.dataList.data.result[i].R_RECEIVER_POST = $scope.dataList.data.result[i].R_RECEIVER_POST;
                            $scope.dataList.data.result[i].R_RECEIVER_POST = $scope.dataList.data.result[i].R_RECEIVER_POST;
                            $scope.dataList.data.result[i].R_RECEIVER_POST_SEQ = $scope.dataList.data.result[i].R_RECEIVER_POST_SEQ;
                            $scope.dataList.data.result[i].R_STORE_STATUS_CODE = $scope.dataList.data.result[i].R_STORE_STATUS_CODE;
                            $scope.dataList.data.result[i].R_WH_CODE = $scope.dataList.data.result[i].R_WH_CODE;

                            modSheet.push($scope.dataList.data.result[i]);
                        }
                    }   
                }
                //= 수정되었는지 check 후 수정 되었다면 modifybuffer에 setting
                if(modSheet.length  == 0){
                    //BaseService.alertWarning(Main.gf_getMessage('msg', 'msg.no_saving_data_a'));
                    $('#' + $scope.pickerId).modal('hide');
                    return;
                }
                
                var data = {"argiValue" : argiValue, 
                            "paramList" : $scope.dataList.data.result};

                BaseService.save(data, null, "save-exch-goods-stock").then(
                    function(response){

                        var result = {
                            modSheet : modSheet,
                            ORDERSTOCKIN : response.data.ORDERSTOCKIN,
                            ORDERSTOCKOUT : response.data.ORDERSTOCKOUT
                        }
                        
                        $scope.$emit($scope.pickerId + ".confirm", angular.copy(result));
                        
                        setTimeout(function(){
                            $scope.setIsConfirm(false);
                            $('#' + $scope.pickerId).modal('hide');
                        },50);
                        
                    },
                    function(response){
                        sweetAlert("Error", response.message, "error");
                        $scope.setIsConfirm(false);
                    }
                );
                
                
            };
            
            $scope.process_click = function(){
            	
                if($scope.validateSaveExchGoodsStockDt()){    
                	if($scope.isSaveClicked) {
                		return false;
                	}
                	$scope.isSaveClicked = true;
                	
                    if($scope.exchangeGoodsDt){
                        $scope.exchangeGoodsDt.goodsdt_code = $scope.selectedData.GOODSDT_CODE;
                        $scope.exchangeGoodsDt.goodsdt_info = $scope.selectedData.GOODSDT_INFO;
                        
                        var paramList = [];
                        paramList.push($scope.exchangeGoodsDt);

                        var data = {"paramList" : paramList};

                        BaseService.save(data, null, "save-exch-goods-stock-dt").then(
                            function(response){
                            	
                            	var result = {
                                    ORDERSTOCKIN : response.data.ORDERSTOCKIN,
                                    ORDERSTOCKOUT : response.data.ORDERSTOCKOUT
                                }

                            	$scope.$emit("exchange_goods_picker_dt.confirm", angular.copy(result));
                            	
                                setTimeout(function(){
                                    $scope.setIsSave(false);
                                    $('#' + $scope.pickerId).modal('hide');
                                },50);
                                    
                            },
                            function(response){
                                sweetAlert("Error", response.message, "error");
                                $scope.setIsSave(false);
                            }
                        );
                    }
                }
                
            }
            
            $scope.validateSaveExchGoodsStockDt = function(){
                
                if($scope.dataList.data.result == null || $scope.dataList.data.result.length == 0){              
                    BaseService.alertWarning("No data to save.");
                    return false;    
                }
                if($scope.goodsdt_code_org == $scope.selectedData.GOODSDT_CODE){
                    BaseService.alertWarning("No data to save.");
                    return false;   
                }
                if($scope.selectedData.SALE_GB != '00'){
                    //Main.gf_getMessageParm("msg","msg.cannot_select_confirm_sale_gb",dg_sheet.selectedItem.GOODSDT_INFO);
                    BaseService.alertWarning("Unit of which selling is suspended temporarily/permanently. Unable to  select.\n[Item : "+$scope.selectedData.GOODSDT_INFO+" ]");
                    return false;    
                }            
                return true;
            }
            
            $scope.setIsConfirm = function(isConfirm){
            	$scope.isConfirmClicked = isConfirm;
            	setTimeout(function(){
            		$scope.$apply();
            	},100);
            };
            
            $scope.setIsSave = function(isSave){
            	$scope.isSaveClicked = isSave;
            	setTimeout(function(){
            		$scope.$apply();
            	},100);
            };
            
            $scope.$on('exchangeClaimCode.change', function(e, selectValue){
                
                var aData = $scope.oTable.api().row($scope.currentRow).data();
                
                aData.CLIAM_CODE = selectValue;
                $scope.selectedData.CLAIM_CODE = selectValue;
                
                aData.CLAIM_CODE_NAME = $scope.claimCode[selectValue];
                $scope.selectedData.CLAIM_CODE_NAME = $scope.claimCode[selectValue];
                
                
            });
            
            $scope.$on('exchange_goods_unit_picker.select', function(e, data){
                /*$scope.receiptCounsel.OUT_LGROUP_CODE = data.CODE_MGROUP;
                $scope.receiptCounsel.OUT_LGROUP_NAME = data.CODE_NAME;
                
                //----- set catagory group filter parameter -----//
                $scope.popupCounselGroupParams.code_lgroup = data.REMARK;
                $scope.$apply();*/
                var focusRow = $scope.oTable.api().row($scope.currentRow)
                var aData = focusRow.data();
                if(aData != null){
                    aData.EXCH_GOODSDT_CODE = data.GOODSDT_CODE;
                    aData.EXCH_GOODSDT_INFO = data.GOODSDT_INFO;
                    
                    $scope.renderTable($scope.dataList.data.result);
                    BaseService.focusTableRow($scope.oTable, focusRow.index());
                    
                }
            });
            
            $scope.$on('exchange_delivery_inquiry_picker.select', function(e, data){
                var focusRow = $scope.oTable.api().row($scope.currentRow)
                var aData = focusRow.data();
                if(aData != null){
                    aData.RECEIVER = data.RECEIVER;
                    aData.RECEIVER_GB       = data.RECEIVER_GB;
                    aData.STORE_STATUS_CODE = data.STORE_STATUS_CODE;
                    aData.RECEIVER_SEQ      = data.RECEIVER_SEQ;
                    aData.RECEIVER_POST     = data.RECEIVER_POST;
                    aData.RECEIVER_POST_SEQ = data.RECEIVER_POST_SEQ;
                    //aData.DELY_GB"           = data.DELY_GB
                    //aData.DELY_GB"           , Dely_gb2.text;
                    
                    $scope.renderTable($scope.dataList.data.result);
                    BaseService.focusTableRow($scope.oTable, focusRow.index());
                    
                }
            });
            
            $scope.$on('exchange_r_delivery_inquiry_picker.select', function(e, data){
                var focusRow = $scope.oTable.api().row($scope.currentRow)
                var aData = focusRow.data();
                if(aData != null){
                    aData.R_RECEIVER = data.RECEIVER;
                    aData.R_RECEIVER_GB       = data.RECEIVER_GB;
                    aData.R_STORE_STATUS_CODE = data.STORE_STATUS_CODE;
                    aData.R_RECEIVER_SEQ      = data.RECEIVER_SEQ;
                    aData.R_RECEIVER_POST     = data.RECEIVER_POST;
                    aData.R_RECEIVER_POST_SEQ = data.RECEIVER_POST_SEQ;
                    //aData.DELY_GB"           = data.DELY_GB
                    //aData.DELY_GB"           , Dely_gb2.text;
                    
                    $scope.renderTable($scope.dataList.data.result);
                    BaseService.focusTableRow($scope.oTable, focusRow.index());
                    
                }
            });
            
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'exchange_goods_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('lotteryPicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/lotteryPicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(callback){
                //P_PROMO_NO = 1083
                BaseService.getPickerData(1083, $scope.pickerParam).then(
                    function(respone){
                        callback(respone);
                    },
                    function(respone){
                        callback(respone);
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "data": "LOTTERY_PROMO_NO",
                            "class": "text-center"
                        }, {
                            "data": "LOTTERY_PROMO_NAME"
                        }, {
                            "data": "PROMO_NOTE"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'promotion_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

app.directive('sevenElevenStorePicker', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            pickerId: '@',
            pickerTitle: '@',
            pickerModalClass: '@',
            pickerModalSizeClass: '@',
            pickerControl: '@',
            pickerColumn: '@',
            pickerAutoLoad: '@',
            pickerData: '=',
            pickerSelectedData: '=',
            pickerParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/picker/sevenElevenStorePicker.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.cmbStoreType = [
                { code: "00", codeName: "non 7 Eleven" },
                { code: "01", codeName: "7 Eleven" }
            ];
            $scope.cmbStoreStatus = [
                { code: "01", codeName: "Normal" },
                { code: "02", codeName: "Renovate" },
                { code: "03", codeName: "Close" }
            ];
            
            $scope.selectedStoreType = BaseService.findObject($scope.cmbStoreType, 'code', '01');
            $scope.selectedStoreStatus = BaseService.findObject($scope.cmbStoreStatus, 'code', '01');
            $scope.isLoading = false;
            
            BaseService.activatePicker($scope, $rootScope);
            
            $scope.getPickerData = function(){
                //P_STORE_NO = 1234
                if($scope.selectedStoreType != null) {
                    $scope.pickerParam.store_type = $scope.selectedStoreType.code;
                }
                if($scope.selectedStoreStatus != null) {
                    $scope.pickerParam.store_status = $scope.selectedStoreStatus.code;
                }
                $scope.isLoading = true;
                BaseService.getPickerData(1234, $scope.pickerParam).then(
                    function(respone){
                        $scope.pickerData = respone.data.result;
                        $scope.cmbStoreType = respone.data.result_c_store_type;
                        $scope.cmbStoreStatus = respone.data.result_c_store_status;
                        
                        $scope.renderTable($scope.pickerData);
                        $scope.isLoading = false;
                    },
                    function(respone){
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "data": "STORE_NO",
                            "class": "text-center"
                        }, {
                            "data": "RECEIVER_ADDR4"
                        }, {
                            "data": "RECEIVER_ADDR1"
                        }, {
                            "data": "STORE_ADDR",
                            "class": "text-center"
                        }, {
                            "data": "POST_NO",
                            "class": "text-center"
                        }, {
                            "data": "STORE_STATUS",
                            "class": "text-center"
                        }, {
                            "data": "DATE_OPEN_STORE",
                            "class": "text-center"
                        }, {
                            "data": "DATE_CLOSE_STORE",
                            "class": "text-center"
                        }, {
                            "data": "START_DATE_RENOVATE_STORE",
                            "class": "text-center"
                        }, {
                            "data": "END_DATE_RENOVATE_STORE",
                            "class": "text-center"
                        }, {
                            "data": "STORE_TYPE",
                            "class": "text-center"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false,
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                    });
                    
                    BaseService.setFixedHeader($scope.oTable);
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    $scope.oTable.off("click", "tbody tr").on("click", "tbody tr", function(e) {
                        BaseService.setRowFocus(this);
                    });
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.pickerSelectedData = aData;
                            $scope.$emit($scope.pickerId + ".select", angular.copy(aData));
                            $('#' + $scope.pickerId).modal('hide');
                        }
                    });
                }
            };
            
            $scope.inquiryClick = function(){
                if(!$scope.pickerParam.store_no && !$scope.pickerParam.store_name && !$scope.pickerParam.store_city
                   && !$scope.pickerParam.store_addr && !$scope.pickerParam.post_no) {
                    BaseService.alertWarning("Please define filter before retrieve data.");
                    return;
                }
                $scope.getPickerData();
            };
        },
        link: function(scope, element, attrs){
            scope.pickerData = null;
            scope.pickerId = (scope.pickerId == null) ? 'promotion_picker' : scope.pickerId;
            scope.pickerAutoLoad = (scope.pickerAutoLoad == null) ? 'true' : scope.pickerAutoLoad;
            scope.pickerParam = (scope.pickerParam == null) ? {} : scope.pickerParam;
            scope.tableId = 'table_' + scope.pickerId;
            scope.isLoading = true;
        }
    }
});

/* ---------------
   Popup
------------------ */ 
app.directive('orderItemDetailPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/orderItemDetailPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.user_d_point = null;
            $scope.promo_no = null;
            $scope.goods_all_yn = null;
            $scope.dataOrderDtInfo = [];
            $scope.dataOrderDtInfoDt = [];
            $scope.dataPromotion = [];
            $scope.dataPromotionGoods = [];
            $scope.dataPromotionGoodsDt = [];
            $scope.dataUnit = [];
            
            $scope.dataGift = [];           //Sheet 10
            $scope.dataGiftGoods = [];      //Sheet 10dt
            $scope.dataGiftGoodsDt = [];    //Sheet 10dt sub
            $scope.dataPoint = [];          //Sheet 20
            $scope.dataDiscount = [];       //Sheet 30
            $scope.dataCoupon = [];         //Sheet 50
            $scope.dataLottery = [];        //Sheet 60
            
            $scope.cmbUnitCode = {};        
            $scope.dataOrderItem = [];
            
            $scope.selectedOrderItem = {};
            $scope.selectedOrderDtInfo = {};
            $scope.selectedGift = {};
            $scope.selectedGiftGoods = {};
            $scope.selectedGiftGoodsDt = {};
            $scope.selectedPoint = {};
            $scope.selectedDiscount = {};
            $scope.selectedCoupon = {};
            $scope.selectedLottery = {};
            
            $scope.isHasActiveClass = false;
            $scope.isConfirmClicked = false;
            $scope.imgLoadingPath = currentUrl + "/resources/assets/images/progress/progress-circle-success.svg";
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');
                if($scope.popupAutoLoad){
                    setTimeout(function(){
                        $scope.getPopupData();
                    },700);
                }
                
                $('#' + $scope.popupId).on('hidden.bs.modal', function () {
                    $scope.cmbUnitCode = {};
                    $scope.dataOrderItem = [];
                    if($scope.table_unit_code_popup != null){
                        $scope.table_unit_code_popup.fnClearTable();
                        $scope.table_unit_code_popup.fnDestroy();
                    }
                    
                    $scope.dataGift = [];
                    $scope.dataGiftGoods = [];
                    $scope.dataGiftGoodsDt = [];
                    $scope.dataPoint = [];
                    $scope.dataDiscount = [];
                    $scope.dataCoupon = [];
                    $scope.dataLottery = [];
                    $scope.dataPromotion = [];
                    $scope.dataPromotionGoods = [];
                    $scope.dataPromotionGoodsDt = [];
                    
                    $scope.selectedGift = {};
                    $scope.selectedGiftGoods = {};
                    $scope.selectedGiftGoodsDt = {};
                    $scope.selectedPoint = {};
                    $scope.selectedDiscount = {};
                    $scope.selectedCoupon = {};
                    
                    $scope.isHasActiveClass = false;
                    $scope.isConfirmClicked = false;
                    
                    $('.promotion-tab-container').find('li[role="presentation"]').removeClass('active');
                    $('.promotion-tab-container').find('div[role="tabpanel"]').removeClass('fade active in');
                });
            });
            
            $scope.getPopupData = function(){
                var params = {
                    cust_gb: $scope.popupParam.cust_gb,
                    dely_gb: $scope.popupParam.dely_gb,
                    goods_code: $scope.popupParam.goods_code,
                    receiver_seq: $scope.popupParam.receiver_seq,
                    card_bank_code: $scope.popupParam.card_bank_code,
                    bank_seq: $scope.popupParam.bank_seq,
                    order_no: $scope.popupParam.order_no,
                    memb_gb: $scope.popupParam.memb_gb,
                    goods_gb: $scope.popupParam.goods_gb,
                    
                    sale_price: $scope.popupParam.sale_price,
                    order_media: $scope.popupParam.order_media,
                    media_code: $scope.popupParam.media_code,
                    
                    order_qty: $scope.popupParam.order_qty
                };
                BaseService.getPopupData("popup/retrieve-order-dt-info", params).then(
                    function(respone){
                        //extra data
                        $scope.user_d_point = respone.data.result.user_d_point;
                        $scope.promo_no = respone.data.result.promo_no;
                        $scope.goods_all_yn = respone.data.result.goods_all_yn;
                        $scope.dataOrderDtInfo = (respone.data.result.RESULT_ORDER_DT_INFO != null) ? respone.data.result.RESULT_ORDER_DT_INFO : [];
                        $scope.dataOrderDtInfoDt = respone.data.result.RESULT_ORDER_DT_INFO_DT;
                        $scope.dataPromotion = respone.data.result.RESULT_GIFT;
                        $scope.dataPromotion = ($scope.dataPromotion) ? $scope.dataPromotion : [];
                    
                        if($scope.dataPromotion != null){
                            $.each($scope.dataPromotion, function(index, item){
                                if(item.DO_TYPE == '10'){
                                    $scope.dataGift.push(angular.copy(item));
                                    var promoGoods =  respone.data.result['RESULT_GIFT_GOODS_' + item.PROMO_NO];
                                    if(promoGoods != null){
                                        $.each(promoGoods, function(i, promoGoodsItem){
                                            $scope.dataPromotionGoods.push(promoGoodsItem);
                                        });
                                        var promoGoodsDt =  respone.data.result['RESULT_GIFT_GOODSDT_' + item.PROMO_NO];
                                        if(promoGoodsDt != null){
                                            $.each(promoGoodsDt, function(i, promoGoodsDtItem){
                                                $scope.dataPromotionGoodsDt.push(promoGoodsDtItem);
                                            });
                                        }
                                    }
                                }
                                else if(item.DO_TYPE == '20'){
                                    $scope.dataPoint.push(angular.copy(item));
                                }
                                else if(item.DO_TYPE == '30'){
                                    $scope.dataDiscount.push(angular.copy(item));
                                }
                                else if(item.DO_TYPE == '50'){
                                    $scope.dataCoupon.push(angular.copy(item));
                                }
                                else if(item.DO_TYPE == '60'){
                                    $scope.dataLottery.push(angular.copy(item));
                                }
                            });
                        }
                        if($scope.dataOrderDtInfo.length > 0){
                            $scope.selectedOrderDtInfo = $scope.dataOrderDtInfo[0];
                        }
                        
                        $scope.cmbUnitCode = {};
                        //var goodsCode = "";
                        $.each($scope.dataOrderDtInfoDt, function(index, item){
                        	$scope.cmbUnitCode[item.GOODSDT_CODE] = item.GOODSDT_CODE + '&ensp;&ensp;&ensp;' + item.CODE_NAME + '&ensp;&ensp;&ensp;' + item.GOODSDT_INFO + '&ensp;&ensp;&ensp;Order Posible&ensp;&ensp;&ensp;' + item.ORDER_POSSIBLE;
                        	/*if(!goodsCode == item.GOODSDT_CODE){
                        		$scope.cmbUnitCode[item.GOODSDT_CODE] = item.GOODSDT_CODE + '&ensp;&ensp;&ensp;' + item.CODE_NAME + '&ensp;&ensp;&ensp;' + item.GOODSDT_INFO + '&ensp;&ensp;&ensp;Order Posible&ensp;&ensp;&ensp;' + item.ORDER_POSSIBLE;
                        		goodsCode = item.GOODSDT_CODE;
                        	}*/
                        });
                        
                        var selectedUnitCode = ($scope.dataOrderDtInfoDt.length > 0) ? $scope.dataOrderDtInfoDt[0] : {};
                        $scope.selectedOrderItem = {
                            GOODS_CODE: $scope.selectedOrderDtInfo.GOODS_CODE,
                            GOODS_NAME: $scope.selectedOrderDtInfo.GOODS_NAME,
                            SALE_PRICE: $scope.selectedOrderDtInfo.SALE_PRICE,
                            ENTP_DELY_YN: $scope.selectedOrderDtInfo.ENTP_DELY_YN,
                            
                            GOODSDT_CODE: (selectedUnitCode.GOODSDT_CODE != null) ? selectedUnitCode.GOODSDT_CODE : "",
                            GOODSDT_CODE_INFO: $scope.cmbUnitCode[selectedUnitCode.GOODSDT_CODE],
                            ORDER_QTY: params.order_qty
                        }
//                        $scope.selectedOrderDtInfo.GOODSDT_CODE = (selectedUnitCode.GOODSDT_CODE != null) ? selectedUnitCode.GOODSDT_CODE : "";
//                        $scope.selectedOrderDtInfo.GOODSDT_CODE_INFO = $scope.cmbUnitCode[selectedUnitCode.GOODSDT_CODE];
//                        $scope.selectedOrderDtInfo.GOODSDT_INFO = selectedUnitCode.GOODSDT_INFO;
                        
                        $scope.selectedOrderDtInfo.GOODSDT_CODE = $scope.selectedOrderItem.GOODSDT_CODE;
                        $scope.selectedOrderDtInfo.GOODSDT_INFO = selectedUnitCode.GOODSDT_INFO;
                        
                        $scope.dataOrderItem = [];
                        $scope.dataOrderItem.push($scope.selectedOrderItem);
                        
                        $scope.renderTableUnitCode($scope.dataOrderItem);
                        
                        setTimeout(function(){
                            if($scope.dataGift.length > 0){
                                $scope.setTabActiveClass('gift');
                                $scope.renderTableGift($scope.dataGift);
                                BaseService.focusTableRow($scope.table_gift, 0);
                            }
                            if($scope.dataPoint.length > 0){
                                $scope.setTabActiveClass('point');
                                $scope.renderTablePoint($scope.dataPoint);
                                BaseService.focusTableRow($scope.table_point, 0);
                            }
                            if($scope.dataDiscount.length > 0){
                                $scope.setTabActiveClass('discount');
                                $scope.renderTableDiscount($scope.dataDiscount);
                                BaseService.focusTableRow($scope.table_discount, 0);
                            }
                            if($scope.dataCoupon.length > 0){
                                $scope.setTabActiveClass('coupon');
                                $scope.renderTableCoupon($scope.dataCoupon);
                                BaseService.focusTableRow($scope.table_coupon, 0);
                            }
                            BaseService.activateTab();
                        }, 100);
                        
                        setTimeout(function(){
                            $scope.isLoading = false;
                            $scope.$apply();
                        }, 10);
                    },
                    function(respone){
                    }
                );
            };
            
            $scope.renderTableUnitCode = function(dataSource){
                if(dataSource != null){
                    
                    $scope.table_unit_code_popup = $('#table_unit_code_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "data": "GOODSDT_CODE_INFO",
                            "class": "col-GOODSDT_CODE_INFO editable select-in-row"
                        }, {
                            "data": "ORDER_QTY",
                            "class": "col-ORDER_QTY editable text-right"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    setTimeout(function(){
                        BaseService.activateEditTable($scope.table_unit_code_popup, 'GOODSDT_CODE_INFO', {
                            "data": angular.toJson($scope.cmbUnitCode),
                            "type": "select2",
                            "callback": function(value, settings, selectedValue) {
                                $(this).html($scope.cmbUnitCode[value]);
                                
                                var aData = $scope.table_unit_code_popup.api().row(this.parentElement).data();
                                if(aData != null){
                                    aData.GOODSDT_CODE = selectedValue;
                                    aData.GOODSDT_CODE_INFO = $scope.cmbUnitCode[selectedValue];
                                    
                                    var selectedInfoDt = BaseService.findObject($scope.dataOrderDtInfoDt, 'GOODSDT_CODE', selectedValue);
                                    $scope.selectedOrderDtInfo.GOODSDT_CODE = selectedInfoDt.GOODSDT_CODE;
                                    $scope.selectedOrderDtInfo.GOODSDT_INFO = selectedInfoDt.GOODSDT_INFO;
                                }
                            }
                        });
                        
                        BaseService.activateEditTable($scope.table_unit_code_popup, 'ORDER_QTY', {
                            "typeClassName": "text-right",
                            "inputFormat": "number-integer",
                            "maxLength": 2,
                            "select": true,
                            "callback": function(value, settings) {
                                if(!value){
                                    $(this).html(0);
                                    var aData = $scope.table_unit_code_popup.api().row(this.parentElement).data();
                                    if(aData != null){
                                        aData.ORDER_QTY = 0;
                                    }
                                }
                            }
                        });
                    }, 50);
                }
            };
            
            $scope.renderTableGift = function(dataSource){
                if(dataSource != null){
                    
                    $scope.table_gift = $('#table_gift').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "data": "PROMO_NAME"
                        }, {
                            "render": function(data, type, row){
                                return "";
                            }
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false,
                    });
                    
                    BaseService.generateRowNumber($scope.table_gift, 0);
                    BaseService.generateTooltip($scope.table_gift);
                    
                    setTimeout(function(){
                        $scope.table_gift.off('click', 'tbody tr');
                        $scope.table_gift.on('click', 'tbody tr', function(e) {
                            $.each(this.parentElement.childNodes, function(index, elem){
                                $(elem).removeClass("row-focus");
                            });
                            $(this).addClass("row-focus");
                            $scope.currentGiftRow = this;

                            var aData = $scope.table_gift.api().row(this).data();
                            if(aData != null){
                                $scope.selectedGift = aData;
                                $scope.dataGiftGoods = getJSONObjects($scope.dataPromotionGoods, 'PROMO_NO', $scope.selectedGift.PROMO_NO);
                                $scope.renderTableGiftGoods($scope.dataGiftGoods);
                                BaseService.focusTableRow($scope.table_gift_goods, 0);
                            }
                        });
                    }, 50);
                }
            };
            
            $scope.renderTableGiftGoods = function(dataSource){
                if(dataSource != null){
                    
                    $scope.table_gift_goods = $('#table_gift_goods').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "render": function(data, type, row){
                                return row.GIFT_GOODS_CODE + "&ensp;&ensp;" + row.GOODS_NAME;
                            }
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false,
                    });
                    
                    BaseService.generateRowNumber($scope.table_gift_goods, 0);
                    BaseService.generateTooltip($scope.table_gift_goods);
                    
                    setTimeout(function(){
                        $scope.table_gift_goods.off('click', 'tbody tr');
                        $scope.table_gift_goods.on('click', 'tbody tr', function(e) {
                            $.each(this.parentElement.childNodes, function(index, elem){
                                $(elem).removeClass("row-focus");
                            });
                            $(this).addClass("row-focus");
                            $scope.currentGiftGoodsRow = this;

                            var aData = $scope.table_gift_goods.api().row(this).data();
                            if(aData != null){
                                $scope.selectedGiftGoods = aData;
                                //$scope.dataGiftGoodsDt = getJSONObjects($scope.dataPromotionGoodsDt, 'GOODS_CODE', $scope.selectedGiftGoods.GIFT_GOODS_CODE);
                                $scope.dataGiftGoodsDt = _.filter($scope.dataPromotionGoodsDt, function(data) {
                                    return (data.GOODS_CODE == $scope.selectedGiftGoods.GIFT_GOODS_CODE && data.PROMO_SEQ == $scope.selectedGiftGoods.PROMO_SEQ);
                                });
                                $scope.renderTableGiftGoodsDt($scope.dataGiftGoodsDt);
                                BaseService.focusTableRow($scope.table_gift_goods_dt, 0);
                            }
                        });
                    }, 50);
                }
            };
            
            $scope.renderTableGiftGoodsDt = function(dataSource){
                if(dataSource != null){
                    
                    $scope.table_gift_goods_dt = $('#table_gift_goods_dt').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "render": function(data, type, row){
                                return row.GOODSDT_CODE + "&ensp;&ensp;" + row.CODE_NAME + "&ensp;&ensp;" + row.GOODSDT_INFO;
                            }
                        }, {
                            "data": "SELECT_YN",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                //row.selectCheckId = BaseService.generateId();
                                var checked = (data == "1") ? true : false;
                                return '<table-checkbox check-id="'+ row.GOODS_CODE + row.GOODSDT_CODE +'" checked="'+ checked +'" action-change="goodsDtSelectChangeClick(event, checked)"></table-checkbox>';
                            }
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false,
                    });
                    
                    setTimeout(function(){
                        $scope.table_gift_goods_dt.off('click', 'tbody tr');
                        $scope.table_gift_goods_dt.on('click', 'tbody tr', function(e) {
                            $.each(this.parentElement.childNodes, function(index, elem){
                                $(elem).removeClass("row-focus");
                            });
                            $(this).addClass("row-focus");
                            $scope.currentGiftGoodsDtRow = this;

                            var aData = $scope.table_gift_goods_dt.api().row(this).data();
                            if(aData != null){
                                
                            }
                        });
                    }, 50);
                }
            };
            
            $scope.renderTablePoint = function(dataSource){
                if(dataSource != null){
                    
                    $scope.table_point = $('#table_point').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "data": "PROMO_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false,
                    });
                    
                    BaseService.generateRowNumber($scope.table_point, 0);
                    BaseService.generateTooltip($scope.table_point);
                    
                    setTimeout(function(){
                        $scope.table_point.off('click', 'tbody tr');
                        $scope.table_point.on('click', 'tbody tr', function(e) {
                            $.each(this.parentElement.childNodes, function(index, elem){
                                $(elem).removeClass("row-focus");
                            });
                            $(this).addClass("row-focus");
                            $scope.currentPointRow = this;

                            var aData = $scope.table_point.api().row(this).data();
                            if(aData != null){

                                $scope.selectedPoint = aData;
                                var salePrice = parseFloat($scope.selectedOrderItem.SALE_PRICE);
                                if($scope.selectedPoint.DO_RATE && $scope.selectedPoint.DO_RATE != 0){
                                    if($scope.selectedPoint.DO_AMT && $.isNumeric($scope.selectedPoint.DO_AMT)) {
                                        $scope.selectedPoint.DO_AMT = parseFloat($scope.selectedPoint.DO_AMT);
                                    }
                                    else {
                                        $scope.selectedPoint.DO_AMT = ($scope.selectedPoint.DO_RATE * salePrice) / 100;
                                    }
                                    //$scope.selectedPoint.DO_AMT = Math.floor(($scope.selectedPoint.DO_RATE * salePrice) / 100);
                                }
                                else {
                                    if($scope.selectedPoint.DO_AMT && $scope.selectedPoint.DO_AMT != 0){
                                        $scope.selectedPoint.DO_RATE = ($scope.selectedPoint.DO_AMT * 100) / salePrice;
                                    }
                                }
                                setTimeout(function(){
                                    $scope.$apply();
                                },200);
                            }
                        });
                    },50);
                }
            };
            
            $scope.renderTableDiscount = function(dataSource){
                if(dataSource != null){
                    
                    $scope.table_discount = $('#table_discount').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "data": "PROMO_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false,
                    });
                    
                    BaseService.generateRowNumber($scope.table_discount, 0);
                    BaseService.generateTooltip($scope.table_discount);
                    
                    setTimeout(function(){
                        $scope.table_discount.off('click', 'tbody tr');
                        $scope.table_discount.on('click', 'tbody tr', function(e) {
                            $.each(this.parentElement.childNodes, function(index, elem){
                                $(elem).removeClass("row-focus");
                            });
                            $(this).addClass("row-focus");
                            $scope.currentDiscountRow = this;

                            var aData = $scope.table_discount.api().row(this).data();
                            if(aData != null){

                                $scope.selectedDiscount = aData;
                                var salePrice = parseFloat($scope.selectedOrderItem.SALE_PRICE);
                                if($scope.selectedDiscount.DO_RATE && $scope.selectedDiscount.DO_RATE != 0){
                                    if($scope.selectedDiscount.DO_AMT && $.isNumeric($scope.selectedDiscount.DO_AMT)) {
                                        $scope.selectedDiscount.DO_AMT_REAL = $scope.selectedDiscount.DO_AMT;
                                        $scope.selectedDiscount.DO_AMT = Math.round($scope.selectedDiscount.DO_AMT);
                                    }
                                    else {
                                        var dcAmt = ($scope.selectedDiscount.DO_RATE * salePrice) / 100;
                                        $scope.selectedDiscount.DO_AMT_REAL = dcAmt;
                                        $scope.selectedDiscount.DO_AMT = Math.round(dcAmt);
                                    }
                                    //$scope.selectedDiscount.DO_AMT = Math.floor(($scope.selectedDiscount.DO_RATE * salePrice) / 100);
                                }
                                else {
                                    if($scope.selectedDiscount.DO_AMT && $scope.selectedDiscount.DO_AMT != 0){
                                        $scope.selectedDiscount.DO_RATE = ($scope.selectedDiscount.DO_AMT * 100) / salePrice;
                                    }
                                }
                                setTimeout(function(){
                                    $scope.$apply();
                                },200);
                            }
                        });
                    },50);
                }
            };
            
            $scope.renderTableCoupon = function(dataSource){
                if(dataSource != null){
                    
                    $scope.table_coupon = $('#table_coupon').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "data": "PROMO_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false,
                    });
                    
                    BaseService.generateRowNumber($scope.table_coupon, 0);
                    BaseService.generateTooltip($scope.table_coupon);
                    
                    setTimeout(function(){
                        $scope.table_coupon.off('click', 'tbody tr');
                        $scope.table_coupon.on('click', 'tbody tr', function(e) {
                            $.each(this.parentElement.childNodes, function(index, elem){
                                $(elem).removeClass("row-focus");
                            });
                            $(this).addClass("row-focus");
                            $scope.currentCouponRow = this;

                            var aData = $scope.table_coupon.api().row(this).data();
                            if(aData != null){

                                $scope.selectedCoupon = aData;
                                setTimeout(function(){
                                    $scope.$apply();
                                },200);
                            }
                        });
                    },50);
                }
            };
            
            $scope.confirmClick = function(){
            	if($scope.isConfirmClicked) {
            		return false;
            	}
            	$scope.isConfirmClicked = true;
                setTimeout(function(){
                    $scope.dataUnit = $scope.table_unit_code_popup.api().data()[0];
                    
                    if($scope.popupParam.SALE_GB == '11'){
                    	BaseService.alertWarning("There is a Unit of which selling is suspended temporarily/permanently.<br>Select in-progress item.");
                    	$scope.setIsConfirm(false);
                    	return false;
                    };
                    
                    var orderQty = parseInt($scope.dataUnit.ORDER_QTY);
                        if(orderQty == 0){
                            BaseService.alertWarning("Please Enter Order Qty at least one.");
                            $scope.setIsConfirm(false);
                            return false;
                        }
                        var selectedGift = null;
                        if($scope.dataGift.length > 0){
                            selectedGift = $scope.getSelectedGift();
                            if(selectedGift.length == 0){
                            	$scope.setIsConfirm(false);
                                 return false;
                            }
                        }
                        
                        //Set order goods
                        BaseService.getPopupData("popup/set-order-goods", $scope.getParams(), 'POST').then(
                            function(respone){
                                var dataResult = respone.data.result;
                                if(dataResult.ERROR_MESSAGE != "000000"){
                                    BaseService.alertWarning(respone.data.result.ERROR_MESSAGE);
                                    $scope.setIsConfirm(false);
                                    return false;
                                }
                                
                                //Assign promotion
                                dataResult.RESULT_GIFT10 = $scope.dataGift;
                                dataResult.RESULT_GIFT20 = $scope.dataPoint;
                                dataResult.RESULT_GIFT30 = $scope.dataDiscount;
                                dataResult.RESULT_GIFT40 = [];
                                dataResult.RESULT_GIFT50 = $scope.dataCoupon;
                                dataResult.RESULT_GIFT60 = $scope.dataLottery;
                                dataResult.RESULT_GIFT70 = [];
                                
                                dataResult.entp_dely_yn = $scope.dataUnit.ENTP_DELY_YN;
                                dataResult.product_line = $scope.popupParam.PRODUCT_LINE;
                                dataResult.delivery_location = $scope.popupParam.DELIVERY_LOCATION;
                                
                                $scope.$emit($scope.popupId + ".confirm", angular.copy(dataResult));
                                $('#' + $scope.popupId).modal('hide');
                                
                            },
                            function(respone){
                                $scope.setIsConfirm(false);
                            }
                        );
                },100);
            };
            
            $scope.setIsConfirm = function(isConfirm){
            	$scope.isConfirmClicked = isConfirm;
            	setTimeout(function(){
            		$scope.$apply();
            	},100);
            };
            
            $scope.goodsDtSelectChangeClick = function(e, checked){
                var rowData = $scope.table_gift_goods_dt.api().row($scope.currentGiftGoodsDtRow).data();
                if(rowData != null){
                    var newValue = (checked) ? 1 : 0;
                    if($scope.dataGiftGoodsDt != null){
                        $.each($scope.dataGiftGoodsDt, function(index, item){
                            if(item.GOODSDT_CODE == rowData.GOODSDT_CODE){
                                item.SELECT_YN = newValue;
                            }
                            else item.SELECT_YN = 0;
                            
                            $('#' + item.GOODS_CODE + item.GOODSDT_CODE).prop('checked', (item.SELECT_YN == 1) ? true : false);
                        });
                    }
                }
            };
            
            $scope.setTabActiveClass = function(tab){
                if(!$scope.isHasActiveClass){
                    $('a[href="#tab_'+ tab +'"]').parent().addClass('active');
                    $('#tab_' + tab).addClass('fade active in');
                    $scope.isHasActiveClass = true;
                }
            };
            
            $scope.getSelectedGift = function(){
                var arrSelectedGift = [];
                var isSelectedGift = true;
                var msg;
                var currentPromotionGoods, currentPromotionGoodsDt, selectedGiftGoodsDt;
                if($scope.dataPromotion.length > 0){
                    $.each($scope.dataPromotion, function(i, promoItem) {
                        if(promoItem.DO_TYPE == '10'){
                            currentPromotionGoods = getJSONObjects($scope.dataPromotionGoods, 'PROMO_NO', promoItem.PROMO_NO);
                            $.each(currentPromotionGoods, function(j, promoGoodsItem){
                                //currentPromotionGoodsDt = getJSONObjects($scope.dataPromotionGoodsDt, 'GOODS_CODE', promoGoodsItem.GIFT_GOODS_CODE);
                                currentPromotionGoodsDt = _.filter($scope.dataPromotionGoodsDt, function(data) {
                                    return (data.GOODS_CODE == promoGoodsItem.GIFT_GOODS_CODE && data.PROMO_SEQ == promoGoodsItem.PROMO_SEQ);
                                });
                                if(currentPromotionGoodsDt.length == 1) {
                                    selectedGiftGoodsDt = currentPromotionGoodsDt[0];
                                    selectedGiftGoodsDt.SELECT_YN = 1;
                                }
                                else {
                                    var selectedGoodDt = getJSONObjects(currentPromotionGoodsDt, 'SELECT_YN', 1);
                                    if(selectedGoodDt.length == 1){
                                        selectedGiftGoodsDt = selectedGoodDt[0];
                                        selectedGiftGoodsDt.SELECT_YN = 1;
                                    }
                                    else {
                                        if(!msg){
                                            msg = "Select category.<br>[Promotion [" + promoItem.PROMO_NAME + "] Gift Unit " + (i+1) + " Number]";
                                        }
                                        isSelectedGift = false;
                                    }
                                }
                                
                                if(isSelectedGift) {
                                    var selectedGift = promoGoodsItem;
                                    selectedGift.CODE_NAME = selectedGiftGoodsDt.CODE_NAME;
                                    selectedGift.GOODSDT_CODE = selectedGiftGoodsDt.GOODSDT_CODE;
                                    selectedGift.GOODSDT_INFO = selectedGiftGoodsDt.GOODSDT_INFO;
                                    selectedGift.GOODS_CODE = selectedGiftGoodsDt.GOODS_CODE;
                                    selectedGift.PROMO_NO = selectedGiftGoodsDt.PROMO_NO;
                                    selectedGift.PROMO_SEQ = selectedGiftGoodsDt.PROMO_SEQ;
                                    selectedGift.SALE_GB = selectedGiftGoodsDt.SALE_GB;
                                    selectedGift.SELECT_YN = selectedGiftGoodsDt.SELECT_YN;
                                    arrSelectedGift.push(selectedGift);
                                }
                            });
                        }
                    });
                    
                    if(!isSelectedGift && msg){
                        BaseService.alertWarning(msg);
                        $scope.isConfirmClicked = false;
                    }
                }
                return (isSelectedGift) ? arrSelectedGift : [];
            };
            
            $scope.getParams = function(){
                // pram
                var pram = angular.copy($scope.selectedOrderDtInfo);
                pram.goods_code = $scope.popupParam.selectedOrderItem.GOODS_CODE;
                pram.entp_code = $scope.popupParam.selectedOrderItem.ENTP_CODE;
                pram.sale_price = $scope.popupParam.selectedOrderItem.SALE_PRICE;
                pram.cust_no = $scope.popupParam.dataSheetSearch.CUST_NO;
                pram.cust_gb = $scope.popupParam.dataSheetSearch.CUST_GB;
                pram.order_media = $scope.popupParam.dataSheetSearch.MEDIA_GB;
                pram.memb_gb = $scope.popupParam.dataSheetSearch.MEMB_GB;
                pram.media_code = $scope.popupParam.dataSheetSearch.MEDIA_CODE;
                pram.first_order_yn = $scope.popupParam.dataSheetSearch.FIRST_ORDER_YN;
                pram.goodsdt_code = $scope.dataUnit.GOODSDT_CODE;
                pram.goodsdt_info = $scope.dataUnit.GOODSDT_INFO;
                pram.media_gb = $scope.popupParam.dataSheetSearch.MEDIA_GB;
                pram.order_date = $scope.popupParam.dataOrder.ORDER_DATE;
                pram.order_g_seq = $scope.popupParam.order_g_seq;
                pram.org_order_g_seq = $scope.popupParam.order_g_seq;
                pram.order_no = $scope.popupParam.dataOrder.ORDER_NO;
                pram.order_qty = $scope.dataUnit.ORDER_QTY;
                pram.receiver_post = $scope.popupParam.dataSheetSearch.RECEIVER_POST;
                pram.receiver_post_seq = $scope.popupParam.dataSheetSearch.RECEIVER_POST_REQ;
                pram.receiver_seq = $scope.popupParam.dataSheetSearch.RECEIVER_SEQ;
                pram.rtn_msg = "";
                pram.user_gb = $rootScope.userLogin.userGb;
                if($scope.selectedOrderDtInfo.WH_CODE){
                	pram.wh_code = $scope.selectedOrderDtInfo.WH_CODE; //Support new requirement consignment vendor.
                } else {
                    pram.wh_code = $scope.popupParam.dataSheetSearch.WH_CODE; //Support old version.
                }
                pram.product_line = $scope.popupParam.PRODUCT_LINE;
                pram.delivery_location = $scope.popupParam.DELIVERY_LOCATION;
 
                var promo10 = $scope.dataGift;
                var promo20 = $scope.dataPoint;
                var promo30 = $scope.dataDiscount;
                var promo50 = $scope.dataCoupon;
                var promo60 = $scope.dataLottery;
                var giftPromo = $scope.getSelectedGift();

                var params = {
                    pram: [pram],
                    promo10: promo10,
                    promo20: promo20,
                    promo30: promo30,
                    promo40: [],
                    promo50: promo50,
                    promo60: promo60,
                    giftPromo: giftPromo,
                    user_id: $rootScope.userLogin.userId
                };
                return params;
            };
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'order_item_detail_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = true;
        }
    }
});

app.directive('searchConditionPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/searchConditionPopup.html',
        controller: function($scope, $rootScope, BaseService) {
        	$scope.dataSearch = null;
        	$scope.selectedItem = {};

            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
            	$scope.selectedItem = {};
            	$scope.popupParam = [];
                $('#' + $scope.popupId).modal('show');         
            });
            
            $scope.$on($scope.popupId + ".inquiry", function(e, currentValue) {
           	 	$scope.inquiryData();
            });
            
            $scope.inquiryClick = function(){
                $scope.popupParam = ($scope.popupParam == null) ? {} : $scope.popupParam;
            	if($scope.popupParam.goods_code == null || $scope.popupParam.goods_code == ""){
            		 swal({
	                         title: "warning",
	                         text: "Enter Item.",
	                         type: "warning"
                     	}, function() { 
                     });
                     return;
            	 }
            	 
            	 $scope.inquiryData();
            }  
            
            $scope.inquiryData = function(){
            	// P_BALJU_HELP = 1219;
            	BaseService.getPopupData("popup/retrieve/1219", $scope.popupParam).then(
            			function(respone){
                           	$scope.dataSearch = respone.data.result;
                           	if(	$scope.dataSearch == ""){
                           		swal({
	                                    title: "warning",
	                                    text: "Not Found Data.",
	                                    type: "warning"
                           			}, function() { 
                                });
                                return;
                           	}

                       		$scope.selectedItem.entp_code = $scope.dataSearch[0].ENTP_CODE;
                           	$scope.selectedItem.entp_name = $scope.dataSearch[0].ENTP_NAME;
                           	$scope.selectedItem.md_code = $scope.dataSearch[0].MD_CODE;
                           	$scope.selectedItem.md_name = $scope.dataSearch[0].MD_NAME.replace('&amp;', '&');;
                           	$scope.selectedItem.buy_med = $scope.dataSearch[0].BUY_MED;
                           	$scope.selectedItem.buy_med_name = $scope.dataSearch[0].BUY_MED_NAME;
                          	$scope.selectedItem.wh_code = $scope.dataSearch[0].WH_CODE;
                           	$scope.selectedItem.wh_name = $scope.dataSearch[0].WH_NAME;
                           	
                           	setTimeout(function(){
                           	$scope.isLoading = false;
                           		$scope.$apply();
                            },10);
                         },
                        function(respone){}
                 );    
            	
            };
            
            $scope.confirmClick = function(){
                setTimeout(function(){
                	 if($scope.dataSearch == null || $scope.dataSearch == ""){
                		 swal({
                             title: "warning",
                             text: "Please Inquiry",
                             type: "warning"
                         }, function() { 
                         });
                         return;
                	 }                    
                    $scope.$emit($scope.popupId + ".confirm", angular.copy($scope.dataSearch[0]));
                    $('#' + $scope.popupId).modal('hide');
                },100);
            };
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'search_condition_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = true;
        }
    }
});

app.directive('searchCondTakeoutPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/searchCondTakeoutPopup.html',
        controller: function($scope, $rootScope, BaseService) {
        	$scope.dataSearch = null;
        	$scope.selectedItem = {};
        	
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');              
            });
           
            $scope.$on($scope.popupId + ".inquiry", function(e, currentValue) {
           	 	$scope.inquiryData();
            });
            
            $scope.inquiryClick = function(){
                $scope.popupParam = ($scope.popupParam == null) ? {} : $scope.popupParam;
            	 if($scope.popupParam.goods_code == null || $scope.popupParam.goods_code == ""){
            		 swal({
	                         title: "warning",
	                         text: "Enter Item.",
	                         type: "warning"
                     	}, function() { 
                     });
                     return;
            	 }
            	
            	$scope.inquiryData();
            }; 
            
            $scope.inquiryData = function(){
            	// P_ENTP_TAKE_OUT_HELP = 1220;
            	BaseService.getPopupData("popup/retrieve/1220", $scope.popupParam).then(
            			function(respone){
                           	$scope.dataSearch = respone.data.result;
                           	if(	$scope.dataSearch == ""){
                           		swal({
	                                    title: "warning",
	                                    text: "Not Found Data.",
	                                    type: "warning"
                           			}, function() { 
                                });
                                return;
                           	}

                           	$scope.selectedItem.entp_code = $scope.dataSearch[0].ENTP_CODE;
                            $scope.selectedItem.entp_name = $scope.dataSearch[0].ENTP_NAME;
                            $scope.selectedItem.md_code = $scope.dataSearch[0].MD_CODE;
                            $scope.selectedItem.md_name = $scope.dataSearch[0].MD_NAME.replace('&amp;', '&');;
                            $scope.selectedItem.buy_med = $scope.dataSearch[0].BUY_MED;
                            $scope.selectedItem.buy_med_name = $scope.dataSearch[0].BUY_MED_NAME;
                            $scope.selectedItem.wh_code = $scope.dataSearch[0].WH_CODE;
                            $scope.selectedItem.wh_name = $scope.dataSearch[0].WH_NAME;
                           	
                           	setTimeout(function(){
                           	$scope.isLoading = false;
                           		$scope.$apply();
                            },10);
                         },
                        function(respone){}
                 );   
            };
            
            $scope.confirmClick = function(){
                setTimeout(function(){
                	 if($scope.dataSearch == null || $scope.dataSearch == ""){
                		 swal({
                             title: "warning",
                             text: "Please Inquiry",
                             type: "warning"
                         }, function() { 
                         });
                         return;
                	 }
                     $scope.$emit($scope.popupId + ".confirm", angular.copy($scope.dataSearch[0]));
                     $('#' + $scope.popupId).modal('hide');
                },100);
            };
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'search_cond_takeout_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = true;
        }
    }
});

app.directive('discountCouponPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/discountCouponPopup.html',
        controller: function($scope, $rootScope, BaseService) {
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $scope.isLoading = true;
                $('#' + $scope.popupId).modal('show');
                if($scope.popupAutoLoad){
                    setTimeout(function(){
                        $scope.getPopupData();
                    },700);
                }
                
                $('#' + $scope.popupId).on('hidden.bs.modal', function () {
                    if($scope.table_discount_coupon_popup != null){
                        $scope.table_discount_coupon_popup.fnClearTable();
                        $scope.table_discount_coupon_popup.fnDestroy();
                    }
                });
            });
            
            $scope.getPopupData = function(){
                BaseService.getPopupData("popup/retrieve/1217", $scope.popupParam).then(
                    function(respone){
                        $scope.popupData = respone.data.result;
                        $scope.renderTable($scope.popupData);
                        
                        $scope.isLoading = false;
                    },
                    function(respone){
                    }
                );
                
                $scope.renderTable = function(dataSource){
                    if(dataSource != null){
                        
                        $scope.table_discount_coupon_popup = $('#table_discount_coupon_popup').dataTable({
                            "data": dataSource,
                            "columns": [{
                                "class": "no text-center",
                                "render": function(data, type, row){
                                    return '';
                                }
                            }, {
                                "data": "FLAG",
                                "class": "text-center"
                            }, {
                                "data": "PROMO_NO",
                                "class": "text-center"
                            }, {
                                "data": "PROMO_NAME"
                            }, {
                                "data": "DO_AMT",
                                "class": "text-right",
                                "render": function(data, type, row){
                                    return BaseService.formatDecimal(row.DO_AMT, 2, '.', ',');
                                }
                            }, {
                                "data": "PROMO_BDATE",
                                "class": "text-center"
                            }, {
                                "data": "PROMO_EDATE",
                                "class": "text-center"
                            }],
                            "columnDefs": [{
                                "searchable": false,
                                "orderable": false,
                                "targets": 0
                            }, {
                              "data": null,
                              "defaultContent": "",
                              "targets": -1
                            }],
                            "bDestroy": true,
                            "bSort": false,
                            "paging": false,
                            "filter": false,
                            "info": false
                        });
                        
                        BaseService.generateRowNumber($scope.table_discount_coupon_popup, 0);
                        BaseService.generateTooltip($scope.table_discount_coupon_popup);
                    }
                };
            };
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'discount_coupon_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = true;
        }
    }
});

app.directive('orderNoInputPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/orderNoInputPopup.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                
                $scope.popupSelectedData = {};
                $scope.popupSelectedData.order_no = $scope.popupParam.order_no;
                
                BaseService.activateDatePicker('#' + $scope.popupId);
                
                $scope.popupSelectedData.order_date = Date.today().toString("yyyy/mm/dd");
                $('#input_order_date').datepicker('update', Date.today());

                $('#input_order_date').on('changeDate', function(e){
                    $scope.popupSelectedData.order_date = new Date(e.date).toString("yyyy/mm/dd");
                });
                
                $('#' + $scope.popupId).modal('show');
                
                setTimeout(function(){
                    $scope.$apply();
                }, 50);
            });
            
            $scope.checkOrder = function(){
                if($scope.popupSelectedData && $scope.popupSelectedData.order_no){   
                    return true;   
                }
                
                return false;
            }
            
            $scope.confirmClick = function(){
                if($scope.validateCriteria()){
                    var data = {
                        order_date: $('#input_order_date').val(),
                        order_seq: $scope.popupSelectedData.order_seq,
                        order_no: $scope.popupSelectedData.order_no,
                    }
                    $scope.$emit($scope.popupId + ".confirm", angular.copy(data));
                    $('#' + $scope.popupId).modal('hide');
                }
                
            };
            
            $scope.validateCriteria = function(){
                
                if(!$scope.popupSelectedData.order_no && !$scope.popupSelectedData.order_seq){
                    BaseService.alertWarning("Please Enter Sequence No.", function(){
                        setTimeout(function(){
                            $('#orderNoPopupInpSequenceNo').focus();
                        }, 200);
                    });
                    return false; 
                }else {
                    if($('#chkOrderNo').prop("checked") && !$scope.popupSelectedData.order_no){
                        BaseService.alertWarning("Please Order No..", function(){
                            setTimeout(function(){
                                $('#orderNoPopupInpOrderNo').focus();
                            }, 200);
                        });
                        return false;
                    }else{
                        if(!$('#chkOrderNo').prop("checked") && !$scope.popupSelectedData.order_no){
                            var orderDate = BaseService.replaceAll($('#input_order_date').val(),"/","");
                            $scope.popupSelectedData.order_no = (orderDate)?BaseService.lpad(orderDate, 6, "0"):"";
                        }
                    }

                }
                
                
                return true;
                
            }
            
            $scope.orderNoPopupInpOrderNoChanged = function(){
                var orderNo = $('#orderNoPopupInpOrderNo').val();
                if(orderNo){
                    $('#orderNoPopupInpOrderNo').val(BaseService.replaceAll(orderNo, "-", ""));
                    $scope.popupSelectedData.order_no = $('#orderNoPopupInpOrderNo').val();
                }
            }
            
            $scope.cancelClick = function(){
                $('#' + $scope.popupId).modal('hide');
            };
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'order_no_input_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = true;
        }
    }
});

app.directive('refundStatusPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/refundStatusPopup.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
            	  $scope.getPopupData();
            	  $('#' + $scope.popupId).modal('show');
                
                setTimeout(function(){
                    $scope.$apply();
                }, 50);
            });
            
            $scope.getPopupData = function(){
            	//P_REPAY_PROC 1208            	
            	
            	BaseService.getPopupData("popup/retrieve/1208", $scope.popupParam).then(
	                function(respone){
	                    $scope.popupData = respone.data.result[0];
	                    $scope.isLoading = false;
	                },
	                function(respone){
	                }
	            );
            	
            };
            
            $scope.setProcStatus = function(){
            	if($scope.popupData != null){
            		if($scope.popupData.DO_FLAG == "10")
            			return mainMessage.word.takeover;
            		else if($scope.popupData.DO_FLAG == "20")
            			return mainMessage.word.disposal;
            		else if($scope.popupData.DO_FLAG == "90")
            			return mainMessage.word.completion;
            		else
            			return "Error.";
            	}
            	else 
            		return "Error.";
            	
            };
            
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'refund_status_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.popupSelectedData = (scope.popupSelectedData == null) ? {} : scope.popupSelectedData;
            scope.isLoading = true;
        }
    }
});

app.directive('refundRequestPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/refundRequestPopup.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
            	
            	$scope.popupParam = ($scope.popupParam == null)? {}: $scope.popupParam;
            	$scope.popupParam.BANK_CODE = null;
            	$scope.popupParam.BANK_NAME = null;
            	
            	$scope.popupParam.DEPOSITAMT = null;
        		$scope.popupParam.REFUND_BANK_NO = null;
        		$scope.popupParam.DEPOSIT_OWNER = null;
        		
            	
            	  $('#' + $scope.popupId).modal('show');
                
                setTimeout(function(){
                	$('#refund_request_popup_input_bank_code').focus();
                    $scope.$apply();
                }, 500);
            });
            

            
          //for Parents-Child case
            $scope.$on('refund_request_popup_bank_picker.select', function(e, data){
            	$scope.popupParam.BANK_CODE = data.BANK_CODE;
            	$scope.popupParam.BANK_NAME = data.BANK_NAME;
            	
            	setTimeout(function(){
            		$("#"+$scope.popupId+"_input_refund_acc").focus();
                    $scope.$apply();
                },50);
            });
            
            $scope.refundClick = function(){
            		
            	if($scope.validateRefundClick()){
            		$scope.popupParam.DEPOSITAMT = parseFloat($scope.popupParam.DEPOSITAMT);
                	
                	var arrRefundRequest = [];
                    
                        var refundRequest = {
                        		DEPOSITAMT: $scope.popupParam.DEPOSITAMT,
                        		CUST_NO: $scope.popupParam.CUST_NO,
                        		BANK_CODE: $scope.popupParam.BANK_CODE,
                        		REFUND_BANK_NO: $scope.popupParam.REFUND_BANK_NO,
                        		DEPOSIT_OWNER: $scope.popupParam.DEPOSIT_OWNER,
                            
                        };
                        arrRefundRequest.push(refundRequest);
                    
                    
                    var data = {
                    		"paramDepositProcRefund" : arrRefundRequest
                    };

                    BaseService.savePopupData('popup/save-deposit-proc-refund', data).then(
                        function(response){
                            BaseService.alertSaveSuccess(function(){
                                $('#' + $scope.popupId).modal('hide');
                            });
                            $rootScope.baseButtonClick('retrieve');
                        },
                        function(response){
                            BaseService.alertError(response.message);
                        }
                    );
            		
            		
            	}
            	
            };
            
            $scope.validateRefundClick = function(){
            	var msg = '';
            	var isValid = true;
            	
            	if($scope.popupParam.BANK_CODE == null || $scope.popupParam.BANK_CODE == ""){
            		isValid = false;
            		msg = mainMessage.message.input_check+" Bank Code";
            		
            		BaseService.alertWarning(msg , function() { 
                		setTimeout(function(){
                			$("#refund_request_popup_input_bank_code").focus();
                        },200);
                        });
            		
            		return;
            		
            	}
            	
            	if($scope.popupParam.REFUND_BANK_NO == null || $scope.popupParam.REFUND_BANK_NO == ""){
            		isValid = false;
            		msg = mainMessage.message.input_check+" Refund Account No.";
            		BaseService.alertWarning(msg , function() { 
                		setTimeout(function(){
                			$("#refund_request_popup_input_refund_acc").focus();
                        },200);
                        });
            		return;
            		
            	}
            	
            	if($scope.popupParam.DEPOSIT_OWNER == null || $scope.popupParam.DEPOSIT_OWNER == ""){
            		isValid = false;
            		msg = mainMessage.message.input_check+" Ac. Owner";
            		BaseService.alertWarning(msg , function() { 
                		setTimeout(function(){
                			$("#refund_request_popup_input_acc_owner").focus();
                        },200);
                        });
            		return;
            		
            	}
            	
            	if($scope.popupParam.DEPOSITAMT == null || $scope.popupParam.DEPOSITAMT == ""){
            		isValid = false;
            		msg = mainMessage.message.input_check+" Refund Request Amount";
            		BaseService.alertWarning(msg , function() { 
                		setTimeout(function(){
                			$("#refund_request_popup_input_refund_request_amount").focus();
                        },200);
                        });
            		return;
            		
            	}
            	
            	if(parseFloat($scope.popupParam.DEPOSITAMT) <= 0){
            		isValid = false;
            		msg = "Enter value greater than 0 in Transfer Amount.";
            		BaseService.alertWarning(msg , function() { 
                		setTimeout(function(){
                			$("#refund_request_popup_input_refund_request_amount").focus();
                        },200);
                        });
            		return;
            		
            	}
            	
            	
            	if(parseFloat($scope.popupParam.DEPOSITAMT) > parseFloat($scope.popupParam.USE_PB_DEPOSIT)){
            		isValid = false;
            		msg = "Refund amount is greater than useable deposit amount.";
            		BaseService.alertWarning(msg , function() { 
                		setTimeout(function(){
                			$("#refund_request_popup_input_refund_request_amount").focus();
                        },200);
                        });
            		return;
            		
            	}
            	
            	return isValid;
            };
            
            
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'refund_request_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.popupSelectedData = (scope.popupSelectedData == null) ? {} : scope.popupSelectedData;
            scope.isLoading = true;
        }
    }
});


app.directive('depositTransferPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/depositTransferPopup.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
            	
            	$scope.popupParam = ($scope.popupParam == null)? {}: $scope.popupParam;
//            	$scope.popupParam.CUST_NO = null;
            	$scope.popupParam.TRANS_CUST_NO = null;
            	$scope.popupParam.RECEIVER = null;
            	
            	$scope.popupParam.TRANSFER_AMT = null;
        		
        		$scope.popupParam.TRANSFER_NOTE = null;
        		
            	
            	  $('#' + $scope.popupId).modal('show');
            	  
                setTimeout(function(){
                	$('#deposit_transfer_popup_input_customer_code').focus();
                    $scope.$apply();
                }, 200);
            });
            

            
          //for Parents-Child case
            $scope.$on('deposit_transfer_popup_customer_picker.select', function(e, data){
            	$scope.popupParam.TRANS_CUST_NO = data.CUST_NO;
            	$scope.popupParam.RECEIVER = data.RECEIVER;
            	
            	setTimeout(function(){
            		$("#"+$scope.popupId+"_input_transfer_amt").focus();
                    $scope.$apply();
                },50);
            });
            
            $scope.transferClick = function(){
            		
            	
            	if($scope.validateTransferClick()){
            		$scope.popupParam.TRANSFER_AMT = parseFloat($scope.popupParam.TRANSFER_AMT);
                	
                	var arrDepositTrans = [];
                    
                        var depositTrans = {
                        		TRANSFER_AMT: $scope.popupParam.TRANSFER_AMT,
                        		CUST_NO: $scope.popupParam.CUST_NO,
                        		TRANSFER_NOTE: $scope.popupParam.TRANSFER_NOTE,
                        		TRANS_CUST_NO: $scope.popupParam.TRANS_CUST_NO,
                        		
                            
                        };
                        arrDepositTrans.push(depositTrans);
                    
                    
                    var data = {
                    		"paramDepositTrans" : arrDepositTrans
                    };

                    BaseService.savePopupData('popup/save-deposit-trans', data).then(
                        function(response){
                            BaseService.alertSaveSuccess(function(){
                                $('#' + $scope.popupId).modal('hide');
                            });
                            $rootScope.baseButtonClick('retrieve');
                        },
                        function(response){
                            BaseService.alertError(response.message);
                        }
                    );
            		
            		
            	}
            	
            	
            	
            	
            };
            
            $scope.validateTransferClick = function(){
            	var msg = '';
            	var isValid = true;
            	
            	if($scope.popupParam.TRANS_CUST_NO == null || $scope.popupParam.TRANS_CUST_NO == ""){
            		isValid = false;
            		msg = mainMessage.message.require+" Customer No..";
            		
            		BaseService.alertWarning(msg , function() { 
                		setTimeout(function(){
                			$("#deposit_transfer_popup_input_customer_code").focus();
                        },200);
                        });
            		
            		return;
            		
            	}
            	
            	if($scope.popupParam.TRANSFER_AMT == null || $scope.popupParam.TRANSFER_AMT == ""){
            		isValid = false;
            		msg = mainMessage.message.require+" Transfer Amount.";
            		BaseService.alertWarning(msg , function() { 
                		setTimeout(function(){
                			$("#deposit_transfer_popup_input_transfer_amt").focus();
                        },200);
                        });
            		return;
            		
            	}
            	
            	if(parseFloat($scope.popupParam.TRANSFER_AMT) <= 0){
            		isValid = false;
            		msg = "Enter value greater than 0 in Transfer Amount.";
            		BaseService.alertWarning(msg , function() { 
                		setTimeout(function(){
                			$("#deposit_transfer_popup_input_transfer_amt").focus();
                        },200);
                        });
            		return;
            		
            	}
            	
            	if(parseFloat($scope.popupParam.TRANSFER_AMT) > parseFloat($scope.popupParam.USE_PB_DEPOSIT)){
            		isValid = false;
            		msg = "Refund amount is greater than useable deposit amount.";
            		BaseService.alertWarning(msg , function() { 
                		setTimeout(function(){
                			$("#deposit_transfer_popup_input_transfer_amt").focus();
                        },200);
                        });
            		return;
            		
            	}
            	
            	if($scope.popupParam.TRANSFER_NOTE == null || $scope.popupParam.TRANSFER_NOTE == ""){
            		isValid = false;
            		msg = mainMessage.message.require+" Transfer Detail.";
            		BaseService.alertWarning(msg , function() { 
                		setTimeout(function(){
                			$("#deposit_transfer_popup_input_tranfs_detail").focus();
                        },200);
                        });
            		return;
            		
            	}
            	
            	
            	
            	
            	return isValid;
            };
            
            
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'deposit_transfer_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.popupSelectedData = (scope.popupSelectedData == null) ? {} : scope.popupSelectedData;
            scope.isLoading = true;
        }
    }
});

app.directive('goodsDescribeCopyPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/goodsDescribeCopyPopup.html',
        controller: function($scope, $rootScope, $compile , BaseService) {
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
            	
            	$scope.isLoading = false;
            	$scope.isSelectMode = true;
            	
            	$scope.popupData = null;
            	$scope.popupParam.GOODS_CODE = null;
            	$scope.popupParam.GOODS_NAME = null;
            	
            	$scope.tempComCheck = "";
            	$scope.tempButtonName = "Deselect";
            	
            	$('#' + $scope.popupId).on('hidden.bs.modal', function () {
                    $scope.popupData = null;
                    $scope.popupSelectedData = {};
                    $("#goods_describe_copy_popup_select_button")[0].innerText = "Select";
                    if($scope.table != null){
                        $scope.table.fnClearTable();
                        $scope.table.fnDestroy();
                    }
//                    if($scope.fileUpload.name) {
//                        $('#' + $scope.popupId + ' input[name="file-upload"]').val("");
//                    }
                });
            	
            	
            	
//            	$scope.popupSelectedData = {};
//            	$scope.popupParam = ($scope.popupParam == null)? {}: $scope.popupParam;
//            	$scope.popupParam.CUST_NO = null;
//            	$scope.popupParam.TRANS_CUST_NO = null;
//            	$scope.popupParam.RECEIVER = null;
//            	
//            	$scope.popupParam.TRANSFER_AMT = null;
//        		
//        		$scope.popupParam.TRANSFER_NOTE = null;
//        		
            	
            	  $('#' + $scope.popupId).modal('show');
                
                setTimeout(function(){
                	$("#goods_describe_copy_popup_input_item_picker_code").focus();
                    $scope.$apply();
                }, 500);
            });
            
            $scope.retrievePopupDataAll = function(){
            	
            	var filter = {
            			goods_code : $scope.popupParam.GOODS_CODE
            	};
            
            	//P_GOODS_CODE_DESCRIBE_COPY = 1066
            	BaseService.getPopupData("popup/retrieve/1066", filter).then(
    	                function(response){
    	                	$scope.popupData = response.data.result;
                            $scope.renderTable($scope.popupData);
                           
                            if($scope.popupData != null){
                            	$("#goods_describe_copy_popup_select_button")[0].innerText = $scope.tempButtonName;
                            	setTimeout(function(){
                            	BaseService.focusTableRow($scope.table, 0);
                            	}, 200);
                            }
                            
    	                }
    	            );
            	
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    $scope.table = $('#table_goods_describe_copy_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "DESCRIBE_CODE",
                            "class": "text-center"
                        }, {
                            "data": "DESCRIBE_TITLE"
                        }, {
                            "data": "WEB_FLAG",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "0") ? false : true;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" disabled=true></table-checkbox>';
                            }
                        }, 
                        {
                            "data": "COMP_CHECK",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "0") ? false : true;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" action-change="checkBoxChangeClick(event, checked)"></table-checkbox>';
                            }
                        
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table, 0);
                    BaseService.generateTooltip($scope.table);
                    
                    setTimeout(function(){
                        $scope.table.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                        	
                        	if($scope.table != null)
                    			$scope.rowIndexPopup = $scope.table.api().row(this).index();
                        	
                        	
                            BaseService.setRowFocus(this);
                            $scope.currentRowPopup = this;
                            var aData = $scope.table.api().row(this).data();
                            if(aData != null){
                                $scope.popupSelectedData = aData;
                                $scope.$apply();
                            }
                        });
                        
                        
                        
                        if(dataSource.length == 0){
                            $scope.popupSelectedData = null;
                        }
                    }, 200);
                }
            };
            
          //for Parents-Child case
            $scope.$on('goods_describe_copy_popup_item_picker.select', function(e, data){
            	
            	$scope.popupParam.GOODS_CODE = data.GOODS_CODE;
            	$scope.popupParam.GOODS_NAME = data.GOODS_NAME;
            	
            	
            	setTimeout(function(){
            		$("#goods_describe_copy_popup_input_item_picker_code").focus();
                    $scope.$apply();
                },200);
            });
            
            $scope.validateInquiryClick = function(){
            	var isValid = true;
            	var msg = '';
            	
            	if($scope.popupParam.GOODS_CODE == null || $scope.popupParam.GOODS_CODE == ""){
            		isValid = false;
            		msg = mainMessage.message.require+" Item Code.";
            		BaseService.alertWarning(msg , function() { 
                		setTimeout(function(){
                			$("#goods_describe_copy_popup_input_item_picker_code").focus();
                        },200);
                        });
            		
            		return;
            	}
            	
            	
            	if(!isValid){
            		return false;
            	}
            	
            	return true;
            	
            };
            
            $scope.inquiryClick = function(){
            	
            	if($scope.validateInquiryClick()){
            		$scope.retrievePopupDataAll();
            	}
            };
            
            $scope.validateSelectClick = function(){
            	var msg = '';
            	var isValid = true;
            	
            	
            	if($scope.popupData != null){
            		if($scope.popupData.length == 0){
                		isValid = false;
                		msg = mainMessage.message.do_query;
                		BaseService.alertWarning(msg);
                		return;
                	}
            	}
            	
            	else{
            		if($scope.popupData == null){
            			isValid = false;
                		msg = mainMessage.message.do_query;
                		BaseService.alertWarning(msg);
                		return;
            		}
            	}
            	
            	if(!isValid){
            		return false;
            	}
            	
            	return true;
            	
            	
            };
            
            $scope.selectClick = function(){
            	if($scope.validateSelectClick())
            	{
            		
            		$scope.tempComCheck = "";
                	$scope.tempButtonName = "";
            		
            		if($scope.isSelectMode){
            			
            			$scope.tempButtonName = "Select";
            			$scope.tempComCheck = "0";
            			$scope.isSelectMode = false;

            		}
            		else if(!$scope.isSelectMode){
            			
            			$scope.tempButtonName = "Deselect";
            			$scope.tempComCheck = "1";
            			$scope.isSelectMode = true;
            		}
            		
            		$("#goods_describe_copy_popup_select_button")[0].innerText = $scope.tempButtonName;
        				$.each($scope.popupData, function(index, item){
                			item.COMP_CHECK = $scope.tempComCheck;
                	});
            		
            		$scope.renderTable($scope.popupData);
                    BaseService.focusTableRow($scope.table, $scope.rowIndexPopup);
            	}
            	
            	
            };
            
            $scope.validateConfirmClick = function(){
            	var msg = '';
            	var isValid = true;
            	
            	var last_check = 0;
            	
            	if($scope.popupData != null)
            	$.each($scope.popupData, function(index, item){
            		
            			if(item.COMP_CHECK == "1"){
            				last_check++;
            				return false;
            			}
            				
            	});
            	
            	if(last_check == 0){
            		isValid = false;
            		msg = mainMessage.message.no_data_processed;
            		BaseService.alertWarning(msg);
            		return;
            	}
            	
            	if(!isValid){
            		return false;
            	}
            	
            	return true;
            	
            	
            };
            
            $scope.confirmClick = function(){
            	if($scope.validateConfirmClick()){
            		$scope.$emit($scope.popupId + ".confirm", angular.copy($scope.popupData));
                    $('#' + $scope.popupId).modal('hide');	
            	}
            	 
            }
            
            $scope.cancelClick = function(){
            		
            	$('#' + $scope.popupId).modal('hide');	
            
            }
            
            
            $scope.checkBoxChangeClick = function(e, checked){
            	
            	if($scope.currentRowPopup != null){
                    var aData = $scope.table.api().row($scope.currentRowPopup).data();
                    if(aData != null){
                            aData.COMP_CHECK = checked ? "1" : "0";
                            
                    }
                }
            };
            
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'goods_describe_copy_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.popupSelectedData = (scope.popupSelectedData == null) ? {} : scope.popupSelectedData;
            scope.isLoading = true;
        }
    }
});


app.directive('unitInfoPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/unitInfoPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');
                if($scope.popupAutoLoad){
                    setTimeout(function(){
                        $scope.getPopupData();
                    },700);
                }
            });
            
            $scope.getPopupData = function(){
            	//P_COLOR_PATTERN_MULTI 1137
//            	$scope.popupParam.cspf_group = 'c002';
            	
            	BaseService.getPopupData("popup/retrieve/1137", $scope.popupParam).then(
	                function(respone){
	                    $scope.popupData = respone.data.result;
	                    $scope.renderTable($scope.popupData);
	                    
	                    $scope.isLoading = false;
	                },
	                function(respone){
	                }
	            );
            	
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.table_unit_info_popup = $('#table_unit_info_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                        	"data": "SELECTION",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "1") ? true : false;
                                return '<table-checkbox check-id="'+ row.CSPF_CODE +'" checked="'+ checked +'" action-change="selectChange(event, checked)"></table-checkbox>';
                            }
                        }, {
                            "data": "CSPF_GROUP",
                            "class": "text-center"
                        }, {
                            "data": "CSPF_CODE",
                            "class": "text-center"
                        }, {
                            "data": "CSPF_NAME",
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "bDestroy": true,
                        "bSort": false,
                    });
                    
                    BaseService.generateRowNumber($scope.table_unit_info_popup, 0);
                    BaseService.generateTooltip($scope.table_unit_info_popup);
                    
                    setTimeout(function(){
                        $scope.table_unit_info_popup.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentRow = this;
                        });
                    }, 50);
                }
            };
            
            $scope.selectChange = function(e, checked){
                if($scope.currentRow != null){
                    var aData = $scope.table_unit_info_popup.api().row($scope.currentRow).data();
                    if(aData != null){
                        aData.SELECTION = (checked) ? "1" : "0";
                    }
                }
            };
            
            $scope.selectAllClick = function(){
            	$.each($scope.popupData, function(index, item){
            		item.SELECTION = 1;
                });
                $scope.renderTable($scope.popupData);
            };
            
            $scope.removeSelectClick = function(){
            	$.each($scope.popupData, function(index, item){
            		item.SELECTION = 0;
                });
                $scope.renderTable($scope.popupData);
            };
            
            $scope.confirmClick = function(){
            	var arrSelectData = [];
            	$.each($scope.popupData, function(index, item){
            		 if(item.SELECTION == '1'){
                         var data = {
                    		 CSPF_GROUP: item.CSPF_GROUP,
                    		 CSPF_CODE: item.CSPF_CODE,
                    		 CSPF_NAME: item.CSPF_NAME
                         };
                         arrSelectData.push(data);
                     }
            	});
            	
                $scope.$emit($scope.popupId + ".confirm", angular.copy(arrSelectData));
                $('#' + $scope.popupId).modal('hide');
                
            };
            
            $scope.cancelClick = function(){
                $('#' + $scope.popupId).modal('hide');
            };
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'order_no_input_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = true;
        }
    }
});

app.directive('receiptsCancelPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/receiptsCancelPopup.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');
                
                $scope.popupParam.dg_sheet.modified = false;              
                $scope.popupParam.dg_sheet1.modified = false;
                
                $scope.renderTableDgSheet($scope.popupParam.dg_sheet);
                BaseService.focusTableRow($scope.table_dg_sheet_popup, 0);
                
                if($scope.popupParam.dg_sheet1 && $scope.popupParam.dg_sheet1.length > 0){
                    $scope.renderTableDgSheet1($scope.popupParam.dg_sheet1);
                    BaseService.focusTableRow($scope.table_dg_sheet1_popup, -1);
                }else{
                    if($scope.table_dg_sheet1_popup != null){
                        $scope.table_dg_sheet1_popup.fnClearTable();
                        $scope.table_dg_sheet1_popup.fnDestroy();
                    } 
                }
                
            });
            
            $scope.confirmClick = function(){
                
                $scope.wf_click_select_popup();
                
                $('#' + $scope.popupId).modal('hide');
            };
            
            $scope.cancelClick = function(){
                $('#' + $scope.popupId).modal('hide');
            };
            
            $scope.wf_click_select_popup = function() {        
                var cancel_amt      = 0;
                var sum_cancel_amt  = 0;
                var repay_pb_amt    = 0;
                var receipt_no      = 0;
                var settle_gb      = "";
                var card_bank_code = "";
                var bank_name      = "";
                var card_no        = "";
                var comp_card_no   = "";
                var ok_no          = "";
                var cancel_yn      = ""; 
                var valid_date     = "";                    
                var comp_receipt_no = "";
                var cancel_code     = "";
                var comp_settle_gb  = "";
                var settle_gb_comp  = "";
                var do_flag         = "";
                var remark1_v       = "";    
                var findRow40       = 0;    
                var addRow          = 0; 
                var depositor       = "";  
                var cvv             = "";
                var findRow         = 0;
                var sheet40         = $scope.popupParam.dg_sheet40;
                $scope.popupParam.dg_sheet.modified = false;
                
                if($scope.popupParam.dg_sheet1.length == 0){
                	$scope.popupParam.dg_sheet1.modified = false;
                }else{
                	$scope.popupParam.dg_sheet1.modified = true;
                }
                
                /*if(depositYn){
                	if ( !$scope.popupParam.dg_sheet1.requiredCheck() ) return;
                }*/
        
                if(!$scope.popupParam.dg_sheet.modified && !$scope.popupParam.dg_sheet1.modified){
                    $('#' + $scope.popupId).modal('hide');
                    return; 
                }   
        
                //= 처리금액 Check
                $scope.wf_setSumCancelAmt_popup();
                cancel_amt = BaseService.replaceAll($scope.popupParam.em_cancel_amt,",","");
                if($scope.popupParam.dg_sheet1.length == 0){
                    sum_cancel_amt = 0;
                }else{
                    sum_cancel_amt = $scope.popupParam.dg_sheet1[0].SUM_CANCEL_AMT;
                }

                /*if( trace(cancel_amt.toFixed(2)) != trace(sum_cancel_amt.toFixed(2)) ){
                    alert("msg.wrong_content");
                    return;
                }*/

                //= 필수입력사항 Check
                if($scope.wf_save_receipts_check($scope.popupParam.dg_sheet1, $scope.popupParam.master.ORDER_NO) == -1){
                    return;
                }   

                //= 환불가능금액 불만접수의 주문입금에 Setting
                for(var i=0; i < $scope.popupParam.dg_sheet.length; i++){
                    if($scope.popupParam.dg_sheet[i].cwareAction != ''){
                        repay_pb_amt = $scope.popupParam.dg_sheet[i].REPAY_PB_AMT;
                        receipt_no   = $scope.popupParam.dg_sheet[i].RECEIPT_NO;
                        for(var j=0; j < sheet40.length; j++){
                            if(receipt_no == sheet40[j].RECEIPT_NO){
                                BaseService.uf_SetItem(sheet40, j,"REPAY_PB_AMT",repay_pb_amt);
                                BaseService.uf_SetItem(sheet40, j,"REPAY_PB_AMT_MOD_FLAG","1"); //++++
                                BaseService.uf_SetItemModified(j,"U");      
                            }
                        }
                    }
                }
        
                //= 입금내역 및 환불내역을 불만접수에 Setting
                for( i=0; i < $scope.popupParam.dg_sheet1.length; i++){
                    if($scope.popupParam.dg_sheet1[i].cwareAction != ""){
                        receipt_no      = $scope.popupParam.dg_sheet1[i].RECEIPT_NO;
                        comp_receipt_no = $scope.popupParam.dg_sheet1[i].COMP_RECEIPT_NO;
                        cancel_yn       = $scope.popupParam.dg_sheet1[i].CANCEL_YN;
                        cancel_code     = $scope.popupParam.dg_sheet1[i].CANCEL_CODE;
                        comp_settle_gb  = $scope.popupParam.dg_sheet1[i].COMP_SETTLE_GB;
                        settle_gb_comp  = $scope.popupParam.dg_sheet1[i].SETTLE_GB_COMP;
                        do_flag         = $scope.popupParam.dg_sheet1[i].DO_FLAG;
                        remark1_v       = $scope.popupParam.dg_sheet1[i].REMARK1_V;
        
                        //= 취소된 결제건 = Payment in cleared
                        if(cancel_yn == "1"){
                            for( j=0; j < sheet40.length; j++){
                                if(receipt_no == sheet40[j].RECEIPT_NO){
                                    findRow = j;
                                }
                            }
                            if(comp_settle_gb == "01"){
                                if(do_flag == "20" || do_flag == "25"){
                                    //= 카드 승인,취소는 저장직전에 처리하고 현재는 정상처리된것으로 세팅
                                    //= gf_card_cancel
                                    BaseService.uf_SetItem($scope.popupParam.dg_sheet1, i,"OK_MED","100");
                                    BaseService.uf_SetItem($scope.popupParam.dg_sheet1, i,"OK_ERROR_CODE","0000");
                                    BaseService.uf_SetItem($scope.popupParam.dg_sheet1, i,"REMARK","");
                                    BaseService.uf_SetItem($scope.popupParam.dg_sheet1, i,"CARD_CHECK_FLAG","gf_card_cancel");                                 
        
                                    do_flag = "22";
                                    BaseService.uf_SetItem($scope.popupParam.dg_sheet1, i,"DO_FLAG",do_flag);   
                                }else if(do_flag == "30"){
                                    //= 카드 승인,취소는 저장직전에 처리하고 현재는 정상처리된것으로 세팅
                                    //= gf_card_refund
                                    BaseService.uf_SetItem($scope.popupParam.dg_sheet1, i,"OK_MED","100");
                                    BaseService.uf_SetItem($scope.popupParam.dg_sheet1, i,"OK_ERROR_CODE","0000");
                                    BaseService.uf_SetItem($scope.popupParam.dg_sheet1, i,"REMARK","");
                                    BaseService.uf_SetItem($scope.popupParam.dg_sheet1, i,"CARD_CHECK_FLAG","gf_card_refund");     
        
                                    do_flag = "32"; //++++ 기존에는 30 으로 되있었음.
                                    
                                    BaseService.uf_SetItem($scope.popupParam.dg_sheet1, i,"DO_FLAG",do_flag); 
                                }
                                BaseService.uf_SetItem(sheet40, findRow,"OK_MED",$scope.popupParam.dg_sheet1[i].OK_MED);
                                BaseService.uf_SetItem(sheet40, sheet40, findRow,"OK_ERROR_CODE",$scope.popupParam.dg_sheet1[i].OK_ERROR_CODE);
                                BaseService.uf_SetItem(sheet40, findRow,"REMARK",$scope.popupParam.dg_sheet1[i].REMARK);
                                BaseService.uf_SetItem(sheet40, findRow,"CARD_CHECK_FLAG",$scope.popupParam.dg_sheet1[i].CARD_CHECK_FLAG);
                            }
                            
                            BaseService.uf_SetItem(sheet40, findRow,"CANCEL_YN",cancel_yn);
                            BaseService.uf_SetItem(sheet40, findRow,"CANCEL_YN_MOD_FLAG","1");
                            BaseService.uf_SetItem(sheet40, findRow,"CANCEL_CODE",cancel_code);
                            BaseService.uf_SetItem(sheet40, findRow,"COMP_RECEIPT_NO",comp_receipt_no);
                            BaseService.uf_SetItem(sheet40, findRow,"COMP_SETTLE_GB",comp_settle_gb);
                            BaseService.uf_SetItem(sheet40, findRow,"SETTLE_GB_COMP",settle_gb_comp);
                            BaseService.uf_SetItem(sheet40, findRow,"REMARK1_V",remark1_v);
                            BaseService.uf_SetItem(sheet40, findRow,"DO_FLAG",do_flag);
                            BaseService.uf_SetItem(sheet40, findRow,"CARD_LOG_NO",$scope.popupParam.dg_sheet1[i].CARD_LOG_NO);
                            BaseService.uf_SetItem(sheet40, findRow,"CARD_CREDIT_AMT",$scope.popupParam.dg_sheet1[i].CARD_CREDIT_AMT);
                            BaseService.uf_SetItemModified(sheet40, findRow,"U");                            
        
                        //= 현금환불/예치금환불 결제건 = Cash refund / deposit refund payment in
                        }else{
                            findRow40 = 0;
                            for( j=0; j < sheet40.length; j++){
                                if(sheet40[j].RECEIPT_NO == receipt_no){
                                    findRow40 = j;
                                }
                            }
        
                            if(findRow40 > 0){
                                if(sheet40[findRow40].SETTLE_GB == $scope.popupParam.dg_sheet1[i].SETTLE_GB) {
                                    sheet40.uf_deleteRow(findRow40, null, false);
                                }
                            }
                            
                            addRow = sheet40.length;
                            BaseService.gf_dgSheetCopyInsert(sheet40, $scope.popupParam.dg_sheet1, i, addRow);
                            BaseService.uf_SetItemModified(sheet40, addRow, "IM");
                            BaseService.uf_SetItem(sheet40, addRow,"CANCEL_YN_MOD_FLAG","0");
                            BaseService.uf_SetItem(sheet40, addRow,"REPAY_PB_AMT_MOD_FLAG","0");
                            BaseService.uf_SetItem(sheet40, sheet40, sheet40, addRow,"COMP_RECEIPT_NO",comp_receipt_no);
                            BaseService.uf_SetItem(sheet40, sheet40, addRow,"COMP_SETTLE_GB",$scope.popupParam.dg_sheet1[i].COMP_SETTLE_GB);
                            BaseService.uf_SetItem(sheet40, addRow,"SETTLE_GB_COMP",$scope.popupParam.dg_sheet1[i].COMP_SETTLE_GB);
                            BaseService.uf_SetItem(sheet40, addRow,"CARD_LOG_NO","");
                            BaseService.uf_SetItem(sheet40, addRow,"SERV_CODE","");
                        }
                    }
                }
                
                $scope.$emit($scope.popupId + ".confirm");
                
                $('#' + $scope.popupId).modal('hide');
            }
            
            $scope.wf_save_receipts_check = function(sheet40, argOrder_no){
                var repay_pb_amt = 0;
                var settle_gb    = "";
                //= 카드 할부개월수와 상품 무이자개월수에 따른 Check!               
        
                for(var i = 0; i < sheet40.length; i++){
                    if(sheet40[i].cwareAction != null && sheet40[i].cwareAction != ""){
                        settle_gb         = sheet40[i].SETTLE_GB;                
                        var card_bank_code    = sheet40[i].CARD_BANK_CODE;
                        var bank_seq          = sheet40[i].BANK_SEQ;
                        var card_bank_no      = sheet40[i].CARD_NO;
                        var cvv               = sheet40[i].CVV;
                        var depositor         = sheet40[i].DEPOSITOR;
                        var valid_date        = sheet40[i].VALID_DATE;
                        var pay_month         = sheet40[i].PAY_MONTH;
                        var receipt_plan_date = sheet40[i].RECEIPT_PLAN_DATE;

                        if(settle_gb == ""){
                            BaseService.alertWarning("Enter category. Category:Payment code");
                            return -1;
                        }
                        
                        if(settle_gb == "01" || settle_gb == "02" || settle_gb == "52" || settle_gb == "53"){   
                            if( card_bank_code == ""){
                                BaseService.alertWarning("Enter category. Card/Bank");
//                                BaseService.alertWarning(Main.gf_getMessageCross("msg", "msg.input_check", "word", "word.card_bank"),sheet40,i,sheet40.getColumnIndex("BANK_NAME"));
                                return -1;
                            }                   
                            if(card_bank_no == ""){
                                BaseService.alertWarning("Enter category. Card/Account No.");
//                                BaseService.alertWarning(Main.gf_getMessageCross("msg", "msg.input_check", "word","word.card_bank_code"),sheet40,i,sheet40.getColumnIndex("CARD_NO"));
                                return -1;
                            }
                            if(depositor == ""){
                                BaseService.alertWarning("Enter category. Owner/Payer");
//                                BaseService.alertWarning(Main.gf_getMessageCross("msg", "msg.input_check", "word", "word.owner_receipts1"),sheet40,i,sheet40.getColumnIndex("DEPOSITOR"));
                                return -1;
                            }                            
                        }                                           
                        if(settle_gb == "01"){
//                          if(cvv == ""){
//                              BaseService.alertWarning(Main.gf_getMessageCross("msg", "msg.input_check", "word", "word.cvv"));
//                              return -1;
//                          }
                            if(valid_date == ""){
                                BaseService.alertWarning("Enter category. Valid date");
//                                BaseService.alertWarning(Main.gf_getMessageCross("msg", "msg.input_check", "word", "word.validity_term"),sheet40,i,sheet40.getColumnIndex("VALID_DATE"));
                                return -1;
                            }else if(String(valid_date).length != 4){
                                BaseService.alertWarning("Entry format of expiry date is mmyy.");
//                                BaseService.alertWarning(Main.gf_getMessage("msg","msg.valid_date_format"),sheet40,i,sheet40.getColumnIndex("VALID_DATE"));
                                return -1;
                            }else if(valid_date.length == 4){
                                if(valid_date == 0){
                                    BaseService.alertWarning("Enter only numbers");
//                                    BaseService.alertWarning(Main.gf_getMessage("msg","msg.require_only_figure_a"),sheet40,i,sheet40.getColumnIndex("VALID_DATE"));
                                    return -1;
                                }
                                if( "20" + String(valid_date).substring(2,4) < String(argOrder_no).substring(0,4)){
                                    BaseService.alertWarning("Year in expiry date must be greater than or same as the proper year. ( yy >");
//                                    BaseService.alertWarning(Main.gf_getMessage("msg","msg.valid_date_wrong_year"),sheet40,i,sheet40.getColumnIndex("VALID_DATE"));
                                    return -1;
                                }
                            }
                            if( pay_month == ""){
                                $scope.uf_SetItem(sheet40, i,"PAY_MONTH","0", false);    
                            }                     
                        }else if (settle_gb == "02"){
                            
                        }else if(settle_gb == "03" || settle_gb == "04" || settle_gb == "05" || settle_gb == "06"){
                            //= COD 적립금 예치금
                            if(depositor == "") {
                                BaseService.alertWarning("Enter category. Owner/Payer");
//                                BaseService.alertWarning(Main.gf_getMessageCross("msg", "msg.input_check", "word", "word.owner_receipts1"),sheet40,i,sheet40.getColumnIndex("DEPOSITOR"));
                                return -1;
                            }
                        }
                    }
                }
                return 0;
            }
            
            $scope.renderTableDgSheet = function(dataSource){
                if(dataSource != null){
                    
                    $scope.table_dg_sheet_popup = $('#table_dg_sheet_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                        	"data": "DO_FLAG",
                            "render": function(data, type, row){
                                var doFlag = "";
                                var selectDoFlag = getJSONObjects($scope.popupParam.SHEET40_C_DO_FLAG, 'code', row.DO_FLAG);
                                if(selectDoFlag != null && selectDoFlag.length > 0){
                                    doFlag = selectDoFlag[0].codeName;
                                }
                                return doFlag;
                            }
                        }, {
                            "data": "SETTLE_GB",
                            "class": "text-center",
                            "render": function(data, type, row){
                                var settleType = "";
                                var selectSettleType = getJSONObjects($scope.popupParam.SHEET40_C_SETTLE_GB, 'code', row.SETTLE_GB);
                                if(selectSettleType != null && selectSettleType.length > 0){
                                    settleType = selectSettleType[0].codeName;
                                }
                                return settleType;
                            }
                        }, {
                            "data": "CARD_BANK_CODE",
                            "class": "text-center"
                        }, {
                            "data": "BANK_NAME",
                        }, {
                            "data": "CARD_NO",
                        }, {
                            "data": "DEPOSITOR",
                        }, {
                            "data": "QUEST_AMT",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(row.QUEST_AMT, 2, '.', ',');
                            }
                        }, {
                            "data": "REPAY_PB_AMT",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(row.QUEST_AMT, 2, '.', ',');
                            }
                        }, {
                            "data": "VALID_DATE",
                        }, {
                            "data": "OK_NO",
                        }, {
                            "data": "OK_DATE",
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table_dg_sheet_popup, 0);
                    BaseService.generateTooltip($scope.table_dg_sheet_popup);
                    
                    setTimeout(function(){
                        $scope.table_dg_sheet_popup.off('click', 'tbody tr');
                        $scope.table_dg_sheet_popup.on('click', 'tbody tr', function(e) {
                            $.each(this.parentElement.childNodes, function(index, elem){
                                $(elem).removeClass("row-focus");
                            });
                            $(this).addClass("row-focus");
                            $scope.currentRowDgSheet = this;

                            var aData = $scope.table_dg_sheet_popup.api().row(this).data();
                            if(aData != null){
                                $scope.selectedRow = aData;
                            }
                        });
                    }, 50);
                }
            };
            
            $scope.renderTableDgSheet1 = function(dataSource){
                if(dataSource != null){
                    
                    $scope.table_dg_sheet1_popup = $('#table_dg_sheet1_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                        	"data": "CANCEL_CODE",
                            "render": function(data, type, row){
                                var cancelCode = "";
                                var selectCancelCode = getJSONObjects($scope.popupParam.SHEET40_C_CANCEL_CODE, 'code', row.CANCEL_CODE);
                                if(selectCancelCode != null && selectCancelCode.length > 0){
                                    cancelCode = selectCancelCode[0].codeName;
                                }
                                return cancelCode;
                            }
                        }, {
                            "data": "SETTLE_GB",
                            "class": "text-center",
                            "render": function(data, type, row){
                                var settleType = "";
                                var selectSettleType = getJSONObjects($scope.popupParam.SHEET40_C_SETTLE_GB, 'code', row.SETTLE_GB);
                                if(selectSettleType != null && selectSettleType.length > 0){
                                    settleType = selectSettleType[0].codeName;
                                }
                                return settleType;
                            }
                        }, {
                            "data": "CARD_BANK_CODE"
                        }, {
                            "data": "BANK_NAME",
                            "class": "col-BANK_NAME editable text-center no-tooltip",
                        }, {
                            "data": "CARD_NO",
                        }, {
                            "data": "DEPOSITOR",
                            "class": "col-DEPOSITOR editable",
                        }, {
                            "data": "QUEST_AMT",
                            "class": "col-QUEST_AMT editable text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(row.QUEST_AMT, 2, '.', ',');
                            }
                        }, {
                            "data": "VALID_DATE",
                        }, {
                            "data": "OK_NO",
                        }, {
                            "data": "OK_DATE",
                        }, {
                            "data": "TREFUND_REPAY_NOTE",
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table_dg_sheet1_popup, 0);
                    BaseService.generateTooltip($scope.table_dg_sheet1_popup);
                    
                    setTimeout(function(){
                        $scope.table_dg_sheet1_popup.off('click', 'tbody tr');
                        $scope.table_dg_sheet1_popup.on('click', 'tbody tr', function(e) {
                            $.each(this.parentElement.childNodes, function(index, elem){
                                $(elem).removeClass("row-focus");
                            });
                            $(this).addClass("row-focus");
                            $scope.currentRowDgSheet1 = this;

                            var aData = $scope.table_dg_sheet1_popup.api().row(this).data();
                            if(aData != null){
                                $scope.selectedDgSheet1Row = aData;
                            }
                        });
                        
                        BaseService.activateEditTable($scope.table_dg_sheet1_popup, 'BANK_NAME', {
                            "type": "inputPicker",
                            "typeClassName": "focus-border text-center",
                            "pickerId": "receipt_cancel_bank_info_picker",
                            "pickerInputClassName": "text-center",
                            "angularScope": $scope,
                            "angularValidate": function(value, settings) {
                                
                                var aData = $scope.table_dg_sheet1_popup.api().row($scope.currentRowDgSheet1).data();
                                
                                if(aData.CANCEL_YN != "0"){
                                    return false;
                                }
                                
                                $scope.receiptBankInfoParam.settle_flag = aData.SETTLE_GB;
                                
                                if($scope.receiptBankInfoParam != null && $scope.receiptBankInfoParam.settle_flag != null){
                                    switch($scope.receiptBankInfoParam.settle_flag){
                                        case "02": return true; break;
                                        case "09": return true; break;
                                    }
                                }
                                return false;
                            }
                        });
                        
                        BaseService.activateEditTable($scope.table_dg_sheet1_popup, 'DEPOSITOR', {
                            typeClassName: "focus-border",
                            "angularValidate": function(value, settings) {
                                var aData = $scope.table_dg_sheet1_popup.api().row($scope.currentRowDgSheet1).data();
                                
                                if(aData.CANCEL_YN != "0"){
                                    return false;
                                }
                                return true;
                            },
                            callback: function (value, settings){
                                var aData = $scope.table_dg_sheet1_popup.api().row(this.parentElement).data();
                                if(aData != null){
                                    aData.DEPOSITOR = value;
                                    $scope.table_dg_sheet1_popup.api()
                                        .cell(this.parentElement.childNodes[6])
                                        .data(aData.DEPOSITOR)
                                        .draw();
                                    $(this).attr('data-original-title', value);
                                }
                            }
                        });
                        
                        BaseService.activateEditTable($scope.table_dg_sheet1_popup, 'QUEST_AMT', {
                            "maxLength": 16,
                            "typeClassName": "text-right",
                            "inputFormat": "number",
                            "select": true,
                            "angularValidate": function(value, settings) {
                                var aData = $scope.table_dg_sheet1_popup.api().row($scope.currentRowDgSheet1).data();
                                
                                if(aData.CANCEL_YN != "0"){
                                    return false;
                                }
                                return true;
                            },
                            "callback": function (value, settings){
                                var aData = $scope.table_dg_sheet1_popup.api().row($scope.currentRowDgSheet1).data();
                                
                                //validate quest_amt
                                /*if($scope.validateQuestAmt(BaseService.replaceAll(value,",",""), BaseService.replaceAll($scope.originQuestAmt,",",""))){
                                    aData.QUEST_AMT = value;
                                }else{
                                    aData.QUEST_AMT = $scope.oldQuestAmt;
                                }*/
                                
                                $scope.table_dg_sheet1_popup.api()
                                        .cell($scope.currentRowDgSheet1.childNodes[7])
                                        .data(BaseService.formatDecimal(aData.QUEST_AMT, 2, '.', ','))
                                        .draw();

                            }
                        });
                        
                    }, 50);
                    
                }
            };
            
            $scope.wf_refund_process_popup = function(argRow, arg_repay_amt, arg_repay_pb_amt, arg_gubun){
                
            	var settleInfo = $scope.gf_getSettleFlagInfo_popup($scope.popupParam.RESULT_TSETTLEINFO , $scope.selectedRow.SETTLE_GB);
                
                //= 재승인/취소 처리 = Reapproval / cancellation process
                var params = angular.copy($scope.selectedRow);
                params.curRow           = (argRow) ? 0 : argRow;
                params.arg_repay_amt    = arg_repay_amt;
                params.arg_repay_pb_amt = arg_repay_pb_amt;
                params.gubun            = arg_gubun;
                params.new_do_flag      = settleInfo.SETTLE_DO_FLAG;
                params.refund_flag      = settleInfo.REFUND_FLAG;
                
                //Main.gConnect.callFunction(CwareConst.PKG_ACTION_PATH + "custcenter.order.OrderClaim.refundProcess", resultPopSheet, param);
           
                BaseService.getPopupData("popup/refund-process", params).then(
                    function(response){
                        $scope.result_refund_process_popup(response.data.result);
                    },
                    function(response){
                    }
                );

            }
            
            $scope.result_refund_process_popup = function(response){
                BaseService.uf_SetItem($scope.popupParam.dg_sheet, response.curRow ,"REPAY_PB_AMT" ,response.SHEET_REPAY_PB_AMT, false);
                BaseService.uf_SetItem(response.curRow ,"cwareAction"  ,"U", false);
                
                $scope.wf_addRowSheet1_cancel_popup(response); 
                
                if(response.ADDROW){
                	$scope.wf_addRowSheet1_cancel_popup(response.ADDROW); 
                }
                
                $scope.renderTableDgSheet1($scope.popupParam.dg_sheet1);
                BaseService.focusTableRow($scope.table_dg_sheet1_popup, -1);
            }
            
            $scope.wf_addRowSheet1_cancel_popup = function(response, addRow){
                $scope.gf_dgSheetCopyInsert_popup($scope.popupParam.dg_sheet1, response);
                
                //dg_sheet1.uf_SetItemModified($scope.popupParam.dg_sheet1.length-1, "IM");
                $scope.popupParam.dg_sheet1[$scope.popupParam.dg_sheet1.length - 1].cwareAction = "IM";
                $scope.popupParam.dg_sheet1[$scope.popupParam.dg_sheet1.length - 1].rowId = chance.string({length: 18});
                
                $scope.wf_setSumCancelAmt_popup();
            }
            
            $scope.wf_setSumCancelAmt_popup = function() {
                var sumCancelAmt = 0;
                var quest_amt    = 0;
                var settle_gb    = "";
                var cancel_yn    = "";
                
                for(var i=0; i < $scope.popupParam.dg_sheet1.length; i++){
                    quest_amt = parseFloat($scope.popupParam.dg_sheet1[i].QUEST_AMT);
                    settle_gb = $scope.popupParam.dg_sheet1[i].SETTLE_GB;
                    cancel_yn = $scope.popupParam.dg_sheet1[i].CANCEL_YN;
                    
                    if(settle_gb == "" ){
                        sumCancelAmt = sumCancelAmt + quest_amt;//BaseService.modAmt(sumCancelAmt + quest_amt);
                    }else if(settle_gb.substring(0,1) != "5" && cancel_yn == "0"){
                        sumCancelAmt = sumCancelAmt + quest_amt;//BaseService.modAmt(sumCancelAmt + quest_amt);
                    }else if(settle_gb.substring(0,1) != "5" && cancel_yn == "1"){
                        sumCancelAmt = sumCancelAmt - quest_amt;//BaseService.modAmt(sumCancelAmt - quest_amt);
                    }else if(settle_gb.substring(0,1) == "5" ){
                        sumCancelAmt = sumCancelAmt - quest_amt;//BaseService.modAmt(sumCancelAmt - quest_amt);
                    }//amt2.text = amt2.text+"/sum"+String(sumCancelAmt)+"/quest_amt"+String(quest_amt);
                }
               
                if($scope.popupParam.dg_sheet1.length > 0){
                    BaseService.uf_SetItem($scope.popupParam.dg_sheet1, 0,"SUM_CANCEL_AMT", sumCancelAmt, false);
                    $scope.sum_cancel_amt = sumCancelAmt;
                } else {
                    $scope.sum_cancel_amt = "0";
                }
            } 
            
            $scope.gf_dgSheetCopyInsert_popup = function(dataListDest, dataSrc){
            
                var tmpRow = {};

                tmpRow = angular.copy(dataSrc);
                tmpRow.cwareAction = "I";
                tmpRow.rowId = chance.string({length: 18});
                dataListDest.push(tmpRow);

                return dataListDest.length;
            }
           
            $scope.gf_getSettleFlagInfo_popup = function(argSettle, argSettleFlag){
                for(var i = 0 ; i < argSettle.length; i++){
                    if(argSettle[i].SETTLE_FLAG == argSettleFlag){            	
                        return argSettle[i];
                        break;
                    }
                }
                return null;
            }
            
            $scope.gf_refund_pb_check_popup = function(argGb, dg_sheet, dg_sheet1, selectedRow, argWin, argSettleinfo) {

                var settle_gb      = "";
                var do_flag        = "";
                var repay_pb_amt   = 0;
                var receipt_no     = "";
                var settleInfo     = [];

                if( !(argWin == "PopReceiptsCancel" || argWin == "w_refund_input") ){
                    return -1;
                }

                settle_gb    = selectedRow.SETTLE_GB;
                do_flag      = selectedRow.DO_FLAG;
                repay_pb_amt = selectedRow.REPAY_PB_AMT;
                settleInfo   = $scope.gf_getSettleFlagInfo_popup(argSettleinfo, settle_gb);

                if((do_flag >= 20) && (repay_pb_amt == 0)){
                    BaseService.alertWarning("There is no refund amount.");
                    return 2;
                }

                if(argGb == '1'){
                    receipt_no = selectedRow.RECEIPT_NO;
                    for(var i=0; i < $scope.popupParam.dg_sheet1.length; i++){
                        if($scope.popupParam.dg_sheet1[i].COMP_RECEIPT_NO == receipt_no){
                            return -1;
                        }
                    }
                }

                if(argGb == "1"){
                    if(do_flag < settleInfo.REFUND_SETTLE_DO_FLAG) return 1;
                }else if(argGb == "2"){
                    if(do_flag >= settleInfo.REFUND_SETTLE_DO_FLAG) return 1;
                }else if(argGb == "3"){
                    if((do_flag >= settleInfo.REFUND_SETTLE_DO_FLAG) && settleInfo.REFUND_DEPOSIT_YN == '1' ) return 1;
                }
                return -1;
            }
            
            $scope.gf_getSettleFlagInfo_popup = function(argSettle, argSettleFlag){
                for(var i = 0 ; i < argSettle.length; i++){
                    if(argSettle[i].SETTLE_FLAG == argSettleFlag){            	
                        return argSettle[i];
                        break;
                    }
                }
                return null;
            }
            
            $scope.wf_click_cancel_popup = function(){
                var rtn            = 0;
                var cancel_amt     = 0;
                var sum_cancel_amt = 0;
                var settle_gb      = "";
                var do_flag        = "";
                var repay_pb_amt   = 0;
                var repay_amt      = 0;
                var quest_Amt      = 0;                
        		
        		$scope.depositYn = false;
        		
                rtn = $scope.gf_refund_pb_check_popup("1", $scope.popupParam.dg_sheet, $scope.popupParam.dg_sheet1, $scope.selectedRow, "PopReceiptsCancel", $scope.popupParam.RESULT_TSETTLEINFO);
                if(rtn == -1){
                    BaseService.alertWarning("Selected payment cannot be processed.");
                    return;
                }else if(rtn == 2){
                    return;
                }
                
                cancel_amt = parseInt(BaseService.replaceAll($scope.popupParam.em_cancel_amt,",",""));
                
                $scope.wf_setSumCancelAmt_popup();
                
                if($scope.popupParam.dg_sheet1.length == 0){
                    sum_cancel_amt = 0;
                }else{
                    sum_cancel_amt = $scope.popupParam.dg_sheet1[0].SUM_CANCEL_AMT;
                }
        
                if(sum_cancel_amt == cancel_amt){
                    BaseService.alertWarning("No processable payment amount found.");
                    return;
                }
        
                settle_gb    = $scope.selectedRow.SETTLE_GB;
                do_flag      = $scope.selectedRow.DO_FLAG;
                repay_pb_amt = $scope.selectedRow.REPAY_PB_AMT;
                if(do_flag == "10") repay_pb_amt = $scope.selectedRow.QUEST_AMT;
        
                //= 취소금액 = Cancellation Amount
                repay_amt = BaseService.modAmt(cancel_amt - sum_cancel_amt);
        
                //= 재승인/취소 처리 = Reapproval / cancellation process
	            $scope.wf_refund_process_popup($scope.selectedIndex, repay_amt, repay_pb_amt, "1");
            }
            
            $scope.wf_click_refund_popup = function(){
                
                var rtn = 0;
                var cancel_amt = 0;
                var sum_cancel_amt = 0;
                var repay_pb_amt = 0;
                var repay_amt = 0;
                
        		$scope.depositYn = false;
                //= 환불 가능한 건인지 Check
                rtn = $scope.gf_refund_pb_check_popup("2", $scope.popupParam.dg_sheet, $scope.popupParam.dg_sheet1, $scope.selectedRow, "PopReceiptsCancel", $scope.popupParam.RESULT_TSETTLEINFO);
                if(rtn == -1){ 
                    BaseService.alertWarning("Selected payment cannot be processed. Process category: [Refund]");
                    return;
                }else if(rtn == 2){
                    return;
                }
        
                //= 처리금액 Check
                cancel_amt = Number(BaseService.replaceAll($scope.popupParam.em_cancel_amt,",",""));
                if(cancel_amt > 0){
                    BaseService.alertWarning("Selected payment cannot be processed. Process category: [Refund]");
                    return;
                }
        
                $scope.wf_setSumCancelAmt_popup();
        
                if($scope.popupParam.dg_sheet1.length == 0){
                    sum_cancel_amt = 0;
                }else{
                    sum_cancel_amt = Number($scope.popupParam.dg_sheet1[0].SUM_CANCEL_AMT);
                }
        
                if(sum_cancel_amt == cancel_amt){
                    BaseService.alertWarning("Refunded all Cancel Amount.");
                    return;
                }
                //= 현재 결제건의 환불가능금액
                repay_pb_amt = Number($scope.selectedRow.REPAY_PB_AMT);
                //= 취소금액
                repay_amt    = BaseService.modAmt(cancel_amt - sum_cancel_amt);
        
                //= 현금환불 처리
                $scope.wf_refund_process_popup($scope.selectedIndex, repay_amt, repay_pb_amt, "2");
                
            }
            
            $scope.wf_click_deposit_refund_popup = function(){
                
                var rtn = 0;
                var cancel_amt = 0;
                var sum_cancel_amt = 0;
                var repay_pb_amt = 0;
                var repay_amt = 0;     
                
        		$scope.depositYn = true;          
                //= 예치금환불 가능한 건인지 Check
                rtn = $scope.gf_refund_pb_check_popup("3", $scope.popupParam.dg_sheet, $scope.popupParam.dg_sheet1, $scope.selectedRow, "PopReceiptsCancel", $scope.popupParam.RESULT_TSETTLEINFO);
                if(rtn == -1){
                   BaseService.alertWarning("Selected payment cannot be processed. Process category: [Deposit Refund]");              
                    return;
                }else if(rtn == 2){
                    return;
                }
        
                //= 처리금액 Check
                cancel_amt = Number(BaseService.replaceAll($scope.popupParam.em_cancel_amt,",",""));
                if(cancel_amt > 0){
                    BaseService.alertWarning("Selected payment cannot be processed. Process category: [Refund]");
                    return;
                }
                
                $scope.wf_setSumCancelAmt_popup();
        
                if($scope.popupParam.dg_sheet1.length == 0){
                    sum_cancel_amt = 0;
                }else{
                    sum_cancel_amt = Number($scope.popupParam.dg_sheet1[0].SUM_CANCEL_AMT);
                }
        
                //= 취소금액을 모두 접수한 경우
                if(sum_cancel_amt == cancel_amt){
                    BaseService.alertWarning("Refunded all Cancel Amount.");
                    return;
                }
                //= 현재 결제건의 환불가능금액
                repay_pb_amt = Number($scope.selectedRow.REPAY_PB_AMT);
                //= 취소금액
                repay_amt    = BaseService.modAmt(cancel_amt - sum_cancel_amt);
        
                //= 현금환불 처리
                $scope.wf_refund_process_popup($scope.selectedIndex, repay_amt, repay_pb_amt, "3");
                
            }
            
            $scope.wf_click_insert_popup = function(){
                
                var settle_cnt     = 0;
                var sum_cancel_amt = 0;
                var cancel_amt     = 0;
                var settle_gb      = "";
                var repay_amt      = 0;
                var addRow         = 0;
                
                $scope.wf_setSumCancelAmt_popup();
                cancel_amt = BaseService.replaceAll($scope.popupParam.em_cancel_amt,",","");
        
                //= COD,MOB 는 신규삽입 안됨
                settle_gb = $scope.popupParam.dg_sheet[0].SETTLE_GB;
                if(settle_gb =="03" || settle_gb =="04"){
                    BaseService.alertWarning("Cannot insert new payment.");
                    return;
                }
        
                if($scope.popupParam.dg_sheet1.length == 0){
                    if(cancel_amt < 0){
                        BaseService.alertWarning("Cannot insert new payment.");
                        return;
                    }
                    sum_cancel_amt = 0;
                }else{
                    sum_cancel_amt = Number($scope.popupParam.dg_sheet1[0].SUM_CANCEL_AMT);
                }
                
                if(Number(sum_cancel_amt) >= Number(cancel_amt)){
                    BaseService.alertWarning("Refunded all Cancel Amount.");
                    return;
                }
                  
                for(var i=0; i < $scope.popupParam.dg_sheet1.length; i++){
                    if($scope.popupParam.dg_sheet1[i].CANCEL_YN != "1" && Number($scope.popupParam.dg_sheet1[i].SETTLE_GB) < 50 ){
                        settle_cnt++;
                    }
                }
                     
                for( i=0; i < $scope.popupParam.dg_sheet.length; i++){
                    if( Number($scope.popupParam.dg_sheet[i].REPAY_PB_AMT) > 0 ) {
                        if(settle_cnt > 0){
                            for(var j=0; j < $scope.popupParam.dg_sheet1.length; j++){
                                if($scope.popupParam.dg_sheet1[j].CANCEL_YN != "1" &&
                                   ( $scope.popupParam.dg_sheet1[j].SETTLE_GB == "05" || $scope.popupParam.dg_sheet1[j].SETTLE_GB == "06" ) &&
                                     $scope.popupParam.dg_sheet1[j].SETTLE_GB == $scope.popupParam.dg_sheet[i].SETTLE_GB){
                                    settle_cnt++;
                                }
                            }
                        }else{
                            settle_cnt++;
                        }
                    }
                }
        
                if(settle_cnt > 1){
                    BaseService.alertWarning("Up to 2 payment methods are possible.");
                    return;
                }
        
                //= 추가금액
                repay_amt = BaseService.modAmt(cancel_amt - sum_cancel_amt);
                
                addRow = $scope.popupParam.dg_sheet1.length;
                
                $scope.gf_dgSheetCopyInsert_popup($scope.popupParam.dg_sheet1, $scope.popupParam.dg_sheet1.length - 1);
                BaseService.uf_SetItem($scope.popupParam.dg_sheet1, addRow, "RECEIPT_NO", "");
                BaseService.uf_SetItem($scope.popupParam.dg_sheet1, addRow,"QUEST_AMT", repay_amt);
                BaseService.uf_SetItem($scope.popupParam.dg_sheet1, addRow,"CANCEL_YN", "0"); 
                BaseService.uf_SetItem($scope.popupParam.dg_sheet1, addRow, "rowId", chance.string({length: 18}), false);
                
                if(settle_gb == '01'){
                    aseService.uf_SetItem($scope.popupParam.dg_sheet1, addRow,"PAY_MONTH","0");
                }               
                
                $scope.wf_setSumCancelAmt_popup();

                //= 입금번호 sequence 부여                
                var params = {};           
                params.RECEIPTS_NO_CURROW = String(addRow);          
//              Main.gConnect.callFunction(CwareConst.PKG_ACTION_PATH + "custcenter.order.OrderClaim.getReceptNo", resultPopSheet, param);
                BaseService.getPopupData("popup/get-recept-no", params).then(
                    function(response){
                        $scope.resultPopSheet(response.data.result, 'RECEIPTS_NO');
                        
                        $scope.renderTableDgSheetChangePopop($scope.popupParam.dg_sheet); 
                        
                        BaseService.focusTableRow($scope.table_dg_sheet1_popup, ($scope.popupParam.dg_sheet1.length - 1));
                    },
                    function(response){
                    }
                );
                
            }
            
            $scope.wf_click_delete_popup = function(){
                
                var curRow = $scope.selectedDgSheet1Row;
                if(!curRow){
                    return;
                }   
                    
                swal({ 
                        title: "Question ?",
                        text: "Delete ?",
                        type: "info",
                        showRejectButton: true,
                        confirmButtonText: "Yes"
                    }, function(button){
                        if(button == 'confirm'){
                            _.remove($scope.popupParam.dg_sheet1, { "rowId": $scope.selectedDgSheet1Row.rowId });
                            $scope.renderTableDgSheet1($scope.popupParam.dg_sheet1);   
                            BaseService.focusTableRow($scope.table_dg_sheet1_popup, -1);
                        }
                    });
            };
            
            $scope.$on('receipt_cancel_bank_info_picker.select', function(e, data){
                if($scope.currentRowDgSheet1 != null){
                    var rowFocusData = $scope.table_dg_sheet1_popup.api().row($scope.currentRowDgSheet1).data();
                    if(rowFocusData != null){
                        rowFocusData.CARD_BANK_CODE = data.BANK_CODE;
                        rowFocusData.BANK_NAME = data.BANK_NAME;
                        rowFocusData.CARD_NO = data.BANK_DEPOSIT_NO;
                        rowFocusData.SERV_CODE = data.SERV_CODE;
                        rowFocusData.GATEWAY_YN = data.GATEWAY_YN;
                        rowFocusData.BANK_CODE = data.BANK_CODE;
                        rowFocusData.BANK_NAME = data.BANK_NAME;
                        rowFocusData.BANK_SEQ = data.BANK_SEQ;
                        
                        $scope.renderTableDgSheet1($scope.popupParam.dg_sheet1);
                        BaseService.focusTableRow($scope.table_dg_sheet1_popup, -1);

                        
                    }
                }
            });
            
            $scope.$on('receipt_cancel_bank_info_picker.clear', function(e, data){
                if($scope.currentRowDgSheet1 != null){
                    var rowFocusData = $scope.table_dg_sheet1_popup.api().row($scope.currentRowDgSheet1).data();
                    if(rowFocusData != null){
                        rowFocusData.CARD_BANK_CODE = "";
                        rowFocusData.BANK_NAME = "";
                        rowFocusData.CARD_NO = "";
                        rowFocusData.SERV_CODE = "";
                        rowFocusData.GATEWAY_YN = "";
                        rowFocusData.BANK_CODE = "";
                        rowFocusData.BANK_NAME = "";
                        rowFocusData.BANK_SEQ = "";
                        
                        $scope.renderTableDgSheet1($scope.popupParam.dg_sheet1);
                        BaseService.focusTableRow($scope.table_dg_sheet1_popup, -1);

                        
                    }
                }
            });
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'receipts_cancel_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = true;
        }
    }
});

app.directive('programUploadPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/programUploadPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.fileUpload = {};
            $scope.fileName = "";
            $scope.cmbLiveFlag = [];
            $scope.currentUrl = currentUrl;
            $scope.isProcessing = false;
            
            $scope.imgLoadingPath = currentUrl + "/resources/assets/images/progress/progress-circle-success.svg";
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');
                
                $scope.cmbLiveFlag = $scope.popupParam.cmbLiveFlag;
                
                $('#' + $scope.popupId + ' input[name="file-upload"]').on('change', function(){
                    $scope.uploadFile();
                });
                
                $('#' + $scope.popupId).on('hidden.bs.modal', function () {
                    $scope.popupData = null;
                    $scope.fileName = "";
                    if($scope.table_program_popup != null){
                        $scope.table_program_popup.fnClearTable();
                        $scope.table_program_popup.fnDestroy();
                    }
                    if($scope.fileUpload.name) {
                        $('#' + $scope.popupId + ' input[name="file-upload"]').val("");
                    }
                });
            });
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.table_program_popup = $('#table_program_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "BD_DATE",
                            "class": "text-center"
                        }, {
                            "data": "BD_BTIME",
                            "class": "text-center"
                        }, {
                            "data": "BD_ETIME",
                            "class": "text-center"
                        }, {
                            "data": "PROG_CODE",
                            "class": "text-center"
                        }, {
                            "data": "LIVE_NM",
                            "class": "text-center",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.cmbLiveFlag, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                        }, {
                            "data": "TAPE_CODE"
                        }, {
                            "data": "PLAN_ORDER_AMT",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 2)
                            }
                        }, {
                            "data": "PLAN_MARGIN_AMT",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 2)
                            }
                        }, {
                            "data": "FAIL"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            var columnResult = (row.childNodes.length <= 10) ? row.childNodes[9] : null;
                            if(columnResult){
                                if(data.DATA_YN == 0){
                                    $(columnResult).addClass("bg-danger");
                                }
                                else {
                                    $(columnResult).addClass("bg-success");
                                }
                            }
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table_program_popup, 0);
                    BaseService.generateTooltip($scope.table_program_popup);
                }
            };
            
            $scope.uploadFile = function(){
            	$scope.isProcessing = true;
                $scope.fileName = $scope.fileUpload.name;
                BaseService.uploadFile($scope.fileUpload, currentMenuId+'/upload-excel').then(
                    function(response){
                    	$scope.isProcessing = false;
                    	if(response.data.ERROR_MESSAGE){
                    		BaseService.alertWarning(response.data.ERROR_MESSAGE);
                    		return false;
                    	}
                        $scope.popupData = response.data.result;
                        $scope.renderTable($scope.popupData);
                    }, function(response){
                    	$scope.isProcessing = false;
                    }
                );
            };

            $scope.saveClick = function(){
                
                var isCanSave = true;
                if($scope.popupData == null || $scope.popupData.length == 0){
                    BaseService.alertWarning("No data to save.");
                    isCanSave = false;
                }
                else {
                    $.each($scope.popupData, function(index, item){
                       if(!item.DATA_YN || item.DATA_YN == 0){
                           BaseService.alertWarning("Please work again. After check Upload data.");
                           isCanSave = false;
                       }
                    });
                }
                
                if(isCanSave){
                    var arrProgramSchedule = [];
                    $.each($scope.popupData, function(index, item){
                        var programSchedule = {
                            TAPE_CODE: item.TAPE_CODE,
                            MEDIA_CODE: item.MEDIA_CODE,
                            BD_DATE: item.BD_DATE,
                            BD_BTIME: item.BD_BTIME,
                            BD_ETIME: item.BD_ETIME,
                            PROG_CODE: item.PROG_CODE,
                            PLAN_AMT: item.PLAN_MARGIN_AMT,
                            PLAN_ORDER_AMT: item.PLAN_ORDER_AMT,
                            LIVE_NM: item.LIVE_NM
                        };
                        arrProgramSchedule.push(programSchedule);
                    });
                    
                    var data = {
                        paramProgramSchedule: arrProgramSchedule
                    };

                    BaseService.savePopupData('popup/save-program-schedule-upload', data).then(
                        function(response){
                            BaseService.alertSaveSuccess(function(){
                                $('#' + $scope.popupId).modal('hide');
                            });
                        },
                        function(response){
                            BaseService.alertError(response.message);
                        }
                    );
                }
            };
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'program_upload_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
        }
    }
});

app.directive('receiptsChangePopup', function($compile){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/receiptsChangePopup.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');
                
                
                $scope.initValue();
                $scope.wf_initSheetSet();
                
            });
            
            $scope.initValue = function(){
                
                var today = new Date();
                $scope.sysdate_slash = BaseService.dateFormat(today, 'yyyy/MM/dd');
                $scope.sysdate = BaseService.dateFormat(today, 'yyyy/MM/dd');
                $scope.sysdatetime = BaseService.dateFormat(today, 'yyyy/MM/dd HH:mm:ss    ');
                $scope.FINAL_D_POINT = 0;
                $scope.receiptBankInfoParam = {};
                
            }
            
            $scope.wf_initSheetSet = function(){
                var addRow           = 0;
                var do_flag       = "";
                var settle_gb     = "";
                var cancel_yn     = "";
                var sum_quest_amt = 0;
                var sheetData      = [];
                                     
                for(var i = 0; i < $scope.popupParam.dg_sheet40.length; i++){
                    settle_gb = $scope.popupParam.dg_sheet40[i].SETTLE_GB;
                    cancel_yn = $scope.popupParam.dg_sheet40[i].CANCEL_YN;
                    //= 환불접수건/수수료 건은 제외
                    if(settle_gb.substring(0,1) == "5" || settle_gb.substring(0,1) == "6"){
                        continue;
                    }
                    //= 취소건 제외
                    if(cancel_yn == "1"){
                        continue;
                    }                    
                    sheetData[addRow] = angular.copy($scope.popupParam.dg_sheet40[i]);
                    sheetData[addRow].CANCEL_YN_HIDDEN = sheetData[addRow].CANCEL_YN;
                    sheetData[addRow].DEPO_RESI_NO     = "";
                    sheetData[addRow].COMP_RECEIPT_NO  = "";
                    sheetData[addRow].DO_FLAG_ORG      = sheetData[addRow].DO_FLAG;
                    sheetData[addRow].REPAY_PB_AMT_ORG = sheetData[addRow].REPAY_PB_AMT;
                    sheetData[addRow].CARD_ALLOT_MONTH = sheetData[addRow].DO_FLAG;
                    sheetData[addRow].DIVIDE_YN        = "0";
                    addRow++;                                        
                
                    //= 진행단계가 "접수", "입금취소" 인 건은 전체 진행단계는 "접수"임.
                    do_flag = $scope.popupParam.dg_sheet40[i].DO_FLAG;
                    if( do_flag == "10" || do_flag == "21" ){
                        $scope.i_do_flag = "10";
                    }                                                   
                }  
                              
                for( i = 0; i < $scope.popupParam.dg_sheet40.length; i++){
                    settle_gb = $scope.popupParam.dg_sheet40[i].SETTLE_GB;
                    cancel_yn = $scope.popupParam.dg_sheet40[i].CANCEL_YN;                                      
                
                    if( ( cancel_yn == "1" && $scope.popupParam.dg_sheet40[i].DO_FLAG != "41" ) || ( settle_gb.substring(0,1) == "6" ) ){
                        sum_quest_amt = sum_quest_amt;
                    }else{
                        if(settle_gb.substring(0,1) == "5"){
                            sum_quest_amt = sum_quest_amt - Number($scope.popupParam.dg_sheet40[i].QUEST_AMT);
                        }else{
                            sum_quest_amt = sum_quest_amt + Number($scope.popupParam.dg_sheet40[i].QUEST_AMT);
                        }
                    }                                                     
                }                              
                              
                $scope.dg_sheet = sheetData;

                $scope.em_quest_amt     = BaseService.modAmt(sum_quest_amt);
                //phiphat
                //em_quest_amt.text = String(sum_quest_amt);                

                /*var Map = [];
                Map.push({"order_no":parentDocument.gWindow.master.order_no.text});               
                Main.gConnect.callFunction(CwareConst.PKG_ACTION_PATH + "custcenter.order.OrderClaim.retrieveOrderOutCheck", resultPopSheet, Map);
                */
                var params = {"order_no" : $scope.popupParam.dg_sheet.ORDER_NO};
                
                BaseService.getPopupData("popup/retrieve-order-out-check", params).then(
                    function(response){
                        $scope.resultPopSheet(response.data.result, 'ORDER_OUT_CHECK');
                        $scope.cancelType = {};
                        $.each($scope.popupParam.SHEET40_C_CANCEL_CODE, function(index, item){
                            $scope.cancelType[item.code] = item.codeName;
                        });
                        
                        setTimeout(function(){
                            $scope.renderTableDgSheetChangePopop($scope.dg_sheet); 
                        },400);
                        
                    },
                    function(response){
                    }
                );
            }
            
            $scope.ue_itemRenderChanged = function(rowData, newVal, oldVal) {              
                var settleInfo = $scope.gf_getSettleFlagInfo_popup($scope.popupParam.RESULT_TSETTLEINFO, newVal);
                var temp_pay_month = 0;       
                if( $scope.order_out  == "-1"){
                    evt.target.itemchaging = false; 
                    return;
                }      
                /*if($scope.i_do_flag == "20"){
                    if(newVal == "02"){
                        BaseService.alertWarning(Main.gf_getMessage("msg","msg.select_next")+Main.gf_getMessage("word","word.content_card_saveamt_deposit"));
                        gf_setRendererCombo(dg_sheet, dataField, evt.itemRenderer as ComboBox, oldVal);    
                        evt.target.itemchaging = false;
                        return;
                    }
                    if(newVal != "01" && order_out == "1"){
                        BaseService.alertWarning(Main.gf_getMessage("msg","msg.select_next")+Main.gf_getMessage("word","word.content_card"));                         
                        gf_setRendererCombo(dg_sheet, dataField, evt.itemRenderer as ComboBox, oldVal);    
                        evt.target.itemchaging = false;
                        return;
                    }
                }*/
                var bef_settle_gb = oldVal;        
                if($scope.dg_sheet.length > 1  && ( newVal == "01" || newVal == "08" ||  
                                                        ((bef_settle_gb!= '03' || bef_settle_gb!= '04') && newVal == "03") || 
                                                        ((bef_settle_gb!= '03' || bef_settle_gb!= '04') && newVal == "04"))){
                    // && (bef_settle_gb!= '03' || bef_settle_gb!='04') , || newVal == "03" || newVal == "04"
                    BaseService.alertWarning("Cannot pay with selected payment methods combined.");                         
                    /*gf_setRendererCombo(dg_sheet, dataField, evt.itemRenderer as ComboBox, oldVal);                    
                    if(bef_settle_gb == "") rowData.QUEST_AMT", "0");    
                    evt.target.itemchaging = false;*/
                    return false;
                } 

                for (var i=0; i < $scope.dg_sheet.length;i++) {
                    if($scope.selectedRow.rowId != $scope.dg_sheet[i].rowId && 
                       $scope.dg_sheet[i].CANCEL_YN != "1" && $scope.dg_sheet[i].SETTLE_GB == newVal ){
                        
                        BaseService.alertWarning("The payment method is already registered.");                         
                        /*gf_setRendererCombo(dg_sheet, dataField, evt.itemRenderer as ComboBox, oldVal);      
                        evt.target.itemchaging = false;  */
                        return false;                           
                        
                    }

                    /*if($scope.selectedRow.rowId != $scope.dg_sheet[i].rowId && $scope.dg_sheet[i].CANCEL_YN == "1" &&
                         $scope.dg_sheet[i].SETTLE_GB == newVal ){
                        temp_pay_month = Number($scope.dg_sheet[i][i].PAY_MONTH);
                    }*/
                }        
                if(newVal =="01" || newVal =="02"){
                    for ( i=0; i <  $scope.dg_sheet.length; i++) {
                        if($scope.selectedRow.rowId != $scope.dg_sheet[i].rowId) continue;
                        if( $scope.dg_sheet[i].CANCEL_YN != "1" &&
                            ( $scope.dg_sheet[i].SETTLE_GB == "01" || $scope.dg_sheet[i].SETTLE_GB == "02") ){
                            
                            BaseService.alertWarning("The payment method cannot be combination of card and cash.");                         
                            /*gf_setRendererCombo(dg_sheet, dataField, evt.itemRenderer as ComboBox, oldVal);    
                            evt.target.itemchaging = false;*/
                            return false;
                            
                        }
                    }
                }        
                
                //= 기존에 Setting된 지불구분에 관련된 내역 Clear
                //= (환불관련 입금은 CMS내역 처리를 한뒤 Clear)
                var receipt_no = "";        
                if(bef_settle_gb != ""){
                    receipt_no = $scope.selectedRow.RECEIPT_NO;  
                    /*for( i=2; i<dg_sheet.columns.length; i++){
                        dg_sheet.uf_SetItem(dg_sheet.selectedIndex, dg_sheet.columns[i].dataField, "", false);
                    }
                    rowData.RECEIPT_NO = receipt_no;
                    rowData.SETTLE_GB = newVal;*/
                }

                //= 청구금액 Setting        
                //= 입금번호 sequence 부여 ( web 에서는 insert row 시 입급번호 생성함. 2006-09-04 by kst
                //= (상품의 청구금액 + 배송비) - 결제의 청구금액
                var item_quest_amt    = Number($scope.popupParam.iValue.item_quest_amt);
                var shpfee_cost       = Number(BaseService.replaceAll($scope.popupParam.dg_sheet.ship_cost,",",""));
                var receipt_quest_amt = $scope.wf_getSumQuestAmt(); 
                
                //= 청구금액의 절대값을 구한다.
                var quest_amt = Math.abs(BaseService.modAmt(item_quest_amt + shpfee_cost - receipt_quest_amt));        
                //= 소유/입금자 Setting
                rowData.DEPOSITOR = $scope.popupParam.dg_sheet.CUST_NAME;                                      

                //= 진행단계 (카드,현금 = "접수" / COD,외상매출금,적립금,예치금 = "승인")
                if(newVal == "01"){
                    rowData.QUEST_AMT = quest_amt;
                    rowData.DO_FLAG = "20";
                    rowData.PAY_MONTH ="0";                      
                }else if(newVal == "02" || newVal == "09" ){
                    //= 현금결제 체크
                    if(quest_amt < 0){
                        BaseService.alertWarning("No payable amount found.");                         
                        /*gf_setRendererCombo(dg_sheet, dataField, evt.itemRenderer as ComboBox, oldVal);          
                        evt.target.itemchaging = false;*/                   
                        return false;
                    }
                    //rowData.QUEST_AMT = quest_amt;
                    rowData.RECEIPT_PLAN_DATE = $scope.sysdate_slash;
                    rowData.DO_FLAG = "10";
                    rowData.SETTLE_GB = newVal;
                }else if(newVal == "03" || newVal == "04"){
                    //= COD 결제가 가능한지 Check! =COD payment is available Check!
                    if(gf_settle_cod(dg_sheet30, dg_sheet32) == 1){                     
                        /*gf_setRendererCombo(dg_sheet, dataField, evt.itemRenderer as ComboBox, oldVal);         
                        evt.target.itemchaging = false;*/                       
                        return false;
                    }

                    rowData.QUEST_AMT = quest_amt;
                    rowData.DO_FLAG = "20";
                    rowData.OK_DATE = $scope.sysdatetime;      
                }else if(newVal == "05"){
                    //=최초사용가능 적립금을 체크한다.
                    /*if(Number(parentDocument.gWindow.iValue.getValue("saveamt_first_useamt")) > Number(parentDocument.gWindow.iValue.getValue("tot_saveamt"))){
                        BaseService.alertWarning(Main.gf_getMessageParm("msg","msg.cannot_first_saveamt",parentDocument.gWindow.iValue.getValue("saveamt_first_useamt")));                         
                        gf_setRendererCombo(dg_sheet, dataField, evt.itemRenderer as ComboBox, oldVal);        
                        evt.target.itemchaging = false;                        
                        return;                         
                    }*/        
                    //= 가용적립금/반품진행 적립금
                    var usable_saveamt = Number($scope.popupParam.iValue.saveamt);
                    var return_saveamt = Number($scope.popupParam.iValue.return_saveamt);        
                    //= 실제 주문접수 가능한 적립금은 반품진행적립금을 뺀다.
                    var saveamt = BaseService.modAmt(usable_saveamt - return_saveamt);
                    if(saveamt <= 0){ //= 사용가능한 적립금이 없다.
                        BaseService.alertWarning("No payable saving amount.");                         
                        /*gf_setRendererCombo(dg_sheet, dataField, evt.itemRenderer as ComboBox, oldVal);        
                        evt.target.itemchaging = false;*/                    
                        return false;
                    }        
                    //= 기존에 선택한 적립금액만큼 뺀다.
                    for ( i=0; i < $scope.dg_sheet.length; i++) {
                        var settle_gb = $scope.dg_sheet[i].SETTLE_GB;
                        if(settle_gb == "05"){
                            if($scope.dg_sheet[i].cwareAction == "I" || $scope.dg_sheet[i].cwareAction == "IM"){
                                var temp_amt = Number($scope.dg_sheet[i].QUEST_AMT);
                                saveamt = saveamt - temp_amt;
                            }
                        }
                    }
                    saveamt = BaseService.modAmt(saveamt, 3, $scope.FINAL_D_POINT);

                    if(saveamt <= 0){
                        BaseService.alertWarning("Demand price is big. Item : Point");
                        /*gf_setRendererCombo(dg_sheet, dataField, evt.itemRenderer as ComboBox, oldVal);              
                        evt.target.itemchaging = false;*/                  
                        return false;                                                     
                    }else if ( saveamt < quest_amt){
                        rowData.QUEST_AMT = saveamt;
                        rowData.RECEIPT_AMT = saveamt;
                    }else{
                        rowData.QUEST_AMT = quest_amt;
                        rowData.RECEIPT_AMT = quest_amt;           
                    }

                    rowData.DO_FLAG = 20;
                    rowData.OK_DATE = $scope.sysdatetime;

                    rowData.END_YN = "1";
                    rowData.RECEIPT_DATE =  $scope.sysdatetime;  
                }else if(newVal == "06"){
                    //= 현재 사용가능한 예치금
                    var use_pb_deposit = Number($scope.popupParam.iValue.deposit);
                    if( use_pb_deposit <=0 ){ //= 사용가능한 예치금이 없다.
                        BaseService.alertWarning("No payable deposit.");
                        /*gf_setRendererCombo(dg_sheet, dataField, evt.itemRenderer as ComboBox, oldVal);    
                        evt.target.itemchaging = false;*/
                        return false;
                    }        
                    //= 기존에 선택한 예치금액만큼 뺀다.
                    for ( i=0; i < $scope.dg_sheet.length; i++) {
                        settle_gb = $scope.dg_sheet[i].SETTLE_GB;
                        if(settle_gb == "06"){
                            if($scope.dg_sheet[i].cwareAction == "I" || $scope.dg_sheet[i].cwareAction == "IM"){
                                temp_amt = Number($scope.dg_sheet[i].QUEST_AMT);
                                use_pb_deposit = use_pb_deposit - temp_amt;
                            }
                        }
                    }
                    use_pb_deposit = BaseService.modAmt(use_pb_deposit, 3, $scope.FINAL_D_POINT);        
                    if(use_pb_deposit <= 0){
                        BaseService.alertWarning("Demand price is big. Item : Deposit");
                        /*gf_setRendererCombo(dg_sheet, dataField, evt.itemRenderer as ComboBox, oldVal);    
                        evt.target.itemchaging = false;*/
                        return false;                           
                    }else if(use_pb_deposit < quest_amt){
                        rowData.QUEST_AMT = use_pb_deposit;
                        rowData.RECEIPT_AMT = use_pb_deposit;
                    }else{
                        rowData.QUEST_AMT = quest_amt;
                        rowData.RECEIPT_AMT = quest_amt;                           
                    }                          
                    rowData.DO_FLAG = 20;
                    rowData.OK_DATE = $scope.sysdatetime;
                    rowData.RECEIPT_DATE =  $scope.sysdatetime;          
                }else if(newVal == "08"){
                    rowData.QUEST_AMT = quest_amt;
                    rowData.DO_FLAG = 20;
                    rowData.OK_DATE = $scope.sysdatetime;
                    rowData.RECEIPT_AMT = 0;
                    rowData.END_YN = 1;
                    rowData.RECEIPT_DATE =  $scope.sysdatetime;  
                    rowData.QUEST_AMT = "0";
                }
                
                if( newVal != '01') rowData.DO_FLAG = settleInfo.SETTLE_DO_FLAG;
                
                //= 결제 수단을 선택을 하면 focus 이동 처리 해야한다.=If you move the focus to select the method of payment should be treated.
                        
                if(newVal == '01') {
                    /*evt.target.itemchaging = false;*/   
                } else if(newVal == '02' || newVal == '09' ) {
                    $scope.receiptBankInfoParam.settle_flag = newVal;
                    setTimeout(function(){
                        $scope.$broadcast('receipt_change_bank_info_picker.open'); 
                    },100);
                }else{
                    /*dg_sheet.uf_setColumn("QUEST_AMT");  
                    evt.target.itemchaging = false;*/     
                } 
                
                return true;
            }     
            
            $scope.resultPopSheet = function(value, evt){
                
                if(evt == 'ORDER_OUT_CHECK'){
                    
                    $scope.order_out = value.ORDER_OUT_CHECK;
                
                }else if(evt == 'RECEIPTS_NO'){
                    
                    if(value.RECEIPTS_NO == ''){
                        BaseService.alertWarning("Cannot create payment No.");
                    }else{
                        BaseService.uf_SetItem($scope.dg_sheet, value.RECEIPTS_NO_CURROW, 'RECEIPTS_NO', value.RECEIPTS_NO, false);
                    }
                
                }
                
            }
            
            $scope.renderTableDgSheetChangePopop = function(dataSource){
                if(dataSource != null){
                    
                    $scope.table_dg_sheet_receipt_change_popup = $('#table_dg_sheet_change_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                        	"data": "DO_FLAG",
                            "render": function(data, type, row){
                                var doFlag = "";
                                var selectDoFlag = getJSONObjects($scope.popupParam.SHEET40_C_DO_FLAG, 'code', row.DO_FLAG);
                                if(selectDoFlag != null && selectDoFlag.length > 0){
                                    doFlag = selectDoFlag[0].codeName;
                                }
                                return doFlag;
                            }
                        }, {
                            "data": "CANCEL_YN",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "1") ? true : false;
                                var disabled = true;
                                if(!row.cwareAction || (row.cwareAction && row.cwareAction == "U")){
                                    disabled = false;
                                }
                                
                                if(!disabled){
                                    disabled = !$scope.editCheckColumn(row, 'CANCEL_YN');
                                }
                                
                                return '<table-checkbox check-id="'+ row.rowId +'" checked="'+ checked +'" disabled="'+ disabled +'" action-change="cancelSelectChangeClick(event, checked)"></table-checkbox>';
                            }
                        }, {
                            "data": "CANCEL_CODE",
                            "class" : "col-CANCEL_CODE editable select-in-row no-tooltip",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.popupParam.SHEET40_C_CANCEL_CODE, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                        }, {
                            "data": "SETTLE_GB",
                            "class": "col-SETTLE_GB editable select-in-row no-tooltip",
                            "render": function(data, type, row){
                                var settleType = "";
                                var selectSettleType = getJSONObjects($scope.popupParam.SHEET40_C_SETTLE_GB, 'code', row.SETTLE_GB);
                                if(selectSettleType != null && selectSettleType.length > 0){
                                    settleType = selectSettleType[0].codeName;
                                }
                                return settleType;
                            }
                        }, {
                            "data": "CARD_BANK_CODE",
                            "class": "text-center"
                        }, {
                            "data": "BANK_NAME",
                            "class": "col-BANK_NAME editable text-center"
                        }, {
                            "data": "CARD_NO",
                        }, {
                            "data": "SERV_CODE",
                        }, {
                            "data": "DEPOSITOR",
                            "class": "col-DEPOSITOR editable",
                        }, {
                            "data": "QUEST_AMT",
                            "class": "col-QUEST_AMT editable text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(row.QUEST_AMT, 2, '.', ',');
                            }
                        }, {
                            "data": "VALID_DATE",
                        }, {
                            "data": "OK_NO"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false,
                        "dom": 'Zlfrtip',
                        "colResize": {
                            "tableWidthFixed": false
                        }
                    });
                    
                    BaseService.generateRowNumber($scope.table_dg_sheet_receipt_change_popup, 0);
                    BaseService.generateTooltip($scope.table_dg_sheet_receipt_change_popup);
                    
                    setTimeout(function(){
                        $scope.table_dg_sheet_receipt_change_popup.off('click', 'tbody tr');
                        $scope.table_dg_sheet_receipt_change_popup.on('click', 'tbody tr', function(e) {
                            $.each(this.parentElement.childNodes, function(index, elem){
                                $(elem).removeClass("row-focus");
                            });
                            $(this).addClass("row-focus");
                            $scope.currentRowDgSheet = this;

                            var aData = $scope.table_dg_sheet_receipt_change_popup.api().row(this).data();
                            if(aData != null){
                                $scope.selectedRow = aData;
                            }
                        });
                        
                        BaseService.activateEditTable($scope.table_dg_sheet_receipt_change_popup, 'CANCEL_CODE', {
                            "data": angular.toJson($scope.cancelType),
                            "type": "select",
                            "selectId":"receiptsChangeCancelCode",
                            "angularScope": $scope,
                            "angularValidate": function(value, settings) {
                                var aData = $scope.table_dg_sheet_receipt_change_popup.api().row($scope.currentRowDgSheet).data();
                                
                                
                                return $scope.editCheckColumn(aData, 'CANCEL_CODE');
                            },
                            "callback": function(value, settings, selectedValue) {
                                $(this).html($scope.cancelType[value]);

                                var aData = $scope.table_dg_sheet_receipt_change_popup.api().row(this.parentElement).data();
                                if(aData != null){
                                    aData.CANCEL_CODE = selectedValue;
                                }
                            }
                        });
                        
                        BaseService.activateEditTable($scope.table_dg_sheet_receipt_change_popup, 'SETTLE_GB', {
                            "data": angular.toJson($scope.popupParam.settleGB),
                            "type": "select",
                            "selectId":"receiptsChangeSettleGB",
                            "angularScope": $scope,
                            "angularValidate": function(value, settings) {
                                var aData = $scope.table_dg_sheet_receipt_change_popup.api().row($scope.currentRowDgSheet).data();
                                
                                if(!aData.cwareAction || (aData.cwareAction && aData.cwareAction == "U")){
                                    return false;
                                }
                                
                                $scope.settleGBOld = aData.SETTLE_GB;
                                //return $scope.editCheckColumn(aData, 'SETTLE_GB');
                                return $scope.editCheckColumn(aData, 'SETTLE_GB');
                            },
                            "callback": function(value, settings, selectedValue) {

                                var aData = $scope.table_dg_sheet_receipt_change_popup.api().row($scope.currentRowDgSheet).data();
                                
                                /*if($scope.ue_itemRenderChanged(aData, selectedValue, $scope.settleGBOld)){
                                    if(aData != null){
                                        aData.SETTLE_GB = selectedValue;
                                    }
                                }else {
                                    aData.SETTLE_GB = $scope.settleGBOld;
                                }*/
                                
                                $scope.renderTableDgSheetChangePopop($scope.dg_sheet);
                                BaseService.focusTableRow($scope.table_dg_sheet_receipt_change_popup, -1);
                            }
                        });
                        
                        BaseService.activateEditTable($scope.table_dg_sheet_receipt_change_popup, 'BANK_NAME', {
                            "type": "inputPicker",
                            "typeClassName": "focus-border text-center",
                            "pickerId": "receipt_change_bank_info_picker",
                            "pickerInputClassName": "text-center",
                            "angularScope": $scope,
                            "angularValidate": function(value, settings) {
                                
                                var aData = $scope.table_dg_sheet_receipt_change_popup.api().row($scope.currentRowDgSheet).data();
                                
                                if(!aData.cwareAction || (aData.cwareAction && aData.cwareAction == "U")){
                                    return false;
                                }
                                
                                $scope.receiptBankInfoParam.settle_flag = aData.SETTLE_GB;
                                
                                if($scope.receiptBankInfoParam != null && $scope.receiptBankInfoParam.settle_flag != null){
                                    switch($scope.receiptBankInfoParam.settle_flag){
                                        case "02": return true; break;
                                        case "09": return true; break;
                                    }
                                }
                                return false;
                            }
                        });
                        
                        BaseService.activateEditTable($scope.table_dg_sheet_receipt_change_popup, 'DEPOSITOR', {
                            "angularValidate": function(value, settings) {
                                var aData = $scope.table_dg_sheet_receipt_change_popup.api().row($scope.currentRowDgSheet).data();
                                
                                if(!aData.cwareAction || (aData.cwareAction && aData.cwareAction == "U")){
                                    return false;
                                }
                                return true;
                            },
                            "callback": function (value, settings){
                                var aData = $scope.table_dg_sheet_receipt_change_popup.api().row($scope.currentRowDgSheet).data();
                                
                                aData.DEPOSITOR = value;

                            }
                        });
                        
                        BaseService.activateEditTable($scope.table_dg_sheet_receipt_change_popup, 'QUEST_AMT', {
                            "maxLength": 16,
                            "typeClassName": "text-right",
                            "inputFormat": "number",
                            "select": true,
                            "angularValidate": function(value, settings) {
                                var aData = $scope.table_dg_sheet_receipt_change_popup.api().row($scope.currentRowDgSheet).data();
                                
                                $scope.originQuestAmt = (!$scope.originQuestAmt)?BaseService.replaceAll(aData.QUEST_AMT,",",""):$scope.originQuestAmt;
                                $scope.oldQuestAmt = BaseService.replaceAll(aData.QUEST_AMT,",","");
                                
                                if(!aData.cwareAction || (aData.cwareAction && aData.cwareAction == "U")){
                                    return false;
                                }
                                return true;
                            },
                            "callback": function (value, settings){
                                var aData = $scope.table_dg_sheet_receipt_change_popup.api().row($scope.currentRowDgSheet).data();
                                
                                //validate quest_amt
                                if($scope.validateQuestAmt(BaseService.replaceAll(value,",",""), BaseService.replaceAll($scope.originQuestAmt,",",""))){
                                    aData.QUEST_AMT = value;
                                }else{
                                    aData.QUEST_AMT = $scope.oldQuestAmt;
                                }
                                
                                $scope.table_dg_sheet_receipt_change_popup.api()
                                        .cell($scope.currentRowDgSheet.childNodes[10])
                                        .data(BaseService.formatDecimal(aData.QUEST_AMT, 2, '.', ','))
                                        .draw();

                            }
                        });
                    }, 50);
                }
            };
            
            $scope.$on('receiptsChangeSettleGB.change', function(e, selectValue){
                
                var aData = $scope.table_dg_sheet_receipt_change_popup.api().row($scope.currentRowDgSheet).data();
                                
                if($scope.ue_itemRenderChanged(aData, selectValue, $scope.settleGBOld)){
                    if(aData != null){
                        aData.SETTLE_GB = selectValue;
                    }
                }else {
                    aData.SETTLE_GB = $scope.settleGBOld;
                }
                
                $scope.renderTableDgSheetChangePopop($scope.dg_sheet);
                BaseService.focusTableRow($scope.table_dg_sheet_receipt_change_popup, -1);
                
            });
            
            $scope.$on('receiptsChangeCancelCode.change', function(e, selectValue){
                
                var aData = $scope.table_dg_sheet_receipt_change_popup.api().row($scope.currentRowDgSheet).data();
                
                aData.CANCEL_CODE = selectValue;
                
                $scope.renderTableDgSheetChangePopop($scope.dg_sheet);
                          
                BaseService.focusTableRow($scope.table_dg_sheet_receipt_change_popup, -1);
                
            });
            
            $scope.cancelSelectChangeClick = function(e, checked){
                var rowData = $scope.table_dg_sheet_receipt_change_popup.api().row($scope.currentRowDgSheet).data();
                if(rowData != null){
                    var newValue = (checked) ? 1 : 0;
                    rowData.CANCEL_YN = newValue;
                    
                    if(checked){
                        //set cancel reason to
                        rowData.CANCEL_CODE = '203';
                    }else{
                        rowData.CANCEL_CODE = '000';
                    }
                    
                    rowData.cwareAction = 'U';
                    //rowData.cwareAction = 'U';
                }
                $scope.renderTableDgSheetChangePopop($scope.dg_sheet);
            };
            
            $scope.editCheckColumn = function(item, dataField) {
                if(item.SETTLE_GB == "05" && (item.cwareAction == null || item.cwareAction == "")){
                    return false;
                }               
                var curStatus = item.cwareAction;   
                //x1.text = curStatus;
                if(curStatus == "I" || curStatus == "IM"){
                	var settle_gb = item.SETTLE_GB;
                    if(dataField == 'CANCEL_YN' || dataField == 'CANCEL_CODE'){
                        return false;
                    }else if(dataField == 'SETTLE_GB'){
                    	if(settle_gb == "02" || settle_gb == "09" ){
                    		return true;
                    	}else{
	                        return false;
	                     }
                    }       
                    if(dataField != 'CANCEL_YN' && dataField  != 'CANCEL_CODE'){
                              
                        if(settle_gb == "01" ){
                            if(dataField != 'RECEIPT_PLAN_DATE'){
                                return true;
                            }
                        }else if(settle_gb == "02" || settle_gb == "09" || settle_gb == "10"){
                            if(dataField != 'CARD_NO' && dataField != 'CVV' &&
                               dataField != 'VALID_DATE' && dataField != 'PAY_MONTH' ){
                               return true;
                            }
                        }else if(settle_gb == "03" || settle_gb == "04" || settle_gb == "05" || settle_gb == "06"){
                            if(dataField == 'DEPOSITOR' || dataField == 'QUEST_AMT' ){
                                return true;
                            }
                        }
                    }       
                    if(dataField == 'PAY_MONTH'){   
                        if(item.SETTLE_GB == "01" && item.CANCEL_YN == "0" ){                   
                            if(item.CARD_ALLOT_MONTH == ""){
                                var ctrlArry = [];
                                ctrlArry.push({"command":"CARD_ALLOT_MONTH",
                                               "parentValue1":item.CARD_BANK_CODE,
                                               "insert_id":Main.gUserId});  
                                Main.gConnect.callFunction(CwareConst.PKG_ACTION_PATH + "custcenter.order.OrderInput.retrieveSheet", resultPopSheet, ctrlArry);    
                                return true;                        
                            }
                            return true;
                        }
                    }       
                }else{      
                    if( ( item.SETTLE_GB != "01"  && item.END_YN == "1" ) || (item.SETTLE_GB == "01" && item.DO_FLAG =='20') || item.CANCEL_YN_HIDDEN == "1"){
                        return false;
                    }else{
                        if(dataField == 'CANCEL_YN' || dataField == 'CANCEL_CODE' ){
                        	var settleInfo = $scope.gf_getSettleFlagInfo_popup($scope.popupParam.RESULT_TSETTLEINFO, item.SETTLE_GB);
                        	//x1.text = "4";//Number(settleInfo.CHANGE_SETTLE_RECEIPTS).toString();
                        	if(Number(settleInfo.CHANGE_SETTLE_RECEIPTS) <= Number(item.DO_FLAG) ){
                                return true;
                            }
                        }
                    }
                }               
                return false; //수정 불가능
            }
            
            $scope.wf_click_insert = function(){
                
                var addRow           = 0;
                var org_quest_amt = Number(BaseService.replaceAll($scope.em_quest_amt,",",""));
                var cur_quest_amt = $scope.wf_getSumQuestAmt();
                var remain_amt    = BaseService.modAmt(org_quest_amt - cur_quest_amt);    
                var settleInfo = $scope.gf_getSettleFlagInfo_popup($scope.popupParam.RESULT_TSETTLEINFO, '01');
                 
                if(remain_amt <= 0){
                    BaseService.alertWarning("No processable payment amount found.");
                    return;
                }       
                var checkCnt = 0;
                for( var i = 0; i < $scope.dg_sheet.length; i++ ) {
                    if($scope.dg_sheet[i].CANCEL_YN != "1" && Number($scope.dg_sheet[i].SETTLE_GB) < 50  ){
                        checkCnt++;
                    }
                }       
                if(checkCnt > 2){
                    BaseService.alertWarning("Up to 2 payment methods are possible.");
                    return;
                }       

                $scope.dg_sheet.push({});
                addRow = $scope.dg_sheet.length -1;

                checkCnt = 0;
                for(  i = 0; i < $scope.dg_sheet.length; i++ ) {
                    if($scope.dg_sheet[i].CANCEL_YN != "1" &&
                       $scope.dg_sheet[i].SETTLE_GB == '01'  ){
                        checkCnt++;
                    }
                }               
                
                BaseService.uf_SetItem($scope.dg_sheet, addRow, "CANCEL_YN", "0", false);
                BaseService.uf_SetItem($scope.dg_sheet, addRow, "CANCEL_CODE", "000", false);  
                BaseService.uf_SetItem($scope.dg_sheet, addRow, "BANK_NAME", "", false);
                BaseService.uf_SetItem($scope.dg_sheet, addRow, "CARD_BANK_CODE", "", false);
                BaseService.uf_SetItem($scope.dg_sheet, addRow, "CARD_NO", "", false);
                BaseService.uf_SetItem($scope.dg_sheet, addRow, "SERV_CODE", "", false);
                BaseService.uf_SetItem($scope.dg_sheet, addRow, "VALID_DATE", "", false);
                
                BaseService.uf_SetItem($scope.dg_sheet, addRow, "rowId", chance.string({length: 18}), false);
                BaseService.uf_SetItem($scope.dg_sheet, addRow, "cwareAction", "I", false);
                
                var item_quest_amt = Number($scope.popupParam.iValue.item_quest_amt);
                var shpfee_cost    = Number(BaseService.replaceAll($scope.popupParam.dg_sheet.ship_cost, "," ,""));      
                var quest_amt      = Math.abs(BaseService.modAmt(item_quest_amt + shpfee_cost - cur_quest_amt));     

				//Check cancel 09 
				if($scope.dg_sheet[addRow-1].SETTLE_GB == '09'){
                    
					BaseService.uf_SetItem($scope.dg_sheet, addRow, "SETTLE_GB", "09", false);   
                    
				}else if ($scope.dg_sheet[addRow-1].SETTLE_GB == '10'){
                    
                	BaseService.uf_SetItem($scope.dg_sheet, addRow, "SETTLE_GB", "10", false);  
                    
                }else if ($scope.dg_sheet[addRow-1].SETTLE_GB == '03'){
                    
                	BaseService.uf_SetItem($scope.dg_sheet, addRow, "SETTLE_GB", "04", false);  
                    
                }else if ($scope.dg_sheet[addRow-1].SETTLE_GB == '04'){
                    
                	BaseService.uf_SetItem($scope.dg_sheet, addRow, "SETTLE_GB", "03", false);   
                    
                }else{
                    
                	BaseService.uf_SetItem($scope.dg_sheet, addRow, "SETTLE_GB", "02", false);
                    
                }      
                
                BaseService.uf_SetItem($scope.dg_sheet, addRow, "DEPOSITOR", $scope.popupParam.dg_sheet.CUST_NAME, false);        
                BaseService.uf_SetItem($scope.dg_sheet, addRow, "QUEST_AMT", quest_amt, false);
                BaseService.uf_SetItem($scope.dg_sheet, addRow, "DO_FLAG", '10', false);
                BaseService.uf_SetItem($scope.dg_sheet, addRow, "PAY_MONTH", "0", false);
                
                if ($scope.dg_sheet[addRow].SETTLE_GB == '09' && ($scope.dg_sheet[addRow].CARD_BANK_CODE != '904' || $scope.dg_sheet[addRow].CARD_BANK_CODE != '004'))
                	
                    BaseService.uf_SetItem($scope.dg_sheet, addRow, "RECEIPT_PLAN_DATE", $scope.sysdate_slash, false);           

                if(checkCnt > 0){
                
                    if( Number($scope.iValue.saveamt < quest_amt)){
                	    quest_amt = Number($scope.iValue.saveamt);
                	}
                
                	settleInfo = $scope.gf_getSettleFlagInfo_popup($scope.iConfig.TSETTLEINFO, '05'); 
                    BaseService.uf_SetItem($scope.dg_sheet, addRow, "SETTLE_GB", "05", false); 	
                    BaseService.uf_SetItem($scope.dg_sheet, addRow, "DO_FLAG",   settleInfo.SETTLE_DO_FLAG, false);
                    BaseService.uf_SetItem($scope.dg_sheet, addRow, "QUEST_AMT", quest_amt, false);
                } 
                    
                //= 입금번호 sequence 부여
                var params = {};           
                params.RECEIPTS_NO_CURROW = String(addRow);          
//              Main.gConnect.callFunction(CwareConst.PKG_ACTION_PATH + "custcenter.order.OrderClaim.getReceptNo", resultPopSheet, param);
                BaseService.getPopupData("popup/get-recept-no", params).then(
                    function(response){
                        $scope.resultPopSheet(response.data.result, 'RECEIPTS_NO');
                        
                        $scope.renderTableDgSheetChangePopop($scope.dg_sheet); 
                        
                        BaseService.focusTableRow($scope.table_dg_sheet_receipt_change_popup, addRow);
                    },
                    function(response){
                    }
                );
                  
            };
            
            $scope.wf_getSumQuestAmt = function(){
                var sumQuestAmt = 0;
                for( var i = 0; i < $scope.dg_sheet.length; i++ ) {
                    if($scope.dg_sheet[i].CANCEL_YN != "1"){
                        var questAmt = BaseService.replaceAll($scope.dg_sheet[i].QUEST_AMT, ",", "");
                        sumQuestAmt = sumQuestAmt + Number(questAmt);
                    }
                }
                sumQuestAmt = BaseService.modAmt(sumQuestAmt);        
                return sumQuestAmt;
            } 
            
            $scope.gf_getSettleFlagInfo_popup = function(argSettle, argSettleFlag){
                for(var i = 0 ; i < argSettle.length; i++){
                    if(argSettle[i].SETTLE_FLAG == argSettleFlag){            	
                        return argSettle[i];
                        break;
                    }
                }
                return null;
            }

            
            $scope.wf_click_delete = function(){
                
                var curRow = $scope.selectedRow;
                if(!curRow){
                    return;
                }   
                //= 신규 Row
                if($scope.selectedRow.cwareAction == "I" || $scope.selectedRow.cwareAction == "IM" ){
                    
                    swal({ 
                            title: "Question ?",
                            text: "Delete ?",
                            type: "info",
                            showRejectButton: true,
                            confirmButtonText: "Yes"
                        }, function(button){
                            if(button == 'confirm'){
                                var ok_no = $scope.selectedRow.OK_NO;
                                _.remove($scope.dg_sheet, { "rowId": $scope.selectedRow.rowId });
                                $scope.renderTableDgSheetChangePopop($scope.dg_sheet);   
                                BaseService.focusTableRow($scope.table_dg_sheet_receipt_change_popup, -1);
                            }
                        });
                    
                    
                //= 기존에 있던 Row는 삭제불가!
                }else{
                    BaseService.alertWarning("Cannot delete Payment List");                 
                    return;
                }
            };
            
            $scope.wf_click_save = function(){
                
                if ( $scope.uf_modCheck() == false ) {
                    BaseService.alertWarning("No details found for [Save]");
                    return false;
                }        
                //= default 카드  지불 중복 방지 처리 = duplication default card payment processing
                for(var i=0; i < $scope.dg_sheet.length; i++){
                	if($scope.dg_sheet[i].cwareAction == "I" || $scope.dg_sheet[i].cwareAction == "IM"
                		|| $scope.dg_sheet[i].CANCEL_YN == "0"){
                		for(var j=0; j < $scope.dg_sheet.length; j++){
                			if($scope.dg_sheet[j].cwareAction == "I" || $scope.dg_sheet[j].cwareAction == "IM"){
                				if(i != j && $scope.dg_sheet[i].SETTLE_GB == $scope.dg_sheet[j].SETTLE_GB){
                					BaseService.alertWarning(Main.gf_getMessage('msg', 'msg.already_input_pay'), dg_sheet, j, dg_sheet.getColumnIndex('SETTLE_GB'));
                					return false;
                				}
                			}
                		}
                	}
                }
                //= 1. 청구금액 비교
                var org_quest_amt = Number(BaseService.replaceAll($scope.em_quest_amt, ",", ""));
                var sum_quest_amt = Number($scope.wf_getSumQuestAmt());
                if(org_quest_amt != sum_quest_amt){
                    BaseService.alertWarning("Price of the Item does not match with the payment amount.");
                    return false;
                }       
                //= 2. 필수입력사항 Check
                if($scope.wf_save_receipts_check($scope.popupParam.dg_sheet, $scope.popupParam.dg_sheet.ORDER_NO) == -1){
                    return false;
                }           

                //= 3. 진행단계 Check
                var new_do_flag = $scope.gf_save_get_procstate($scope.popupParam.dg_sheet32, $scope.dg_sheet);
                if($scope.i_do_flag == "20" && new_do_flag == "10"){
                    BaseService.alertWarning("Non-approved payment found. Verify payment details again.");
                    return false;
                }               
                var dtArr = null;
                var savedtArr = [];
                //= 3. 상품의 진행단계 Update//Update the progress of the product phase
                if($scope.i_do_flag == "10" && new_do_flag == "20"){
                    dtArr = angular.copy($scope.popupParam.dg_sheet32);
                    for( i = 0 ; i<dtArr.length;i++){
                        if(dtArr[i].ORDER_GB != "10") continue;
//                        if(Number(dtArr[i].SYSLAST) < 1) continue;
                        dtArr[i].cwareAction = "U";
                        dtArr[i].DO_FLAG_ORG = $scope.i_do_flag;
//                        dtArr[i].DO_FLAG     = new_do_flag;
                        dtArr[i].DO_FLAG = $scope.i_do_flag;
                        savedtArr.push(dtArr[i]); 
                    }
                }
                
//              Check pay month
                /*var i2 = $scope.dg_sheet.length-1;
				if (Number($scope.dg_sheet[i2].PAY_MONTH) <= 0 && $scope.dg_sheet[i2].CANCEL_YN == "0" && $scope.dg_sheet[i2].SETTLE_GB == "09"){
					BaseService.alertWarning("Did not obtain installment period (months) per card.");
                    return false;
				} */       
                
                /*dg_sheet.uf_setModifyBuffer();//++++                
                Main.gConnect.callFunction(CwareConst.PKG_ACTION_PATH + "custcenter.order.OrderClaim.f_save", resultSave,
                    parentDocument.gWindow.iConfig.toArray(),
                    parentDocument.gWindow.iValue.toArray(),
                    new Array(CwareUtil.componentGetItem(parentDocument.gWindow.master)),
                    null,
                    null,//
                    savedtArr,//
                    null,
                    null,
                    dg_sheet.modifyBuffer.source,//
                    null);*/
                
                var argiConfig = [$scope.popupParam.iConfig];
                var argiValue = [$scope.popupParam.iValue];
                var argmaster = [$scope.popupParam.dg_sheet];
                
                
                var data = {"argiConfig" : argiConfig, 
                        "argiValue" : argiValue, 
                        "argmaster" : argmaster,
                        "argallsheet30" : null,
                        "argsheet30" : null,
                        "argsheet32" : savedtArr,
                        "argsheet34" : null,
                        "argsheet36" : null,
                        "argsheet40" : $scope.dg_sheet,
                        "argsheet42" : null};
	                    
                BaseService.save(data, null, "f-save").then(
                    function(response){
                        sweetAlert("Success", "Processing is complete.", "success");
                        
                        var data = {
                            order_date: '',
                            order_seq: '',
                            order_no: $scope.popupParam.iValue.order_no
                        }
                        $scope.$emit($scope.popupId + ".confirm", angular.copy(data));
                        $('#' + $scope.popupId).modal('hide');
                    },
                    function(response){
                        sweetAlert("Error", response.message, "error");
                    }
                );
            
                return true;
                
            }
            
            $scope.wf_save_receipts_check = function(sheet40, argOrder_no){
                var repay_pb_amt = 0;
                var settle_gb    = "";
                //= 카드 할부개월수와 상품 무이자개월수에 따른 Check!               
        
                for(var i = 0; i < sheet40.length; i++){
                    if(sheet40[i].cwareAction != null && sheet40[i].cwareAction != ""){
                        settle_gb         = sheet40[i].SETTLE_GB;                
                        var card_bank_code    = sheet40[i].CARD_BANK_CODE;
                        var bank_seq          = sheet40[i].BANK_SEQ;
                        var card_bank_no      = sheet40[i].CARD_NO;
                        var cvv               = sheet40[i].CVV;
                        var depositor         = sheet40[i].DEPOSITOR;
                        var valid_date        = sheet40[i].VALID_DATE;
                        var pay_month         = sheet40[i].PAY_MONTH;
                        var receipt_plan_date = sheet40[i].RECEIPT_PLAN_DATE;

                        if(settle_gb == ""){
                            BaseService.alertWarning("Enter category. Category:Payment code");
                            return -1;
                        }
                        
                        if(settle_gb == "01" || settle_gb == "02" || settle_gb == "52" || settle_gb == "53"){   
                            if( card_bank_code == ""){
                                BaseService.alertWarning("Enter category. Card/Bank");
//                                BaseService.alertWarning(Main.gf_getMessageCross("msg", "msg.input_check", "word", "word.card_bank"),sheet40,i,sheet40.getColumnIndex("BANK_NAME"));
                                return -1;
                            }                   
                            if(card_bank_no == ""){
                                BaseService.alertWarning("Enter category. Card/Account No.");
//                                BaseService.alertWarning(Main.gf_getMessageCross("msg", "msg.input_check", "word","word.card_bank_code"),sheet40,i,sheet40.getColumnIndex("CARD_NO"));
                                return -1;
                            }
                            if(depositor == ""){
                                BaseService.alertWarning("Enter category. Owner/Payer");
//                                BaseService.alertWarning(Main.gf_getMessageCross("msg", "msg.input_check", "word", "word.owner_receipts1"),sheet40,i,sheet40.getColumnIndex("DEPOSITOR"));
                                return -1;
                            }                            
                        }                                           
                        if(settle_gb == "01"){
//                          if(cvv == ""){
//                              BaseService.alertWarning(Main.gf_getMessageCross("msg", "msg.input_check", "word", "word.cvv"));
//                              return -1;
//                          }
                            if(valid_date == ""){
                                BaseService.alertWarning("Enter category. Valid date");
//                                BaseService.alertWarning(Main.gf_getMessageCross("msg", "msg.input_check", "word", "word.validity_term"),sheet40,i,sheet40.getColumnIndex("VALID_DATE"));
                                return -1;
                            }else if(String(valid_date).length != 4){
                                BaseService.alertWarning("Entry format of expiry date is mmyy.");
//                                BaseService.alertWarning(Main.gf_getMessage("msg","msg.valid_date_format"),sheet40,i,sheet40.getColumnIndex("VALID_DATE"));
                                return -1;
                            }else if(valid_date.length == 4){
                                if(valid_date == 0){
                                    BaseService.alertWarning("Enter only numbers");
//                                    BaseService.alertWarning(Main.gf_getMessage("msg","msg.require_only_figure_a"),sheet40,i,sheet40.getColumnIndex("VALID_DATE"));
                                    return -1;
                                }
                                if( "20" + String(valid_date).substring(2,4) < String(argOrder_no).substring(0,4)){
                                    BaseService.alertWarning("Year in expiry date must be greater than or same as the proper year. ( yy >");
//                                    BaseService.alertWarning(Main.gf_getMessage("msg","msg.valid_date_wrong_year"),sheet40,i,sheet40.getColumnIndex("VALID_DATE"));
                                    return -1;
                                }
                            }
                            if( pay_month == ""){
                                $scope.uf_SetItem(sheet40, i,"PAY_MONTH","0", false);    
                            }                     
                        }else if (settle_gb == "02"){
                            
                        }else if(settle_gb == "03" || settle_gb == "04" || settle_gb == "05" || settle_gb == "06"){
                            //= COD 적립금 예치금
                            if(depositor == "") {
                                BaseService.alertWarning("Enter category. Owner/Payer");
//                                BaseService.alertWarning(Main.gf_getMessageCross("msg", "msg.input_check", "word", "word.owner_receipts1"),sheet40,i,sheet40.getColumnIndex("DEPOSITOR"));
                                return -1;
                            }
                        }
                    }
                }
                return 0;
            }
            
            $scope.wf_click_cancel = function(){
                
                if($scope.uf_modCheck()){
                    swal({ 
                        title: "Question ?",
                        text: "Details changed. Do you want to save?",
                        type: "info",
                        showCancelButton: true,
                        showRejectButton: true,
                        confirmButtonText: "Yes"
                    }, function(button){
                        if(button == 'confirm'){
                            $scope.wf_click_save();
                            $('#' + $scope.popupId).modal('hide');   
                        }else if(button == 'reject'){
                            $('#' + $scope.popupId).modal('hide');   
                        }else if(button == 'cancel'){
                            
                        }
                    });
                }
                
            };
            
            $scope.uf_modCheck = function(){
            	var chk = 0;      
                for(var i = 0; i < $scope.dg_sheet.length; i++){
                	if($scope.dg_sheet[i].CANCEL_YN == "1"){
                		chk++;
                	}
                }       
                if ( chk == 0 ) return false; 
//                if ( !dg_sheet.uf_setModifyBuffer() ) return false; 
                return true;
            }
            
            $scope.gf_save_get_procstate = function(sheet32, sheet40) {
                var findRow      = 0;
                var do_flag   = "10";
                var settle_gb = "";
                for (var i = 0; i < sheet40.length;i++) {
                    //= 지불구분 첫자리가 "0"이 아니면 제외
                    settle_gb = sheet40[i].SETTLE_GB.substring(0,1);

                    if(settle_gb != "0" && settle_gb != "1") continue;

                    //= 취소된 결제건은 제외
                    if (sheet40[i].CANCEL_YN == '1') continue;

                    //= 결제별 진행단계중 한 건이라도 "접수"단계가 있으면 "접수"로 RETURN
                    do_flag = sheet40[i].DO_FLAG;
                    if(do_flag == "10"){
                        return "10";
                    }else if(do_flag == "21"){
                        //= 승인이상인 주문건이 있으면 승인단계
                        for (var j=0; j < sheet40.length;j++) {
                            for ( j=1; j < sheet32.length; j++) {
                                if(Number(sheet32[j].DO_FLAG) > 20){
                                    findRow = j;
                                }
                            }
                        }
                        if(findRow > 0){
                            do_flag = "20";
                        }else{
                            do_flag = "10";
                        }
                    }else if( do_flag == "20" || Number(do_flag) >= 30){
                        do_flag = "20";
                    }else{
                        return "10";
                    }
                }
                return do_flag;
            }
            
            $scope.validateQuestAmt = function(newVal, oldVal){
                var quest_amt = Number(newVal);
                
                var selectedRow = $scope.table_dg_sheet_receipt_change_popup.api().row($scope.currentRowDgSheet).data();
                var selectedIndex = $scope.table_dg_sheet_receipt_change_popup.api().row($scope.currentRowDgSheet).index();
                
                var item_quest_amt    = Number($scope.popupParam.iValue.item_quest_amt);
                
                var receipt_quest_amt = $scope.wf_getSumQuestAmt();
                
                var settle_gb = selectedRow.SETTLE_GB;
                
                var cur_quest_amt = quest_amt;
                
                //= 환불이면 금액만큼 (-)로 계산
                if(settle_gb.substring(0,1) == "5"){
                    cur_quest_amt = BaseService.modAmt(cur_quest_amt * -1);
                }       
                //= 현재결제 가능한 금액
                var shpfee_cost  = Number(BaseService.replaceAll($scope.popupParam.dg_sheet.ship_cost,",",""));
                var pb_quest_amt = BaseService.modAmt(item_quest_amt + shpfee_cost - (receipt_quest_amt - Number(oldVal) + cur_quest_amt) );
                if(pb_quest_amt < 0){
                                                      
                    BaseService.alertWarning("Incorrect range entered. Category: amount request.");
                                                
                    return false;                         
                }       
                if(settle_gb == "01"){
                    var pay_month = Number(selectedRow.PAY_MONTH);
                    if(quest_amt < pay_month && pay_month > 0){
                        BaseService.uf_SetItem($scope.dg_sheet, selectedIndex, "PAY_MONTH", "0", false);
                        BaseService.uf_SetItem($scope.dg_sheet, selectedIndex, "NOREST_YN", "0", false);
                        BaseService.uf_SetItem($scope.dg_sheet, selectedIndex, "NOREST_AMT", "0", false);
                        BaseService.uf_SetItem($scope.dg_sheet, selectedIndex, "NOREST_RATE", "0", false);
                    }
                    dg_sheet.uf_SetItem(dg_sheet.selectedIndex, "DIVIDE_YN", "0", false);
                }else if(settle_gb == "05"){
                    if(gf_settle_bank(quest_amt) != 0){
                        return;
                    }       
                    var usable_saveamt = Number($scope.popupParam.iValue.saveamt);
                    var return_saveamt = Number($scope.popupParam.iValue.return_saveamt);       
                    //= 실제 주문접수 가능한 적립금은 반품진행적립금을 뺀다.
                    var saveamt = CwareUtil.modAmt(usable_saveamt - return_saveamt);
                    if(saveamt < quest_amt){ //= 사용가능한 적립금이 없다. 
                                                                
                        /*msgParamArr = [];
                        msgParamArr.push(Main.gf_getMessage("word","word.saveamt"));
                        msgParamArr.push("saveamt("+Main.gf_getMessage("word","word.useful_saveamt")+")");
                        Main.messageBox(Main.gf_getMessageParm("msg","msg.period_check_07",msgParamArr));                         
                        evt.target.itemchaging = false;*/                             
                        return false; 
                    }       
                }else if(settle_gb == "06"){
                    var use_pb_deposit = Number(parentDocument.gWindow.iValue.getValue("deposit"));
                    if( use_pb_deposit < quest_amt ){ //= 사용가능한 예치금이 없다.
                                             
                        /*msgParamArr = [];
                        msgParamArr.push(Main.gf_getMessage("word","word.deposit"));
                        msgParamArr.push("use_pb_deposit("+Main.gf_getMessage("word","word.useful_deposit")+")");
                        Main.messageBox(Main.gf_getMessageParm("msg","msg.period_check_07",msgParamArr));                      
                        evt.target.itemchaging = false;*/                             
                        return false; 
                    }       
                    /*if(wf_settle_deposit(dg_sheet.selectedIndex, Number(newVal)) == 1){
                        return;
                    }*/
                }
                
                return true;
            }
            
            $scope.$on('receipt_change_bank_info_picker.select', function(e, data){
                
                if($scope.currentRowDgSheet != null){
                    var rowFocusData = $scope.table_dg_sheet_receipt_change_popup.api().row($scope.currentRowDgSheet).data();
                    
                    if(rowFocusData != null){
                        
                        
                        if(data.GATEWAY_YN == "1" || data.GATEWAY_YN == "2"){
                            BaseService.alertWarning("Cannot pay with selected payment methods combined.");
                            return false;
                        }else{
                            rowFocusData.CARD_BANK_CODE = data.BANK_CODE;
                            rowFocusData.BANK_NAME = data.BANK_NAME;
                            rowFocusData.CARD_NO = data.BANK_DEPOSIT_NO;
                            rowFocusData.SERV_CODE = data.SERV_CODE;
                            rowFocusData.GATEWAY_YN = data.GATEWAY_YN;
                            rowFocusData.BANK_CODE = data.BANK_CODE;
                            rowFocusData.BANK_NAME = data.BANK_NAME;
                            rowFocusData.BANK_SEQ = data.BANK_SEQ;

                            $scope.renderTableDgSheetChangePopop($scope.dg_sheet); 
                            BaseService.focusTableRow($scope.table_dg_sheet_receipt_change_popup, -1);
                        }
                    }
                }
                
            });
            
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'receipts_change_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = true;
        }
    }
});

app.directive('orderConfirmPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/orderConfirmPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.orderDetail = {};
            $scope.dataOrderGoods = null;
            $scope.dataSheet30 = null;
            $scope.dataSheet32 = null;
            $scope.dataSheet36 = null;
            $scope.dataSheet40 = null;
            $scope.sum = {
                total_sale_price: 0,
                total_qty: 0,
                total_order_amt: 0,
                total_dc_amt: 0,
                total_net_amt: 0,
                dc_by_sale_price: 0,
                grand_total_dc_amt: 0,
                grand_total_net_amt: 0
            };
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');
                
                setTimeout(function(){
                    $scope.prepareData(); 
                }, 600);
                
                $('#' + $scope.popupId).on('hidden.bs.modal', function () {
                   
                });
            });
            
            $scope.prepareData = function(){
                $scope.orderDetail = $scope.popupParam.orderDetail;
                $scope.dataOrderGoods = $scope.popupParam.orderGoods;
                $scope.dataSheet30 = $scope.popupParam.sheet30;
                $scope.dataSheet32 = $scope.popupParam.sheet32;
                //$scope.dataSheet36 = $scope.popupParam.sheet36;
                $scope.dataSheet40 = $scope.popupParam.sheet40;
                $scope.dataDoType = $scope.popupParam.SHEET_G_DO_TYPE;
                $scope.addition_dc = $scope.popupParam.addition_dc;
                if($scope.dataSheet40 != null && $scope.dataSheet40.length > 0) {
                    var mainPayment = null;
                    $.each($scope.dataSheet40, function(index, item) {
                        if(item.PAYMENT == "01" || item.PAYMENT == "09"){
                            mainPayment = item;
                            return;
                        }
                    });
                    if(mainPayment == null){
                        mainPayment = $scope.dataSheet40[0];
                    }
                    $scope.selectedMainPayment = mainPayment;
                }
                $scope.orderDetail.payment_code = $scope.selectedMainPayment.PAYMENT;
                $scope.orderDetail.payment_name = $scope.getPaymentName();
                $scope.orderDetail.installment_term = $scope.selectedMainPayment.ALLOT;
                $scope.orderDetail.card_bank = $scope.getCardBank();
                $scope.$apply();
                
                $scope.dataSheet36 = [];
                $.each($scope.popupParam.sheet36, function(index, item){
                    if(item.COUPON_YN == "0") {
                        $scope.dataSheet36.push(item);
                    }
                    else if(item.COUPON_YN == "1" && item.USE_YN == "1") {
                        $scope.dataSheet36.push(item);
                    }
                });
                
                $scope.renderTableSheet30($scope.dataOrderGoods);
                $scope.renderTableSheet36($scope.dataSheet36);
                
                $scope.sumAmt();
            };
            
            $scope.renderTableSheet30 = function(dataSource){
                if(dataSource != null){
                    $scope.table_sheet30_confirm_popup = $('#table_sheet30_confirm_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "GOODS_CODE",
                            "class": "text-center"
                        }, {
                            "data": "GOODS_NAME"
                        }, {
                            "data": "SALE_PRICE",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 2)
                            }
                        }, {
                            "data": "ORDER_QTY",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0)
                            }
                        }, {
                            "data": "ORDER_AMT",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 2)
                            }
                        }, {
                            "data": "DC_AMT",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 2)
                            }
                        }, {
                            "data": "QUEST_AMT",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 2)
                            }
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
//                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table_sheet30_confirm_popup, 0);
                    BaseService.generateTooltip($scope.table_sheet30_confirm_popup);
                }
            };
            
            $scope.renderTableSheet36 = function(dataSource){
                if(dataSource != null){
                    $scope.table_promotion_confirm_popup = $('#table_promotion_confirm_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "ORDER_G_SEQ",
                            "class": "text-center"
                        }, {
                            "data": "DO_TYPE",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.dataDoType, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                            
                        }, {
                            "data": "PROMO_NO",
                            "class": "text-center"
                        }, {
                            "data": "PROMO_NAME"
                        },{
                            "data": "AMOUNT",
                            "class": "text-right",
                            "render": function(data, type, row){
                                if(data){
                                    return BaseService.formatDecimal(data, 2);
                                }
                                return data;
                            }
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
//                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table_promotion_confirm_popup, 0);
                    BaseService.generateTooltip($scope.table_promotion_confirm_popup);
                }
            };
            
            $scope.sumAmt = function(){
                var total_sale_price = 0;
                var total_qty = 0;
                var total_order_amt = 0;
                var total_dc_amt = 0;
                var total_net_amt = 0;
                var dc_by_sale_price = 0;
                var grand_total_dc_amt = 0;
                var grand_total_net_amt = 0;
                
                $.each($scope.dataOrderGoods, function(index, item){
                    total_sale_price += parseFloat(item.SALE_PRICE);
                    total_qty += parseInt(item.ORDER_QTY);
                    total_order_amt += parseFloat(item.ORDER_AMT);
                    total_dc_amt    += parseFloat(item.DC_AMT);
                    total_net_amt += parseFloat(item.QUEST_AMT);
                });
                
                $scope.sum.total_sale_price = total_sale_price;
                $scope.sum.total_qty = total_qty;
                $scope.sum.total_order_amt = total_order_amt;
                $scope.sum.total_dc_amt = total_dc_amt;
                $scope.sum.total_net_amt = total_net_amt;
                $scope.sum.dc_by_sale_price = $scope.addition_dc;
                
                $scope.sum.grand_total_dc_amt = total_dc_amt + $scope.sum.dc_by_sale_price;
                $scope.sum.grand_total_net_amt = total_net_amt - $scope.sum.dc_by_sale_price;
                $scope.$apply();
            };
            
            $scope.getPaymentName = function(){
                var payment_name = "";
                $.each($scope.dataSheet40, function(index, item) {
                    if(item.PAYMENT_NAME) {
                        payment_name += item.PAYMENT_NAME + ", ";
                    }
                });
                return payment_name.substring(0, payment_name.length - 2);
            };
            
            $scope.getCardBank = function(){
                var card_bank = "";
                $.each($scope.dataSheet40, function(index, item) {
                    if(item.CARD_BANK) {
                        card_bank += item.CARD_BANK + ", ";
                    }
                });
                return card_bank.substring(0, card_bank.length - 2);
            };
            
            $scope.confirmClick = function(){
                var data = {
                    orderDetail: $scope.orderDetail,
                    dataOrderGoods: $scope.dataOrderGoods,
                    dataSheet30: $scope.dataSheet30,
                    dataSheet32: $scope.dataSheet32,
                    dataSheet36: $scope.dataSheet36,
                    dataSheet40: $scope.dataSheet40,
                    dataDoType: $scope.dataDoType,
                    sum: $scope.sum
                };
                
                $scope.$emit($scope.popupId + ".confirm", angular.copy(data));
                $('#' + $scope.popupId).modal('hide');
            };
            
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'order_confirm_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
        }
    }
});

app.directive('printPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/printPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');
                //$scope.src = $scope.popupParam.src;
                setTimeout(function(){
                	
                	//$('#iframe_loading').hide();
                	$('#iframe_print_pdf').prop('src', $scope.popupParam.src);
                }, 300);
                
                $('#' + $scope.popupId).on('hidden.bs.modal', function () {
                    $('#iframe_print_pdf').prop('src', '');
                });
            });
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'print_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
            
            element.attr('src', scope.popupParam.src);
        }
    }
});

app.directive('grantCouponPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/grantCouponPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.fileUpload = {};
            $scope.fileName = "";
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');
                
                $('#' + $scope.popupId + ' input[name="file-upload"]').on('change', function(){
                    $scope.uploadFile();
                });
                
            });
            
            $scope.uploadFile = function(){
                $scope.fileName = $scope.fileUpload.name;
                BaseService.uploadFile($scope.fileUpload, currentMenuId+'/upload-excel').then(
                    function(response){
                        $scope.popupData = response.data.result;
                    }
                );
            };
            
            $scope.confirmClick = function(){
            	
            	$scope.$emit($scope.popupId + ".confirm", angular.copy($scope.popupData));
                $('#' + $scope.popupId).modal('hide');
            	
            };
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'grant_coupon_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
        }
    }
});

app.directive('paymentInfoPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/paymentInfoPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');
                
                $scope.getPopupData();
                
                $('#' + $scope.popupId).on('hidden.bs.modal', function () {
                    if($scope.table_payment_info_popup != null){
                        $scope.table_payment_info_popup.fnClearTable();
                        $scope.table_payment_info_popup.fnDestroy();
                    }
                    $scope.popupData = null;
                });
            });
            
            $scope.getPopupData = function(){
                $scope.isLoading = true;
                
            	//P_ENTP_ACCOUNT = 1193
            	BaseService.getPopupData("popup/retrieve/1193", $scope.popupParam).then(
	                function(respone){
                        setTimeout(function(){
                            $scope.popupData = respone.data.result;
                            $scope.renderTable($scope.popupData);
                            $scope.isLoading = false;
                            $scope.$apply();
                        }, 500);
	                },
	                function(respone){
	                }
	            );
            	
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.table_payment_info_popup = $('#table_payment_info_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "BANK_CODE",
                            "class": "col-BANK_CODE editable text-center no-tooltip"
                        }, {
                            "data": "BANK_NAME"
                        }, {
                            "data": "BRANCH_NAME",
                            "class": "col-BRANCH_NAME editable"
                        }, {
                            "data": "ACCOUNT_NO",
                            "class": "col-ACCOUNT_NO editable"
                        }, {
                            "data": "DEPOSITOR",
                            "class": "col-DEPOSITOR editable"
                        }, {
                            "data": "USE_YN",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "0") ? false : true;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" action-change="useChange(event, checked)"></table-checkbox>';
                            }
                        }, {
                            "data": "DEFAULT_YN",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "0") ? false : true;
                                return '<table-checkbox check-id="chk'+ row.SEQ_NO +'" checked="'+ checked +'" action-change="defaultChange(event, checked)"></table-checkbox>';
                            }
                        }, {
                            "data": "ETC_NOTE",
                            "class": "col-ETC_NOTE editable"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            if(data.cwareAction == "I"){
                                $(row).addClass("new");
                            }
                            if(data.cwareAction == "U"){
                                $(row).addClass("edit");
                            }
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table_payment_info_popup, 0);
                    BaseService.generateTooltip($scope.table_payment_info_popup);
                    
                    setTimeout(function(){
                        $scope.table_payment_info_popup.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentPaymentInfoRow = this;
                            var aData = $scope.table_payment_info_popup.api().row(this).data();
                            if(aData != null){
                                $scope.popupSelectedData = aData;
                            }
                        });
                        
                        BaseService.activateEditTable($scope.table_payment_info_popup, 'BANK_CODE', {
                            type: "inputPicker",
                            typeClassName: "focus-border text-center",
                            pickerId: $scope.popupId + "_bank_picker",
                            pickerInputClassName: "text-center",
                            angularScope: $scope
                        });
                        
                        BaseService.activateEditTable($scope.table_payment_info_popup, 'BRANCH_NAME', {
                            typeClassName: "focus-border",
                            callback: function (value, settings){
                                var aData = $scope.table_payment_info_popup.api().row(this.parentElement).data();
                                if(aData != null){
                                    aData.BRANCH_NAME = value;
                                    $scope.table_payment_info_popup.api()
                                        .cell(this.parentElement.childNodes[3])
                                        .data(aData.BRANCH_NAME)
                                        .draw();
                                    $(this).attr('data-original-title', value);
                                }
                            }
                        });
                        
                        BaseService.activateEditTable($scope.table_payment_info_popup, 'ACCOUNT_NO', {
                            typeClassName: "focus-border",
                            callback: function (value, settings){
                                var aData = $scope.table_payment_info_popup.api().row(this.parentElement).data();
                                if(aData != null){
                                    aData.ACCOUNT_NO = value;
                                    $scope.table_payment_info_popup.api()
                                        .cell(this.parentElement.childNodes[4])
                                        .data(aData.ACCOUNT_NO)
                                        .draw();
                                    $(this).attr('data-original-title', value);
                                }
                            }
                        });
                        
                        BaseService.activateEditTable($scope.table_payment_info_popup, 'DEPOSITOR', {
                            typeClassName: "focus-border",
                            callback: function (value, settings){
                                var aData = $scope.table_payment_info_popup.api().row(this.parentElement).data();
                                if(aData != null){
                                    aData.DEPOSITOR = value;
                                    $scope.table_payment_info_popup.api()
                                        .cell(this.parentElement.childNodes[5])
                                        .data(aData.DEPOSITOR)
                                        .draw();
                                    $(this).attr('data-original-title', value);
                                }
                            }
                        });
                        
                        BaseService.activateEditTable($scope.table_payment_info_popup, 'ETC_NOTE', {
                            typeClassName: "focus-border",
                            callback: function (value, settings){
                                var aData = $scope.table_payment_info_popup.api().row(this.parentElement).data();
                                if(aData != null){
                                    aData.ETC_NOTE = value;
                                    $scope.table_payment_info_popup.api()
                                        .cell(this.parentElement.childNodes[8])
                                        .data(aData.ETC_NOTE)
                                        .draw();
                                    $(this).attr('data-original-title', value);
                                }
                            }
                        });
                        
                        if(dataSource.length == 0){
                            $scope.popupSelectedData = null;
                        }
                    }, 50);
                }
            };
            
            $scope.inquiryClick = function(){
                if($scope.table_payment_info_popup != null){
                    $scope.table_payment_info_popup.fnClearTable();
                    $scope.table_payment_info_popup.fnDestroy();
                }
                $scope.getPopupData();
            };
            
            $scope.inputClick = function(){
                $scope.popupData = ($scope.popupData) ? $scope.popupData : [];
                var payment = {
                    BANK_CODE: "",
                    BANK_NAME: "",
                    BRANCH_NAME: "",
                    ACCOUNT_NO: "",
                    DEPOSITOR: "",
                    USE_YN: "0",
                    DEFAULT_YN: "0",
                    ETC_NOTE: "",
                    SEQ_NO: $scope.getSeqNo(),
                    cwareAction: "I",
                    rowId: chance.string({length: 18})
                };
                $scope.popupData.push(payment);
                $scope.renderTable($scope.popupData);
                BaseService.focusTableRow($scope.table_payment_info_popup, -1);
            };
            
            $scope.deleteClick = function(){
                if($scope.popupSelectedData != null){
                    if($scope.popupSelectedData.cwareAction == 'I'){
                        swal({ 
                            title: "Question ?",
                            text: "Are you sure you want to delete this item ?",
                            type: "info",
                            width: 455,
                            showRejectButton: true,
                            confirmButtonText: "Yes"
                        }, function(button){
                            if(button == 'confirm'){
                                _.remove($scope.popupData, { "rowId": $scope.popupSelectedData.rowId });
                                $scope.renderTable($scope.popupData);
                                BaseService.focusTableRow($scope.table_payment_info_popup, -1);
                            }
                        });
                    }
                    else {
                        BaseService.alertWarning("Existing data cannot be deleted.");
                    }
                }
                else {
                    BaseService.alertNoDeleteData();
                }
            };
            
            $scope.saveClick = function(){
                $('input:not(.picker-input)').blur();
                setTimeout(function(){
                    if($scope.checkEditData()){
                        if($scope.validateSaveData()){
                            $scope.saveData();
                        }
                    }
                    else {
                        BaseService.alertNoSaveData();
                    }
                }, 100);
            };
            
            $scope.validateSaveData = function(){
                var valid = true;
                if($scope.popupData != null && $scope.popupData.length > 0){
                    $.each($scope.popupData, function(index, item){
                        if(item.cwareAction != null){
                            if(item.BANK_CODE == '' || item.ACCOUNT_NO == '' || item.DEPOSITOR == ''){
                                var columnCaption = "";
                                var rowPosition = index + 1;
                                var columnPosition = 0;
                                if(item.BANK_CODE == ''){
                                    columnCaption = "Bank";
                                    columnPosition = 1;
                                }
                                else if(item.ACCOUNT_NO == ''){
                                    columnCaption = "Account No.";
                                    columnPosition = 4;
                                }
                                else if(item.DEPOSITOR == ''){
                                    columnCaption = "Ac. Owner";
                                    columnPosition = 5;
                                }
                                var msg = "Enter " + columnCaption + " of row " + rowPosition + ".";

                                BaseService.alertWarning(msg, function() { 
                                    setTimeout(function(){
                                        var selectedNode = $scope.table_payment_info_popup.api().rows().nodes()[index];
                                        $(selectedNode.cells[0]).click();
                                        $(selectedNode.cells[columnPosition]).click();
                                    },200);
                                })
                                valid = false;
                                return false;
                            }
                        }
                    });
                }
                else {
                    valid = false;
                }
                return valid;
            };
            
            $scope.saveData = function(){
                var paramVendorAccount = [];
                if($scope.popupData.length > 0){
                    $.each($scope.popupData, function(index, item){
                        if(item.cwareAction != null){
                            var vendorAccount = {
                                ENTP_CODE: $scope.popupParam.entp_code,
                                BANK_CODE: item.BANK_CODE,
                                BRANCH_NAME: item.BRANCH_NAME,
                                ACCOUNT_NO: item.ACCOUNT_NO,
                                DEPOSITOR: item.DEPOSITOR,
                                USE_YN: item.USE_YN,
                                DEFAULT_YN: item.DEFAULT_YN,
                                ETC_NOTE: item.ETC_NOTE,
                                SEQ_NO: item.SEQ_NO,
                                cwareAction: item.cwareAction
                            };
                            paramVendorAccount.push(vendorAccount);
                        }
                    });

                    if(paramVendorAccount.length == 0){
                        BaseService.alertNoSaveData();
                        return;
                    }
                }

                var data = {
                    "paramVendorAccount" : paramVendorAccount
                };

                BaseService.savePopupData('popup/save-vendor-account', data).then(
                    function(response){
                        BaseService.alertSaveSuccess(function(){
                            $scope.inquiryClick();
                        });
                    },
                    function(response){
                        BaseService.alertError(response.message);
                    }
                );
            };
            
            $scope.checkEditData = function(){
                var isEdit = false;
                if($scope.popupData != null){
                    $.each($scope.popupData, function(index, item){
                        if(item.cwareAction == 'I' || item.cwareAction == 'U'){
                            isEdit = true;
                            return;
                        }
                    });
                }
                return isEdit;
            };
            
            $scope.getSeqNo = function(){
                var seqNo = "01";
                if($scope.popupData != null && $scope.popupData.length > 0){
                    var lastSeqNO = parseInt($scope.popupData[$scope.popupData.length - 1].SEQ_NO);
                    seqNo = BaseService.padZero(lastSeqNO, 2);
                }
                return seqNo;
            };
            
            $scope.useChange = function(e, checked){
                if($scope.currentPaymentInfoRow != null){
                    var aData = $scope.table_payment_info_popup.api().row($scope.currentPaymentInfoRow).data();
                    if(aData != null){
                        aData.USE_YN = (checked) ? "1" : "0";
                    }
                }
            };
            
            $scope.defaultChange = function(e, checked){
                if($scope.currentPaymentInfoRow != null){
                    var aData = $scope.table_payment_info_popup.api().row($scope.currentPaymentInfoRow).data();
                    if(aData != null){
                        var newValue = (checked) ? "1" : "0";
                        $.each($scope.popupData, function(index, item){
                            if(item.SEQ_NO == aData.SEQ_NO){
                                item.DEFAULT_YN = newValue;
                                item.cwareAction = (item.cwareAction == 'I') ? 'I' : 'U';
                            }
                            else {
                                if(item.DEFAULT_YN == "1"){
                                    item.cwareAction = (item.cwareAction == 'I') ? 'I' : 'U';
                                }
                                item.DEFAULT_YN = "0";
                            }
                            $('#chk' + item.SEQ_NO).prop('checked', (item.DEFAULT_YN == "1") ? true : false);
                        });
                    }
                }
            };
            
            $scope.$on($scope.popupId + '_bank_picker.select', function(e, data){
                if($scope.currentPaymentInfoRow != null){
                    var rowFocus = $scope.table_payment_info_popup.api().row($scope.currentPaymentInfoRow);
                    var rowFocusData = rowFocus.data();
                    if(rowFocusData != null){
                        rowFocusData.BANK_CODE = data.BANK_CODE;
                        rowFocusData.BANK_NAME = data.BANK_NAME;
                        rowFocusData.cwareAction = (rowFocusData.cwareAction != 'I') ? 'U' : 'I';
                        $scope.renderTable($scope.popupData);
                        BaseService.focusTableRow($scope.table_payment_info_popup, rowFocus.index(), 3);
                    }
                }
            });
            $scope.$on($scope.popupId + '_bank_picker.clear', function(e, data){
                
            });
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'payment_info_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
        }
    }
});

app.directive('unitInfoGroupPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/unitInfoGroupPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.dataColour = null;
            $scope.dataPattern = null;
            $scope.dataSize = null;
            $scope.dataForm = null;
            $scope.cmbColour = [];
            $scope.cmbPattern = [];
            $scope.selectedColour = {};
            $scope.selectedPattern = {};
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');
                
                $scope.getPopupHeaderData();
                
            });
            
            $scope.getPopupHeaderData = function(){
            	//P_CSPF_GROUP_AUTO = 1144
            	BaseService.getPopupData("popup/retrieve/1144/header", $scope.popupParam).then(
	                function(respone){
                        setTimeout(function(){
                            $scope.cmbColour = respone.data.C_CSPF_C;
                            $scope.cmbPattern = respone.data.C_CSPF_P;
                            
                            $scope.selectedColour = ($scope.cmbColour.length > 0) ? $scope.cmbColour[0] : {};
                            $scope.selectedPattern = ($scope.cmbPattern.length > 0) ? $scope.cmbPattern[0] : {};
                            
                            $scope.getPopupData();
                        }, 100);
	                }
	            );
            };
            
            $scope.getPopupData = function(){
                $scope.retrieveColourData();
                $scope.retrievePatternData();
                $scope.retrieveSizeData();
                $scope.retrieveFormData();
            };
            
            $scope.retrieveColourData = function(){
            	BaseService.getPopupData("popup/retrieve/1144?cspf_group=" + $scope.selectedColour.code).then(
	                function(respone){
                        $scope.dataColour = respone.data.result;
                        if($scope.dataColour.length == 1){
                            $scope.dataColour[0].SELECTION = '1';
                        }
                        $scope.renderTableColour($scope.dataColour);
	                }
	            );
            };
            
            $scope.retrievePatternData = function(){
            	BaseService.getPopupData("popup/retrieve/1144?cspf_group=" + $scope.selectedPattern.code).then(
	                function(respone){
                        $scope.dataPattern = respone.data.result;
                        if($scope.dataPattern.length == 1){
                            $scope.dataPattern[0].SELECTION = '1';
                        }
                        $scope.renderTablePattern($scope.dataPattern);
	                }
	            );
            };
            
            $scope.retrieveSizeData = function(){
            	BaseService.getPopupData("popup/retrieve/1144?cspf_group=" + $scope.popupParam.unit_size_code).then(
	                function(respone){
                        $scope.dataSize = respone.data.result;
                        if($scope.dataSize.length == 1){
                            $scope.dataSize[0].SELECTION = '1';
                        }
                        $scope.renderTableSize($scope.dataSize);
	                }
	            );
            };
            
            $scope.retrieveFormData = function(){
            	BaseService.getPopupData("popup/retrieve/1144?cspf_group=" + $scope.popupParam.unit_form_code).then(
	                function(respone){
                        $scope.dataForm = respone.data.result;
                        if($scope.dataForm.length == 1){
                            $scope.dataForm[0].SELECTION = '1';
                        }
                        $scope.renderTableForm($scope.dataForm);
	                }
	            );
            };
            
            $scope.renderTableColour = function(dataSource){
                if(dataSource != null){
                    
                    $scope.table_unit_info_colour_popup = $('#table_unit_info_colour_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "SELECTION",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "0") ? false : true;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" action-change="colourSelectChange(event, checked)"></table-checkbox>';
                            }
                        }, {
                            "data": "CSPF_CODE"
                        }, {
                            "data": "CSPF_NAME"
                        }, {
                            "data": "USE_YN",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "0") ? false : true;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" disabled="true"></table-checkbox>';
                            }
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.setFixedHeader($scope.table_unit_info_colour_popup);
                    BaseService.generateRowNumber($scope.table_unit_info_colour_popup, 0);
                    BaseService.generateTooltip($scope.table_unit_info_colour_popup);
                    
                    setTimeout(function(){
                        $scope.table_unit_info_colour_popup.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentColourRow = this;
                        });
                    }, 50);
                }
            };
            
            $scope.renderTablePattern = function(dataSource){
                if(dataSource != null){
                    
                    $scope.table_unit_info_pattern_popup = $('#table_unit_info_pattern_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "SELECTION",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "0") ? false : true;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" action-change="patternSelectChange(event, checked)"></table-checkbox>';
                            }
                        }, {
                            "data": "CSPF_CODE"
                        }, {
                            "data": "CSPF_NAME"
                        }, {
                            "data": "USE_YN",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "0") ? false : true;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" disabled="true"></table-checkbox>';
                            }
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.setFixedHeader($scope.table_unit_info_pattern_popup);
                    BaseService.generateRowNumber($scope.table_unit_info_pattern_popup, 0);
                    BaseService.generateTooltip($scope.table_unit_info_pattern_popup);
                    
                    setTimeout(function(){
                        $scope.table_unit_info_pattern_popup.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentPatternRow = this;
                        });
                    }, 50);
                }
            };
            
            $scope.renderTableSize = function(dataSource){
                if(dataSource != null){
                    
                    $scope.table_unit_info_size_popup = $('#table_unit_info_size_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "SELECTION",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "0") ? false : true;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" action-change="sizeSelectChange(event, checked)"></table-checkbox>';
                            }
                        }, {
                            "data": "CSPF_CODE"
                        }, {
                            "data": "CSPF_NAME"
                        }, {
                            "data": "USE_YN",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "0") ? false : true;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" disabled="true"></table-checkbox>';
                            }
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.setFixedHeader($scope.table_unit_info_size_popup);
                    BaseService.generateRowNumber($scope.table_unit_info_size_popup, 0);
                    BaseService.generateTooltip($scope.table_unit_info_size_popup);
                    
                    setTimeout(function(){
                        $scope.table_unit_info_size_popup.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentSizeRow = this;
                        });
                    }, 50);
                }
            };
            
            $scope.renderTableForm = function(dataSource){
                if(dataSource != null){
                    
                    $scope.table_unit_info_form_popup = $('#table_unit_info_form_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "SELECTION",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "0") ? false : true;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" action-change="formSelectChange(event, checked)"></table-checkbox>';
                            }
                        }, {
                            "data": "CSPF_CODE"
                        }, {
                            "data": "CSPF_NAME"
                        }, {
                            "data": "USE_YN",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "0") ? false : true;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" disabled="true"></table-checkbox>';
                            }
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    //BaseService.setFixedHeader($scope.table_unit_info_form_popup);
                    BaseService.generateRowNumber($scope.table_unit_info_form_popup, 0);
                    BaseService.generateTooltip($scope.table_unit_info_form_popup);
                    
                    setTimeout(function(){
                        $scope.table_unit_info_form_popup.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentFormRow = this;
                        });
                    }, 50);
                }
            };
            
            $scope.colourSelectChange = function(e, checked){
                if($scope.currentColourRow != null){
                    var aData = $scope.table_unit_info_colour_popup.api().row($scope.currentColourRow).data();
                    if(aData != null){
                        aData.SELECTION = (checked) ? "1" : "0";
                    }
                }
            };
            
            $scope.patternSelectChange = function(e, checked){
                if($scope.currentPatternRow != null){
                    var aData = $scope.table_unit_info_pattern_popup.api().row($scope.currentPatternRow).data();
                    if(aData != null){
                        aData.SELECTION = (checked) ? "1" : "0";
                    }
                }
            };
            
            $scope.sizeSelectChange = function(e, checked){
                if($scope.currentSizeRow != null){
                    var aData = $scope.table_unit_info_size_popup.api().row($scope.currentSizeRow).data();
                    if(aData != null){
                        aData.SELECTION = (checked) ? "1" : "0";
                    }
                }
            };
            
            $scope.formSelectChange = function(e, checked){
                if($scope.currentFormRow != null){
                    var aData = $scope.table_unit_info_form_popup.api().row($scope.currentFormRow).data();
                    if(aData != null){
                        aData.SELECTION = (checked) ? "1" : "0";
                    }
                }
            };
            
            $scope.validateSelectData = function(){
                var colours = getJSONObjects($scope.dataColour, 'SELECTION', '1');
                if(colours == null || colours.length == 0){
                    BaseService.alertWarning("No Colour selected.");
                    return false;
                }
                
                var patterns = getJSONObjects($scope.dataPattern, 'SELECTION', '1');
                if(patterns == null || patterns.length == 0){
                    BaseService.alertWarning("No Pattern selected.");
                    return false;
                }
                
                var sizes = getJSONObjects($scope.dataSize, 'SELECTION', '1');
                if(sizes == null || sizes.length == 0){
                    BaseService.alertWarning("No Size selected.");
                    return false;
                }
                
                var forms = getJSONObjects($scope.dataForm, 'SELECTION', '1');
                if(forms == null || forms.length == 0){
                    BaseService.alertWarning("No Form selected.");
                    return false;
                }
                return true;
            };
            
            $scope.prepareSelectData = function(){
                var arrSelectData = [];
                $.each($scope.dataColour, function(i_colour, colour){
                    if(colour.SELECTION == '1'){
                        $.each($scope.dataSize, function(i_size, size){
                            if(size.SELECTION == '1'){
                                $.each($scope.dataPattern, function(i_pattern, pattern){
                                    if(pattern.SELECTION == '1'){
                                        $.each($scope.dataForm, function(i_form, form){
                                            if(form.SELECTION == '1'){
                                                var data = {
                                                    COLOR_CODE: colour.CSPF_CODE,
                                                    COLOR_NAME: colour.CSPF_NAME,
                                                    SIZE_CODE: size.CSPF_CODE,
                                                    SIZE_NAME: size.CSPF_NAME,
                                                    PATTERN_CODE: pattern.CSPF_CODE,
                                                    PATTERN_NAME: pattern.CSPF_NAME,
                                                    FORM_CODE: form.CSPF_CODE,
                                                    FORM_NAME: form.CSPF_NAME
                                                };
                                                arrSelectData.push(data);
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
                
                return arrSelectData;
            };
            
            $scope.inquiryClick = function(){
                $scope.getPopupData();
            };
            
            $scope.confirmClick = function(){
                if($scope.validateSelectData()){
                    var data = $scope.prepareSelectData();
                    $scope.$emit($scope.popupId + ".confirm", angular.copy(data));
                    $('#' + $scope.popupId).modal('hide');
                }
            };
            
            $scope.cancelClick = function(){
                $('#' + $scope.popupId).modal('hide');
            };
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'unit_info_group_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
        }
    }
});

app.directive('orderMediaPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/orderMediaPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');
                setTimeout(function(){
                	$scope.getPopupData();
                }, 200);     
            });
            
            $scope.getPopupData = function(){
            	BaseService.getPopupData("popup/retrieve/1084").then(
	                function(respone){
                        $scope.popupData = respone.data.result;
                        var arrMediaCode = $scope.popupParam.media_code.split(',');
                        $.each($scope.popupData, function(index, item){
                        	if($.inArray(item.CODE_MGROUP, arrMediaCode) > -1){
                        		item.SELECTION = 1;
                        	}
                        	else {
                        		item.SELECTION = 0;
                        	}
                        	
                        });
                        $scope.renderTable($scope.popupData);
	                }
	            );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.table = $('#table_order_media_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "SELECTION",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "0") ? false : true;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" action-change="selectChange(event, checked)"></table-checkbox>';
                            }
                        }, {
                            "data": "CODE_MGROUP",
                            "class": "text-center",
                        }, {
                            "data": "CODE_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table, 0);
                    BaseService.generateTooltip($scope.table);
                    
                    setTimeout(function(){
                    	//BaseService.setFixedHeader($scope.table);
                        $scope.table.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentRow = this;
                        });
                    }, 50);
                }
            };
            
            $scope.selectChange = function(e, checked){
                if($scope.currentRow != null){
                    var aData = $scope.table.api().row($scope.currentRow).data();
                    if(aData != null){
                        aData.SELECTION = (checked) ? "1" : "0";
                    }
                }
            };
            
            $scope.inquiryClick = function(){
                $scope.getPopupData();
            };
            
            $scope.removeSelectClick = function(){
            	$.each($scope.popupData, function(index, item){
            		item.SELECTION = 0;
                });
                $scope.renderTable($scope.popupData);
            };
            
            $scope.confirmClick = function(){
            	var arrSelectData = [];
            	$.each($scope.popupData, function(index, item){
            		 if(item.SELECTION == '1'){
                         var data = {
                             MEDIA_CODE: item.CODE_MGROUP,
                             MEDIA_NAME: item.CODE_NAME
                         };
                         arrSelectData.push(data);
                     }
            	});
            	
                $scope.$emit($scope.popupId + ".confirm", angular.copy(arrSelectData));
                $('#' + $scope.popupId).modal('hide');
                
            };
            
            $scope.cancelClick = function(){
                $('#' + $scope.popupId).modal('hide');
            };
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'order_media_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
        }
    }
});

app.directive('counselTransferPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/counselTransferPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');
                
                $('#counsel_transfer_popup_input_counsel_lgroup_picker .picker-button').on('click', function(e){
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
                });
                   
                $('#counsel_transfer_popup_input_counsel_lgroup_picker .picker-input').on('keyup', function(e){
                	if(e.keyCode == 113){
                		$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
                	}
                });
                   
                $('#popup_transfer_popup_input_counsel_group_picker  .picker-button').on('click', function(e){
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
                });
                   
                $('#popup_transfer_popup_input_counsel_group_picker .picker-input').on('keyup', function(e){
                	if(e.keyCode == 113){
                		$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
                	}
                });
                   
                $('#counsel_transfer_popup_counsel_lgroup_picker').on('hidden.bs.modal', function () {
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 1);
                });
                   
                $('#counsel_transfer_popup_counsel_mgroup_picker').on('hidden.bs.modal', function () {
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 1);
                });
                
                $scope.selectedCounsel = $scope.popupParam.selectedCounsel;
                $scope.selectedCounsel.cwareAction = 'I';
                
                //clear popup param
                $scope.popupCounselGroupParams = {};
            });
            
            $scope.confirmClick = function(){
                if($scope.validateSave()){
                    var saveParamList = [];

                    saveParamList.push($scope.selectedCounsel);

                    if(saveParamList.length != 0){

                        var data = {"saveParamList" : saveParamList};

                        BaseService.savePopupData('popup/save-counsel-transfer', data).then(
                            function(response){
                                BaseService.alertSaveSuccess(function(){
                                    $scope.$emit($scope.popupId + ".confirm");
                                    $('#' + $scope.popupId).modal('hide');
                                });
                            },
                            function(response){
                                BaseService.alertError(response.message);
                            }
                        );
                    }
                }
            };
            
            $scope.validateSave = function(){
                if( $scope.selectedCounsel.OUT_LGROUP_CODE == ""){
                    BaseService.alertWarning("Enter Major Category.", function(){
                        setTimeout(function(){
                            setTimeout(function(){
                                $('#inpCounselTransferOutLgroupCode').focus();
                            },200);
                        },200);
                    });
                    return false;
                }
                if( $scope.selectedCounsel.OUT_MGROUP_CODE == ""){
                    BaseService.alertWarning("Enter Middle Category.", function(){
                        setTimeout(function(){
                            setTimeout(function(){
                                $('#inpCounselTransferOutMgroupCode').focus();
                            },200);
                        },200);
                    });
                    return false;
                }
                return true;
            }
            
            $scope.cancelClick = function(){
                $('#' + $scope.popupId).modal('hide');
            };
            
            
            $scope.$on('counsel_transfer_popup_counsel_lgroup_picker.select', function(e, data){
                $scope.selectedCounsel.OUT_LGROUP_CODE = data.CODE_MGROUP;
                $scope.selectedCounsel.OUT_LGROUP_NAME = data.CODE_NAME;
                
                //----- set catagory group filter parameter -----//
                $scope.popupCounselGroupParams.code_lgroup = data.REMARK;
                $scope.$apply();
            });
                        
            $scope.$on('counsel_transfer_popup_counsel_mgroup_picker.select', function(e, data){
                $scope.selectedCounsel.OUT_LGROUP_CODE = data.LGROUP;
                $scope.selectedCounsel.OUT_LGROUP_NAME = data.LGROUP_NAME;
                $scope.selectedCounsel.OUT_MGROUP_CODE = data.MGROUP;
                $scope.selectedCounsel.OUT_MGROUP_NAME = data.MGROUP_NAME;
                
              //----- set catagory group filter parameters -----//
                $scope.popupCounselGroupParams.code_lgroup = data.REMARK;
                $scope.popupCounselGroupParams.code_mgroup = data.MGROUP;
                $scope.$apply();
            });
            
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'counsel_transfer_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
        }
    }
});

app.directive('counselReceiptPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/counselReceiptPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.itemParams = {
                popModCase: "CASE_1",
                r_value: 1,
                constructText: ""
            };
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
            	
            	setTimeout(function(){
                	//clear popup param
                    $scope.popupCounselGroupParams = {};
                    $scope.popupCounselGroupParams.code_lgroup = "";
                    $scope.popupCounselGroupParams.code_mgroup = "";
                    
                    $scope.receiptCounsel = $scope.popupParam.receiptCounsel;
                    $scope.receiptCounsel.OUT_LGROUP_CODE = "";
                    $scope.receiptCounsel.OUT_LGROUP_NAME = "";
                    $scope.receiptCounsel.OUT_MGROUP_CODE = "";
                    $scope.receiptCounsel.OUT_MGROUP_NAME = "";
                	//$scope.$broadcast("counsel_receipt_popup_counsel_lgroup_picker.find", "01");
                	$('#' + $scope.popupId).modal('show');
                },200);
            	
            	//lgroup control
                $('#counsel_receipt_popup_input_counsel_lgroup_picker .picker-button').on('click', function(e){
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
                });
                   
                $('#counsel_receipt_popup_input_counsel_lgroup_picker .picker-input').on('keyup', function(e){
                	if(e.keyCode == 113){
                		$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
                	}
                });
                
                $('#counsel_receipt_popup_counsel_lgroup_picker').on('hidden.bs.modal', function () {
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 1);
                });
                //lgroup control
                
                //mgroup control
                $('#popup_receipt_input_counsel_group_picker  .picker-button').on('click', function(e){
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
                });
                   
                $('#popup_receipt_input_counsel_group_picker .picker-input').on('keyup', function(e){
                	if(e.keyCode == 113){
                		$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
                	}
                });
                
                $('#counsel_receipt_popup_counsel_mgroup_picker').on('hidden.bs.modal', function () {
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 1);
                });
                //mgroup control
                   
                //item control
                $('#counsel_receipt_popup_input_item_picker .picker-button').on('click', function(e){
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
                });
                
                $('#counsel_receipt_popup_input_item_picker .picker-input').on('keyup', function(e){
                	if(e.keyCode == 113){
                		$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
                	}
                });
                
                $('#counsel_receipt_popup_item_picker').on('hidden.bs.modal', function () {
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 1);
                });
                //item control
                
                //item dt control
                $('#counsel_receipt_popup_input_item_dt_picker .picker-button').on('click', function(e){
                    $scope.itemParams.goods_code = $scope.receiptCounsel.GOODS_CODE;
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
                });
                
                $('#counsel_receipt_popup_input_item_dt_picker .picker-input').on('keyup', function(e){
                	if(e.keyCode == 113){
                        $scope.itemParams.goods_code = $scope.receiptCounsel.GOODS_CODE;
                		$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
                	}
                });
                
                $('#counsel_receipt_popup_item_dt_picker').on('hidden.bs.modal', function () {
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 1);
                });
                //item dt control
                
              
                $scope.cmbWildYns = [];
                $scope.selectedType = null;
                
                
                
                if($scope.popupParam.cmbWildYns){
                    $scope.cmbWildYns = $scope.popupParam.cmbWildYns;
                    
                }
                else {
                    $scope.getPopupHeaderData();
                   
                }
                
                setTimeout(function(){
                	$scope.selectedType = $scope.cmbWildYns[0];
                	$scope.$apply();
                },200);
                
                setTimeout(function(){
	                //$scope.$broadcast("counsel_receipt_popup_counsel_mgroup_picker.find", "05");
	               $('#inpCounselPopupOutLgroupCode').focus();
                }, 1000);
                
            });
            
            $scope.getPopupHeaderData = function(){
                //P_COUNSEL_POP = 1214
            	BaseService.getPopupData("popup/retrieve/1214/header").then(
	                function(response){
                        $scope.cmbWildYns = response.data.C_WILD_YN;
	                }
	            );
            };
            
            $scope.chkCompleteClick = function(){
            	$scope.receiptCounsel.DO_FLAG = $('#chkComplete').prop('checked') ? '40' : '10';
            };
            
            $scope.confirmClick = function(){
                
                if($scope.validateSave()){
                    var saveParamList = [];
                
                    //set type combobox
                    $scope.receiptCounsel.WILD_YN = ($scope.selectedType != null)? $scope.selectedType.code : "";

                    var hcReqDate = $scope.receiptCounsel.HC_REQ_DATE;
                    if(hcReqDate){
                        $scope.receiptCounsel.HC_REQ_DATE_COPY = $scope.receiptCounsel.HC_REQ_DATE+":00";
                    }
                    
                    $scope.receiptCounsel.cwareAction = "I";
                    $scope.receiptCounsel.REF_NO1 = $scope.receiptCounsel.ORDER_NO;
                   // $scope.receiptCounsel.CLAIM_NO = $scope.receiptCounsel.ORDER_NO;
                   // $scope.receiptCounsel.COUNSEL_SEQ = $scope.receiptCounsel.ORDER_NO;
               
                    saveParamList.push($scope.receiptCounsel);

                    if(saveParamList.length != 0){

                        var data = {"saveParamList" : saveParamList};
                        console.log(data)
                        BaseService.savePopupData('popup/save-counsel-receipt', data).then(
                            function(response){
                                BaseService.alertSaveSuccess(function(){
                                	$scope.$emit($scope.popupId + ".confirm");
                                    $('#' + $scope.popupId).modal('hide');
                                });
                            },
                            function(response){
                                BaseService.alertError(response.message);
                            }
                        );
                    }
                }
            };
            
            $scope.validateSave = function(){
                if( !$scope.receiptCounsel.OUT_LGROUP_CODE ){
                    BaseService.alertWarning("Enter Major Category.", function(){
                        setTimeout(function(){
                            $('#inpCounselPopupOutLgroupCode').focus();
                        }, 200);
                    });
                    return false;
                }
                if( !$scope.receiptCounsel.OUT_MGROUP_CODE ){
                    BaseService.alertWarning("Enter Middle Category.", function(){
                        setTimeout(function(){
                            $('#inpCounselPopupOutMgroupCode').focus();
                        }, 200);
                    });
                    return false;
                }
                if( !$scope.receiptCounsel.PROC_NOTE ){
                    BaseService.alertWarning("Enter Content", function(){
                        setTimeout(function(){
                            $('#txtArCounselPopupProcNote').focus();
                        }, 200);
                    });
                    return false;
                }
                return true;
            }
            
            $scope.cancelClick = function(){
                $('#' + $scope.popupId).modal('hide');
            };
            
            $scope.$on('counsel_receipt_popup_counsel_lgroup_picker.select', function(e, data){
                $scope.receiptCounsel.OUT_LGROUP_CODE = data.CODE_MGROUP;
                $scope.receiptCounsel.OUT_LGROUP_NAME = data.CODE_NAME;
                $scope.receiptCounsel.OUT_MGROUP_CODE = "";
                $scope.receiptCounsel.OUT_MGROUP_NAME = "";
                
                //----- set catagory group filter parameter -----//
                $scope.popupCounselGroupParams.code_lgroup = data.REMARK;
                $scope.popupCounselGroupParams.code_mgroup = "";
                setTimeout(function(){
                	$('#inpCounselPopupOutMgroupCode').focus();
                	$scope.$apply();
                },200);
            });
            
            $scope.$on('counsel_receipt_popup_counsel_lgroup_picker.clear', function(e, data){
                $scope.receiptCounsel.OUT_LGROUP_CODE = "";
                $scope.receiptCounsel.OUT_LGROUP_NAME = "";
                $scope.receiptCounsel.OUT_MGROUP_CODE = "";
                $scope.receiptCounsel.OUT_MGROUP_NAME = "";
                $scope.popupCounselGroupParams.code_lgroup = "";
                $scope.popupCounselGroupParams.code_mgroup = "";
                $scope.$apply();
            });
                        
            $scope.$on('counsel_receipt_popup_counsel_mgroup_picker.select', function(e, data){
                $scope.receiptCounsel.OUT_LGROUP_CODE = data.LGROUP;
                $scope.receiptCounsel.OUT_LGROUP_NAME = data.LGROUP_NAME;
                $scope.receiptCounsel.OUT_MGROUP_CODE = data.MGROUP;
                $scope.receiptCounsel.OUT_MGROUP_NAME = data.MGROUP_NAME;
                
              //----- set catagory group filter parameters -----//
                $scope.popupCounselGroupParams.code_lgroup = data.REMARK;
                setTimeout(function(){
                	$('#inpCounselPopupOutDDD').focus();
                	$scope.$apply();
                },200);
                
                
            });
            
            $scope.$on('counsel_receipt_popup_counsel_mgroup_picker.clear', function(e, data){
                $scope.receiptCounsel.OUT_MGROUP_CODE = "";
                $scope.receiptCounsel.OUT_MGROUP_NAME = "";
                $scope.popupCounselGroupParams.code_mgroup = "";
                $scope.$apply();
            });
            
            $scope.$on('counsel_receipt_popup_item_picker.select', function(e, data){
            	$scope.receiptCounsel.GOODS_CODE = data.GOODS_CODE;
            	$scope.receiptCounsel.GOODS_NAME = data.GOODS_NAME;
            	if($scope.receiptCounsel.GOODSDT_CODE){
            		$scope.receiptCounsel.GOODSDT_CODE = "";
            		$scope.receiptCounsel.GOODSDT_INFO = "";
            	}
            	$scope.itemParams.goods_code = data.GOODS_CODE;
            	setTimeout(function(){
                	$('#inpCounselPopupGoodsDtCode').focus();
                	$scope.$apply();
                },200);
            });
            
            $scope.$on('counsel_receipt_popup_item_picker.clear', function(e, data){
            	$scope.receiptCounsel.GOODS_CODE = "";
            	$scope.receiptCounsel.GOODS_NAME = "";
            	$scope.receiptCounsel.GOODSDT_CODE = "";
            	$scope.receiptCounsel.GOODSDT_INFO = "";
            	
            	 $scope.itemParams.goods_code = "";
                $scope.$apply();
            });
            
            $scope.$on('counsel_receipt_popup_item_dt_picker.select', function(e, data){
            	$scope.receiptCounsel.GOODS_CODE = data.GOODS_CODE;
            	$scope.receiptCounsel.GOODS_NAME = data.GOODS_NAME;
            	$scope.receiptCounsel.GOODSDT_CODE = data.GOODSDT_CODE;
            	$scope.receiptCounsel.GOODSDT_INFO = data.GOODSDT_INFO;
            	
            	setTimeout(function(){
                	$('#inpCounselPopupOutLgroupCode').focus();
                	$scope.$apply();
                },200);
            	
            });
            
            $scope.$on('counsel_receipt_popup_item_dt_picker.clear', function(e, data){
            	$scope.receiptCounsel.GOODSDT_CODE = "";
            	$scope.receiptCounsel.GOODSDT_INFO = "";
            	//$scope.itemParams.goods_code = "";
                $scope.$apply();
            });
            
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'counsel_receipt_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
        }
    }
});

app.directive('counselProcessPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/counselProcessPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');
                
              //item control
                $('#counsel_process_popup_input_item_picker .picker-button').on('click', function(e){
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
                });
                
                $('#counsel_process_popup_input_item_picker .picker-input').on('keyup', function(e){
                	if(e.keyCode == 113){
                		$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
                	}
                });
                
                $('#counsel_process_popup_item_picker').on('hidden.bs.modal', function () {
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 1);
                });
                //item control
                
                $scope.processCounsel = $scope.popupParam.processCounsel;
                $scope.selectedDoFlag = null;
                setTimeout(function(){
                    $scope.getPopupData();
                }, 200);
                
                //clear popup param
                $scope.popupCounselGroupParams = {};
            });
            
            $scope.getPopupData = function(){
                //P_ORDER_BROAD_GOODS = 1202
                var filter = {
                    do_flag: $scope.processCounsel.DO_FLAG,
                    sheetName:'sheet'
                };
            	BaseService.getPopupData("popup/retrieve-counsel-receipt", filter).then(
	                function(response){
                        $scope.cmbDoFlags = response.data.result.C_C039;
                        $scope.selectedDoFlag = $scope.cmbDoFlags[0];
	                }
	            );
                $scope.popupSelectedData = {};
            };
            
            $scope.confirmClick = function(){
            	if($scope.validateSave()){
                    var saveParam = [];
                
                    //set type combobox
                    $scope.processCounsel.DO_FLAG = ($scope.selectedDoFlag != null)?$scope.selectedDoFlag.code:"";

                    $scope.processCounsel.cwareAction = "I";

                    saveParam.push($scope.processCounsel);

                    if(saveParam.length != 0){

                        var data = {"saveParam" : saveParam};

                        BaseService.savePopupData('popup/save-counsel-process', data).then(
                            function(response){
                                BaseService.alertSaveSuccess(function(){
                                    $scope.$emit($scope.popupId + ".confirm");
                                    $('#' + $scope.popupId).modal('hide');
                                });
                            },
                            function(response){
                                BaseService.alertError(response.message);
                            }
                        );
                    }
                }
            };
            
            $scope.validateSave = function(){
                if( $scope.processCounsel.PROC_NOTE == ""){
                    BaseService.alertWarning("Enter Content", function(){
                        setTimeout(function(){
                            setTimeout(function(){
                                $('#txtArCounselProcProcNote').focus();
                            },200);
                        },200);
                    });
                    return false;
                }
                return true;
            }
            
            $scope.cancelClick = function(){
                $('#' + $scope.popupId).modal('hide');
            };
            
            $scope.$on('counsel_process_popup_item_picker.select', function(e, data){
            	$scope.processCounsel.GOODS_CODE = data.GOODS_CODE;
            	$scope.processCounsel.GOODS_NAME = data.GOODS_NAME;
            	$scope.$apply();
            });
            
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'counsel_process_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
        }
    }
});

app.directive('orderBroadcastItemPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/orderBroadcastItemPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.cmbChannels = [];
            $scope.cmbSaleGb = [];
            $scope.selectedChannel = {};
            $scope.selectedItem = {};
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');

                setTimeout(function(){
                    $scope.cmbChannels = $scope.popupParam.cmbChannels;
                    $scope.selectedChannel = BaseService.findObject($scope.cmbChannels, 'code', $scope.popupParam.selectedChannelCode);
                	$scope.getPopupData();
                }, 200);     
            });
            
            $scope.getPopupData = function(){
                //P_ORDER_BROAD_GOODS = 1202
                var filter = {
                    media_code: ($scope.selectedChannel == null) ? "" : $scope.selectedChannel.code
                };
            	BaseService.getPopupData("popup/retrieve/1202", filter).then(
	                function(respone){
                        $scope.popupData = respone.data.result;
                        $scope.cmbSaleGb = respone.data.c_sale_gb;
                        
                        $scope.renderTable($scope.popupData);
                        BaseService.focusTableRow($scope.table, 0);
	                }
	            );
                $scope.popupSelectedData = {};
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    $scope.table = $('#table_order_broadcast_item_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "GOODS_CODE",
                            "class": "text-center",
                        }, {
                            "data": "GOODS_NAME"
                        }, {
                            "data": "ORDER_POSSIBLE",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0)
                            }
                        }, {
                            "data": "MEDIA_NAME",
                            "class": "text-center",
                        }, {
                            "data": "SALE_PRICE",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 2)
                            }
                        }, {
                            "data": "PRODUCT_LINE1",
                            "class": "text-center"
                        }, {
                            "data": "DELIVERY_LOCATION1",
                            "class": "text-center"
                        }, {
                            "data": "SALE_GB",
                            "class": "text-center",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.cmbSaleGb, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                        }, {
                            "data": "BROAD_SEQ",
                            "class": "text-center"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table, 0);
                    BaseService.generateTooltip($scope.table);
                    
                    setTimeout(function(){
                        $scope.table.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentRow = this;
                            var aData = $scope.table.api().row(this).data();
                            if(aData != null){
                                $scope.popupSelectedData = aData;
                                $scope.$apply();
                            }
                        });
                        
                        $scope.table.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                            var aData = $scope.table.api().row(this).data();
                            if(aData != null){
                                $scope.popupSelectedData = aData;
                                $scope.$emit($scope.popupId + ".confirm", angular.copy(aData));
                                $('#' + $scope.popupId).modal('hide');
                            }
                        });
                    }, 50);
                }
            };
            
            
            
            $scope.inquiryClick = function(){
                $scope.getPopupData();
            };
            
            $scope.confirmClick = function(){
                $scope.$emit($scope.popupId + ".confirm", angular.copy($scope.popupSelectedData));
                $('#' + $scope.popupId).modal('hide');
            };
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'order_broadcast_item_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
        }
    }
});

app.directive('orderPromotionListPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/orderPromotionListPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');

                setTimeout(function(){
                    $scope.popupData = $scope.popupParam.dataPromotion;
                    $scope.cmbAppType = $scope.popupParam.cmbAppType;
                    $scope.cmbDoType = $scope.popupParam.cmbDoType;
                    $scope.renderTable($scope.popupData);
                    $scope.$apply();
                }, 200);     
            });
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    $scope.table = $('#table_order_promotion_list_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "APP_TYPE",
                            "class": "text-center",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.cmbAppType, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                        }, {
                            "data": "DO_TYPE",
                            "class": "text-center",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.cmbDoType, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                        }, {
                            "data": "COUPON_YN",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "0") ? false : true;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" disabled="disabled"></table-checkbox>';
                            }
                        }, {
                            "data": "FIRST_ORDER_YN",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "0") ? true : false;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" disabled="disabled"></table-checkbox>';
                            }
                        }, {
                            "data": "PROMO_NO",
                            "class": "text-center",
                        }, {
                            "data": "PROMO_NAME"
                        }, {
                            "data": "AMOUNT",
                            "class": "text-right",
                            "render": function(data, type, row){
                                if(!data) return "";
                                return BaseService.formatDecimal(data, 2)
                            }
                        }, {
                            "data": "LOTTERYPROMO_NO"
                        }, {
                            "data": "COUPON_PROMO_NO"
                        }, {
                            "data": "COUPON_LOTTERY_PROMO_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table, 0);
                    BaseService.generateTooltip($scope.table);
                    
                    setTimeout(function(){
                        $scope.table.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentRow = this;
                            var aData = $scope.table.api().row(this).data();
                            if(aData != null){
                                $scope.popupSelectedData = aData;
                                $scope.$apply();
                            }
                        });
                    }, 50);
                }
            };
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'order_promotion_list_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
        }
    }
});

app.directive('itemStockPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/itemStockPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.selectedItem = {};
            $scope.cmbWhCode = [];
            $scope.cmbSaleGb = [];
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');
                
                $scope.getPopupHeaderData();

                setTimeout(function(){
                    if($scope.popupParam != null){
                        if($scope.popupParam.goods_code != null){
                            $scope.selectedItem.GOODS_CODE = $scope.popupParam.goods_code;
                            $scope.selectedItem.GOODS_NAME = $scope.popupParam.goods_name;
                            $scope.getPopupData();
                        }
                    }
                }, 200);
                
                $('#item_stock_popup_input_item_picker button.picker-button').on('click', function(e){
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
                });
                
                $('#item_stock_popup_input_item_picker .master-picker-input').on('keyup', function(e){
                	if(e.keyCode == 113){
                		$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
                	}
                });
                
                $('#item_stock_popup_item_picker').on('hidden.bs.modal', function () {
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 1);
                });
                
                $('#' + $scope.popupId).on('hidden.bs.modal', function () {
                    $scope.popupData = null;
                    $scope.popupSelectedData = {};
                    $scope.selectedItem = {};
                    if($scope.table != null){
                        $scope.table.fnClearTable();
                        $scope.table.fnDestroy();
                    }
                });
                
                setTimeout(function(){
                	$('#minor_item_stock_input').focus()
	            	 $scope.$apply();
	             }, 200);
            });
            
            $scope.getPopupHeaderData = function(){
                //P_ORDER_STOCK = 1179
            	BaseService.getPopupData("popup/retrieve/1179/header").then(
	                function(respone){
                        $scope.cmbWhCode = respone.data.C_WH_CODE;
                        $scope.cmbSaleGb = respone.data.C_SALE_GB;
	                }
	            );
                $scope.popupSelectedData = {};
            };
            
            $scope.getPopupData = function(){
                //P_ORDER_STOCK = 1179
                var filter = {
                    goods_code: ($scope.selectedItem.GOODS_CODE == null) ? "" : $scope.selectedItem.GOODS_CODE
                };
            	BaseService.getPopupData("popup/retrieve/1179", filter).then(
	                function(respone){
                        $scope.popupData = respone.data.result;
                        
                        if($scope.popupData)
                        	if($scope.popupData.length > 0){
                        		$scope.selectedItem.GOODS_NAME = $scope.popupData[0].GOODS_NAME;
                        		
                        	}
                        $scope.renderTable($scope.popupData);
                        BaseService.focusTableRow($scope.table, 0);
                        
                        setTimeout(function(){
                        $scope.$apply();
       	             }, 200);
	                }
	            );
                $scope.popupSelectedData = {};

            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){

                    $scope.table = $('#table_item_stock_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "WH_CODE",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.cmbWhCode, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                        }, {
                            "data": "GOODS_CODE",
                            "class": "text-center"
                        }, {
                            "data": "GOODS_NAME"
                        }, {
                            "data": "GOODSDT_CODE",
                            "class": "text-center"
                        }, {
                            "data": "GOODSDT_INFO"
                        }, {
                            "data": "COUNSEL_QTY",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0);
                            }
                        }, {
                            "data": "ORDER_QTY",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0);
                            }
                        }, {
                            "data": "OUT_PLAN_QTY",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0);
                            }
                        }, {
                            "data": "BALJU_QTY",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0);
                            }
                        }, {
                            "data": "AQTY",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0);
                            }
                        }, {
                            "data": "NET_SALE_QTY",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0)
                            }
                        }, {
                            "data": "TOT_SALE_QTY",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0);
                            }
                        }, {
                            "data": "CALC_CUR_QTY",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0);
                            }
                        }, {
                            "data": "SALE_GB",
                            "class": "text-center",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.cmbSaleGb, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table, 0);
                    BaseService.generateTooltip($scope.table);
                    
                    setTimeout(function(){
                        $scope.table.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentRow = this;
                            var aData = $scope.table.api().row(this).data();
                            if(aData != null){
                                $scope.popupSelectedData = aData;
                                $scope.$apply();
                            }
                        });
                    }, 50);
                }
            };
            
            $scope.onEnterPress = function(e){
            	
            	setTimeout(function(){
            		
            		 if(e.which == 13 && $scope.selectedItem != null){
            			
            			 $scope.alreadyEnterPress = true;
            			 
            			 var data = {
            					 goods_code : $scope.selectedItem.GOODS_CODE
            			 }
                 		
            			 BaseService.getPickerData(1002, data).then(
                                 function(respone){
                                	 if(respone.data.result.length > 0){
                                		 $scope.selectedItem.GOODS_CODE = respone.data.result[0].GOODS_CODE;
                                    	 $scope.selectedItem.GOODS_NAME = respone.data.result[0].GOODS_NAME;
                                	 }
                                	 else{
                                		 $scope.selectedItem = {};
                                		 
                                	 }
                                },
                                 function(respone){
                                	 $scope.selectedItem = {};
                                	
                                 }
                         );
                 		
            			 	 
                 	}
            		 
                 }, 100);
            	
            };
            
            $scope.inquiryClick = function(){
//                if($scope.selectedItem.GOODS_CODE == null){
//                    BaseService.alertWarning("Please Enter Item code.");
//                    return;
//                }
//                $scope.getPopupData();
            	setTimeout(function(){
                    if($scope.selectedItem.GOODS_CODE == null || $scope.selectedItem.GOODS_CODE == ""){
                        BaseService.alertWarning("Please Enter Item code." ,function(){
                        	setTimeout(function(){
                        		$('#minor_item_stock_input').focus();
                        		$scope.$apply();
                            }, 200);
                        });
                        return;
                    }
                    else{
                    	
                    	if($scope.alreadyEnterPress == false){
                    		$scope.getPopupData();
                    		setTimeout(function(){
                        		
                        		$scope.$apply();
                            }, 200);
                        	
                    	}
                    	else{
                    		$scope.alreadyEnterPress = false;
                    	}
                        
                    }
                	}, 100);
            };
            
            $scope.$on('item_stock_popup_item_picker.select', function(e, data){
                $scope.selectedItem = data;
                $scope.$apply();
                
                setTimeout(function(){
                    $scope.getPopupData();
                }, 200);
            });
            $scope.$on('item_stock_popup_item_picker.clear', function(e){
                $scope.selectedItem = {};
                $scope.$apply();
            });
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'item_stock_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
        }
    }
});

app.directive('masterItemStockPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/masterItemStockPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.selectedItem = {};
            $scope.cmbWhCode = [];
            $scope.cmbSaleGb = [];
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
            	$scope.alreadyEnterPress = false;
                $('#' + $scope.popupId).modal('show');
                
                $scope.getPopupHeaderData();
                setTimeout(function(){
                    if($scope.popupParam != null){
                        if($scope.popupParam.goods_code != null){
                            $scope.selectedItem.GOODS_CODE = $scope.popupParam.goods_code;
                            $scope.selectedItem.GOODS_NAME = $scope.popupParam.goods_name;
                            $scope.getPopupData();
                        }
                    }
                }, 200);
                
                $('#master_item_stock_popup_input_item_picker button.picker-button').on('click', function(e){
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
                });
                
                $('#master_item_stock_popup_input_item_picker .master-picker-input').on('keyup', function(e){
                	if(e.keyCode == 113){
                		
                		$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
                	}
                });
                
                $('#master_item_stock_popup_item_picker').on('hidden.bs.modal', function () {
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 1);
                });
                
                $('#' + $scope.popupId).on('hidden.bs.modal', function () {
                    $scope.popupData = null;
                    $scope.popupSelectedData = {};
                    $scope.selectedItem = {};
                    if($scope.table != null){
                        $scope.table.fnClearTable();
                        $scope.table.fnDestroy();
                    }
                });
                
                setTimeout(function(){
                	 $('#master_item_stock_input').focus();
	            	 $scope.$apply();
	             }, 200);
                
               
            });
            
            $scope.getPopupHeaderData = function(){
                //P_ORDER_STOCK = 1179
            	BaseService.getPopupData("popup/retrieve/1179/header").then(
	                function(respone){
                        $scope.cmbWhCode = respone.data.C_WH_CODE;
                        $scope.cmbSaleGb = respone.data.C_SALE_GB;
	                }
	            );
                $scope.popupSelectedData = {};
            };
            
            $scope.getPopupData = function(){
                //P_ORDER_STOCK = 1179
                var filter = {
                    goods_code: ($scope.selectedItem.GOODS_CODE == null) ? "" : $scope.selectedItem.GOODS_CODE
                };
            	BaseService.getPopupData("popup/retrieve/1179", filter).then(
	                function(respone){
                        $scope.popupData = respone.data.result;
                        if($scope.popupData)
                        	if($scope.popupData.length > 0){
                        		$scope.selectedItem.GOODS_NAME = $scope.popupData[0].GOODS_NAME;
                        		
                        	}
                        $scope.renderTable($scope.popupData);
                        BaseService.focusTableRow($scope.table, 0);
                        
                        setTimeout(function(){
                            $scope.$apply();
           	             }, 200);
	                }
	            );
                $scope.popupSelectedData = {};

            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){

                    $scope.table = $('#table_master_item_stock_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "WH_CODE",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.cmbWhCode, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                        }, {
                            "data": "GOODS_CODE",
                            "class": "text-center"
                        }, {
                            "data": "GOODS_NAME"
                        }, {
                            "data": "GOODSDT_CODE",
                            "class": "text-center"
                        }, {
                            "data": "GOODSDT_INFO"
                        }, {
                            "data": "COUNSEL_QTY",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0);
                            }
                        }, {
                            "data": "ORDER_QTY",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0);
                            }
                        }, {
                            "data": "OUT_PLAN_QTY",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0);
                            }
                        }, {
                            "data": "BALJU_QTY",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0);
                            }
                        }, {
                            "data": "AQTY",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0);
                            }
                        }, {
                            "data": "NET_SALE_QTY",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0)
                            }
                        }, {
                            "data": "TOT_SALE_QTY",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0);
                            }
                        }, {
                            "data": "CALC_CUR_QTY",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0);
                            }
                        }, {
                            "data": "SALE_GB",
                            "class": "text-center",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.cmbSaleGb, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table, 0);
                    BaseService.generateTooltip($scope.table);
                    
                    setTimeout(function(){
                        $scope.table.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentRow = this;
                            var aData = $scope.table.api().row(this).data();
                            if(aData != null){
                                $scope.popupSelectedData = aData;
                                $scope.$apply();
                            }
                        });
                    }, 50);
                }
            };
            
            $scope.onEnterPress = function(e){
            	//oo
            	setTimeout(function(){
            		
            		 if(e.which == 13 && $scope.selectedItem != null){
            			
            			 $scope.alreadyEnterPress = true;
            			 
            			 var data = {
            					 goods_code : $scope.selectedItem.GOODS_CODE
            			 }
                 		
            			 BaseService.getPickerData(1002, data).then(
                                 function(respone){
                                	 if(respone.data.result.length > 0){
                                		 $scope.selectedItem.GOODS_CODE = respone.data.result[0].GOODS_CODE;
                                    	 $scope.selectedItem.GOODS_NAME = respone.data.result[0].GOODS_NAME;
                                	 }
                                	 else{
                                		 $scope.selectedItem = {};
                                		 
                                	 }
                                },
                                 function(respone){
                                	 $scope.selectedItem = {};
                                	
                                 }
                         );
                 		
            			 	 
                 	}
            		 
                 }, 100);
            	
            };
            
            $scope.inquiryClick = function(){
//            	console.log('here')
//                if($scope.selectedItem.GOODS_CODE == null){
//                    BaseService.alertWarning("Please Enter Item code.");
//                    return;
//                }
//                $scope.getPopupData();
            	setTimeout(function(){
                    if($scope.selectedItem.GOODS_CODE == null || $scope.selectedItem.GOODS_CODE == ""){
                        BaseService.alertWarning("Please Enter Item code." ,function(){
                        	setTimeout(function(){
                        		$('#master_item_stock_input').focus();
                        		$scope.$apply();
                            }, 200);
                        });
                        return;
                    }
                    else{
                    	
                    	if($scope.alreadyEnterPress == false){
                    		$scope.getPopupData();
                    		setTimeout(function(){
                        		$scope.$apply();
                            }, 200);
                        	
                    	}
                    	else{
                    		$scope.alreadyEnterPress = false;
                    	}
                        
                    }
                	}, 100);
            };
            
            $scope.$on('master_item_stock_popup_item_picker.select', function(e, data){
                $scope.selectedItem = data;
                $scope.$apply();
                
                setTimeout(function(){
                    $scope.getPopupData();
                }, 200);
            });
            $scope.$on('master_item_stock_popup_item_picker.clear', function(e){
                $scope.selectedItem = {};
                $scope.$apply();
            });
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'master_item_stock_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
        }
    }
});

app.directive('itemDescriptionPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/itemDescriptionPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.selectedItem = {};
            $scope.cmbWhCode = [];
            $scope.cmbSaleGb = [];
            $scope.currentTab = 0;
            $scope.descriptionMinorData = {};
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
            	
            	$scope.currentTab = 0;
            	
            	$scope.popupData = null;
            	$scope.popupDataWorkShare = null;
            	$scope.popupDataWarning = null;
            	$scope.popupDataReturn = null;
            	
            	$scope.descriptionMinorData = {};
            	
            	$scope.popupSelectedDataWorkShare = null;
                $scope.popupSelectedDataWarning = null;
                $scope.popupSelectedDataReturn = null;
                
                $scope.alreadyEnterPress = false;
                        
            	
                $('#' + $scope.popupId).modal('show');
                
                $scope.popupParam = ($scope.popupParam == null)? {} : $scope.popupParam;
                
                setTimeout(function(){
                	$('#input_item_picker_item_description_popup').focus();
                	$scope.$apply();
                }, 500);
                
                

                setTimeout(function(){
                    if($scope.popupParam != null){
                        if($scope.popupParam.goods_code != null){
                            $scope.selectedItem.GOODS_CODE = $scope.popupParam.goods_code;
                            $scope.selectedItem.GOODS_NAME = $scope.popupParam.goods_name;
                            $scope.getPopupData();
                        }
                    }
                }, 200);
                
                $('#item_description_popup_input_item_picker button.picker-button').on('click', function(e){
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
                });
                
                $('#item_description_popup_input_item_picker .picker-input').on('keyup', function(e){
                	if(e.keyCode == 113){
                		$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
                	}
                });
                
                $('#item_description_popup_item_picker').on('hidden.bs.modal', function () {
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 1);
                });
                
                $('#description_minor_btn').on('click', function(e){
                	
            		$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
            	
                });
                
                $('#minor_item_description_popup').on('hidden.bs.modal', function () {
                	
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 1);
                });
                
                $('#' + $scope.popupId).on('hidden.bs.modal', function () {
                    $scope.popupData = null;
                    $scope.popupSelectedData = {};
                    $scope.selectedItem = {};
                    if($scope.table_work_share != null){
                        $scope.table_work_share.fnClearTable();
                        $scope.table_work_share.fnDestroy();
                    }
                    if($scope.table_warning != null){
                        $scope.table_warning.fnClearTable();
                        $scope.table_warning.fnDestroy();
                    }
                    if($scope.table_return != null){
                        $scope.table_return.fnClearTable();
                        $scope.table_return.fnDestroy();
                    }
                });
                
                
                
                
                
            });
            
            
            
            $scope.getPopupData = function(){
            	
            	$scope.popupData = null;
            	$scope.popupDataWorkShare = null;
            	$scope.popupDataWarning = null;
            	$scope.popupDataReturn = null;
            	
            	$scope.descriptionMinorData = {};
            	
                //P_GOODS_DESCRIBE = 1204
                var filter = {
                    goods_code: ($scope.selectedItem.GOODS_CODE == null) ? "" : $scope.selectedItem.GOODS_CODE
                };
            	BaseService.getPopupData("popup/retrieve-many/1204", filter).then(
	                function(respone){
	                	
                        $scope.popupData = respone.data.result.RESULT_GOODS_INFO[0];
                        $scope.popupDataDescribe = respone.data.result.RESULT_GOODS_DESCRIBE;
                        
                        if($scope.popupData){
                        	
    						$scope.popupData.SAVEAMT = BaseService.formatDecimal($scope.popupData.SAVEAMT, 2, '.', ',');
    						$scope.popupData.CUST_PRICE = BaseService.formatDecimal($scope.popupData.CUST_PRICE, 2, '.', ',');
    						$scope.popupData.SALE_PRICE = BaseService.formatDecimal($scope.popupData.SALE_PRICE, 2, '.', ',');	
    						$scope.selectedItem.GOODS_NAME = $scope.popupData.GOODS_NAME;
    						
                            }
                            else
                            	$scope.selectedItem.GOODS_NAME = "";
                        
                        
                    		
//                        	$scope.popupData.SAVEAMT = BaseService.formatDecimal($scope.popupData.SAVEAMT, 2, '.', ',');
//                    		$scope.popupData.CUST_PRICE = BaseService.formatDecimal($scope.popupData.CUST_PRICE, 2, '.', ',');
//                    		$scope.popupData.SALE_PRICE = BaseService.formatDecimal($scope.popupData.SALE_PRICE, 2, '.', ',');
                        
                        
	                	$scope.popupDataWorkShare = respone.data.result.RESULT_GOODS_SHARE;
	                	$scope.popupDataWarning = respone.data.result.RESULT_GOODS_CAUTION;
	                	$scope.popupDataReturn = respone.data.result.RESULT_GOODS_RETURN;
	                	
	                	if($scope.popupDataWorkShare)
	                	$.each($scope.popupDataWorkShare, function(index, item){
	                		
	                		item.checkModify = false;
	                    	
	                    });
	                	
	                	if($scope.popupDataWarning)
	                	$.each($scope.popupDataWarning, function(index, item){
	                		
	                		item.checkModify = false;
	                    });

	                	if($scope.popupDataReturn)
	                	$.each($scope.popupDataReturn, function(index, item){
	
	                		item.checkModify = false;
	                	});
                        
	                	
	                	$scope.renderTableWorkShare($scope.popupDataWorkShare);
	                	BaseService.focusTableRow($scope.table_work_share, 0);
	                	
	                	$scope.renderTableWarning($scope.popupDataWarning);
	                	BaseService.focusTableRow($scope.table_warning, 0);
	                	
	                	$scope.renderTableReturn($scope.popupDataReturn);
	                	BaseService.focusTableRow($scope.table_return, 0);
	                	
                        //$scope.renderTable($scope.popupData);
                        
	                }
	            );
                $scope.popupSelectedDataWorkShare = null;
                $scope.popupSelectedDataWarning = null;
                $scope.popupSelectedDataReturn = null;

            };
            
            $scope.btnCloseClick = function(){
            	$('#' + $scope.popupId).modal('hide');
            	setTimeout(function(){
            		$scope.$emit('order_item_picker.show');
            	},200);
            };
            
            $scope.validatePopupDeleteClicked = function(dataSource,selectedData,table){
            	swal({ 
                    title: "Question ?",
                    text: "Delete ?",
                    type: "warning",
                    showCancelButton: false,
                    showRejectButton: true,
                    confirmButtonText: "Yes"
                }, function(button){
                	if(button == 'confirm'){
                    	setTimeout(function(){
                    		 _.remove(dataSource, { "rowId": selectedData.rowId });
                    		 
                    		 
                    		
                    		 if($scope.currentTab == 1)
                             $scope.renderTableWorkShare(dataSource);
                    		 else if($scope.currentTab == 2)
                                 $scope.renderTableWarning(dataSource);
                    		 else if($scope.currentTab == 3)
                                 $scope.renderTableReturn(dataSource);
                    		 
                             BaseService.focusTableRow(table, -1);
                        },500);
                    }
                    else if(button == 'reject') {
                    	setTimeout(function(){
                    		
                    },500);
                    }
                });
            };
            
            $scope.getPickerGoodsName = function(){
            	
            	if($scope.selectedItem.GOODS_CODE != ""){
            		
            		 var data = {
           					 goods_code : $scope.selectedItem.GOODS_CODE
           			 }
                		
           			 BaseService.getPickerData(1002, data).then(
                                function(respone){
                               	 if(respone.data.result.length > 0){
                               		 $scope.selectedItem.GOODS_CODE = respone.data.result[0].GOODS_CODE;
                                   	 $scope.selectedItem.GOODS_NAME = respone.data.result[0].GOODS_NAME;
                               	 }
                               	 else{
                               		 $scope.selectedItem = {};
                               		 
                               	 }
                               },
                                function(respone){
                               	 $scope.selectedItem = {};
                               	
                                }
                        );
            		
            		
            	}
            };
            
            $scope.validatePopupSaveChange = function(event,currentTab){
            	
            	swal({ 
                    title: "Question ?",
                    text: "Details changed. Do you want to save?",
                    type: "info",
                    showCancelButton: true,
                    showRejectButton: true,
                    confirmButtonText: "Yes"
                }, function(button){
                	if(button == 'confirm'){
                		if(currentTab == 1){
                			setTimeout(function(){
                				$scope.saveWorkShare(); 
                            },200);
                		}
                		else if(currentTab == 2){
                			setTimeout(function(){
                				$scope.saveWarning();
                            },200);
                		}
                		else if(currentTab == 3){
                			setTimeout(function(){
                				$scope.saveReturn();
                            },200);
                		}
                    	
                    }
                    else if(button == 'reject') {
                    	setTimeout(function(){
                    		$scope.getPopupData();
                    },200);
                    }
                });
            	
            	event.originalEvent;
            	return;
            	
            	
            };
            
           $scope.checkDataTabModify = function(popupData){
            	
            	var isValid = false;
            	$.each(popupData, function(index, item){
            		
                	if(item.cwareAction != null){
                		isValid = true;
                		return false;	
            		}
                });
            	
            	if(isValid){
            		return true;
            	}
            	
            	return false;
            };
            
            $scope.onPopUpItemDescriptionChange = function(event,tabIndex){
            	//tabIndex 0 = Item Information
            	//tabIndex 1 = Work Share
            	//and so on ...
            	
            	if($scope.currentTab == 1){
            		if($scope.checkDataTabModify($scope.popupDataWorkShare)){
            			event.stopImmediatePropagation();
            			$scope.validatePopupSaveChange(event,$scope.currentTab);
            			return;
            		}
            	}
            	else if($scope.currentTab == 2){
            		if($scope.checkDataTabModify($scope.popupDataWarning)){
            			event.stopImmediatePropagation();
            			$scope.validatePopupSaveChange(event,$scope.currentTab);
            			return;
            		}
            	}
            	else if($scope.currentTab == 3){
            		if($scope.checkDataTabModify($scope.popupDataReturn )){
            			event.stopImmediatePropagation();
            			$scope.validatePopupSaveChange(event,$scope.currentTab);
            			return;
            		}
            	}
            	
            	$scope.currentTab = tabIndex;
//            	return;
            };
            
            
            //Work share tab
            $scope.renderTableWorkShare = function(dataSource){
                if(dataSource != null){

                    $scope.table_work_share = $('#table_work_share_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "SEQ_NO",
                            
                        }, {
                            "data": "TITLE1"
                        }, {
                            "data": "INSERT_ID",
                           
                        }, {
                            "data": "INSERT_DATE"
                        }
                        ],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table_work_share, 0);
                    BaseService.generateTooltip($scope.table_work_share);
                    
                    setTimeout(function(){
                        $scope.table_work_share.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentWorkShare = this;
                            var aData = $scope.table_work_share.api().row(this).data();
                            if(aData != null){
                                $scope.popupSelectedDataWorkShare = aData;
                                $scope.$apply();
                            }
                        });
                    }, 50);
                }
            };
            
            $scope.onWorkShareChange = function(fieldName){
            	
            	if($scope.table_work_share && $scope.currentWorkShare != null && $scope.popupSelectedDataWorkShare != null){
            		
            		$scope.popupSelectedDataWorkShare.checkModify = true;
            		
            		if($scope.popupSelectedDataWorkShare.cwareAction == null){
            			$scope.popupSelectedDataWorkShare.cwareAction = "U";
            			
            		}
            		
            		if(fieldName == "TITLE1"){
            			
            			 $scope.table_work_share.api()
                  		.cell($scope.currentWorkShare.childNodes[2])
                  		.data($scope.popupSelectedDataWorkShare.TITLE1)
                  		.draw(); 
            			
            			
            			setTimeout(function(){
                            $scope.$apply();
                        },50);
            			
            		}
            		
            	}
            	
            };
            
            $scope.insertWorkShare = function(){
            	
            	$scope.popupDataWorkShare = ($scope.popupDataWorkShare == null) ? [] : $scope.popupDataWorkShare;
           	 	var workShare = {
           	 		SEQ_NO:"",
           	 		TITLE1:"",
           	 		CONTENTS:"",
           	 		SHARE_FLAG: "00",
           	 		GOODS_CODE: $scope.selectedItem.GOODS_CODE,
           	 		INSERT_ID:"",
           	 		INSERT_DATE:"",
           			cwareAction: "I",
    				rowId : BaseService.generateId(18)
           		 }
           	 	$scope.popupDataWorkShare.push(workShare);
           	 	$scope.renderTableWorkShare($scope.popupDataWorkShare);
           	 	BaseService.focusTableRow($scope.table_work_share,-1);
           	 	
           	 	
           	 setTimeout(function(){
           		$("#table-container").animate({ 
                    scrollTop: $('#table-container').prop("scrollHeight")
           		}, 200);
           		
           		$("#input_title_work_share_popup").focus();
           		
             },200);
            	
            	
            };
            
            $scope.deleteWorkShare = function(){
            	
            	if($scope.popupSelectedDataWorkShare != null){
    	   			
 	   		       if($scope.popupSelectedDataWorkShare.cwareAction == "I"){
 	   		    	   
 	   		    	   if($scope.popupSelectedDataWorkShare.checkModify == true){
 	   		    		   
 	   		    		$scope.validatePopupDeleteClicked($scope.popupDataWorkShare,$scope.popupSelectedDataWorkShare,$scope.table_work_share);
 	   		    	   }
 	   		    	   else{
 	   		    		_.remove($scope.popupDataWorkShare, { "rowId": $scope.popupSelectedDataWorkShare.rowId });
 	   		    		$scope.popupSelectedDataWorkShare = null;
 	   		    		$scope.renderTableWorkShare($scope.popupDataWorkShare);
 	   		    		BaseService.focusTableRow($scope.table_work_share,-1);
 	   		    		
 	   		    	   }
 	   		    	
 	   		       }
 	   		       else {
 	   		    	BaseService.alertWarning("Existing data cannot be deleted.");
 	   		          
 	   		       }
 	   		   }
 	   		   else {
 	   			BaseService.alertNoDeleteData();
 	   		       }
            	
            };
            
            $scope.validateSaveWorkShare = function(){
            	var isValid = true;
            	var msg = '';
            	
            	$.each($scope.popupDataWorkShare, function(index, item){
            		
                	if(item.CONTENTS == "" || item.CONTENTS == '' || item.CONTENTS == null){
                		isValid = false;
                		msg = mainMessage.message.require_row("Detail",index);
            			
            			BaseService.alertWarning(msg , function() { 
                    		setTimeout(function(){
                    			BaseService.focusTableRow($scope.table_work_share,index);
                            	$('#input_detail_work_share_popup').focus();   
                            },200);
                            });
            			return false;	
            		}
                });
            	
            	$.each($scope.popupDataWorkShare, function(index, item){
            		
                	if(item.TITLE1 == "" || item.TITLE1 == '' || item.TITLE1 == null){
                		isValid = false;
                		msg = mainMessage.message.require_row("Title",index);
            			
            			BaseService.alertWarning(msg , function() { 
                    		setTimeout(function(){
                    			BaseService.focusTableRow($scope.table_work_share,index);
                    			$('#input_title_work_share_popup').focus();   
                                
                            },200);
                            });
            			return false;	
            		}
                });
            	
            	if(!isValid){
            		return false;
            	}
            	
            	return true;
            	
            	
            	
            }
            
            $scope.saveWorkShare = function(){
            	
            	if($scope.validateSaveWorkShare()){
            	
            		var paramGoodsShare = [];       
                	$.each($scope.popupDataWorkShare, function(index, item){
                		if(item.cwareAction != null){
                           if(item.cwareAction == "I" || item.cwareAction == "U"){
                        	   var goodsShare = {
                        			   TITLE1: item.TITLE1,
                        			   CONTENTS: item.CONTENTS,
                        			   SHARE_FLAG: item.SHARE_FLAG,
                        			   GOODS_CODE: item.GOODS_CODE,
                        			   SEQ_NO: item.SEQ_NO,
                        			   cwareAction: item.cwareAction
                               };
                        	   paramGoodsShare.push(goodsShare);
                            }
                        }
                    });
                	
                	if(paramGoodsShare.length > 0){
                    	
                        var data = {"paramGoodsShare":paramGoodsShare};
                       
                        BaseService.savePopupData('popup/save-goods-share', data).then(
                                function(response){
                                    
                                        BaseService.alertSaveSuccess(function(){
                                            $scope.getPopupData();
                                        });
                                    
                                    
                                },
                                function(response){
                                    BaseService.alertError(response.message);
                                }
                            );
                        
                        
                        
                    } else {
                    	BaseService.alertNoSaveData();
                    }
            		
            		
            	}
            	
            	
            };
            //End Work share tab
            
            
          //Warning tab
            $scope.renderTableWarning = function(dataSource){
                if(dataSource != null){

                    $scope.table_warning = $('#table_warning_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "SEQ_NO",
                            
                        }, {
                            "data": "TITLE1_CAUTION"
                        }, {
                            "data": "INSERT_ID",
                           
                        }, {
                            "data": "INSERT_DATE"
                        }
                        ],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table_warning, 0);
                    BaseService.generateTooltip($scope.table_warning);
                    
                    setTimeout(function(){
                        $scope.table_warning.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentWarning = this;
                            var aData = $scope.table_warning.api().row(this).data();
                            if(aData != null){
                            	$scope.popupSelectedDataWarning = aData;
                                $scope.$apply();
                            }
                        });
                    }, 50);
                }
            };
            
            $scope.onWarningChange = function(fieldName){
            	
            	if($scope.table_warning && $scope.currentWarning != null && $scope.popupSelectedDataWarning != null){
            		
            		$scope.popupSelectedDataWarning.checkModify = true;
            		
            		if($scope.popupSelectedDataWarning.cwareAction == null){
            			$scope.popupSelectedDataWarning.cwareAction = "U";
            		}
            		
            		if(fieldName == "TITLE1_CAUTION"){
            			
            			 $scope.table_warning.api()
                  		.cell($scope.currentWorkShare.childNodes[2])
                  		.data($scope.popupSelectedDataWarning.TITLE1_CAUTION)
                  		.draw(); 
            			
            			
            			setTimeout(function(){
                            $scope.$apply();
                        },50);
            		}
            	}
            	
            };
            
            $scope.insertWarning = function(){
            	
            	$scope.popupDataWarning = ($scope.popupDataWarning == null) ? [] : $scope.popupDataWarning;
           	 	var warning = {
           	 		SEQ_NO:"",
           	 		TITLE1_CAUTION:"",
           	 		CONTENTS_CAUTION:"",
           	 		SHARE_FLAG: "10",
           	 		GOODS_CODE: $scope.selectedItem.GOODS_CODE,
           	 		INSERT_ID:"",
           	 		INSERT_DATE:"",
           			cwareAction: "I",
    				rowId : BaseService.generateId(18)
           		 }
           	 	$scope.popupDataWarning.push(warning);
           	 	$scope.renderTableWarning($scope.popupDataWarning);
           	 	BaseService.focusTableRow($scope.table_warning,-1);
           	 	
           	 	
           	 setTimeout(function(){
           		$("#table-container").animate({ 
                    scrollTop: $('#table-container').prop("scrollHeight")
           		}, 200);
           		
           		$("#input_title_warning_popup").focus();
           		
             },200);
            	
            	
            };
            
            $scope.deleteWarning = function(){
            	
            	if($scope.popupSelectedDataWarning != null){
    	   			
 	   		       if($scope.popupSelectedDataWarning.cwareAction == "I"){
 	   		    	   
 	   		    	if($scope.popupSelectedDataWarning.checkModify == true){
	   		    		   
 	   		    		$scope.validatePopupDeleteClicked($scope.popupDataWarning,$scope.popupSelectedDataWarning,$scope.table_warning);
 	   		    	   }
 	   		    	   
 	   		       else{
 	   		    	_.remove($scope.popupDataWarning, { "rowId": $scope.popupSelectedDataWarning.rowId });
 	   		    	$scope.popupSelectedDataWarning = null;
 	   		    	$scope.renderTableWarning($scope.popupDataWarning);
           	 		BaseService.focusTableRow($scope.table_warning,-1);
           	 		
 	   		       }
 	   		    	
 	   		       }
 	   		       else {
 	   		    	BaseService.alertWarning("Existing data cannot be deleted.");
 	   		          
 	   		       }
 	   		   }
 	   		   else {
 	   			BaseService.alertNoDeleteData();
 	   		       }
            	
            };
            
            $scope.validateSaveWarning = function(){
            	var isValid = true;
            	var msg = '';
            	
            	$.each($scope.popupDataWarning, function(index, item){
            		
                	if(item.CONTENTS_CAUTION == "" || item.CONTENTS_CAUTION == '' || item.CONTENTS_CAUTION == null){
                		isValid = false;
                		msg = mainMessage.message.require_row("Detail",index);
            			
            			BaseService.alertWarning(msg , function() { 
                    		setTimeout(function(){
                    			BaseService.focusTableRow($scope.table_warning,index);
                            	$('#input_detail_warning_popup').focus();   
                            },200);
                            });
            			return false;	
            		}
                });
            	
            	$.each($scope.popupDataWarning, function(index, item){
            		
                	if(item.TITLE1_CAUTION == "" || item.TITLE1_CAUTION == '' || item.TITLE1_CAUTION == null){
                		isValid = false;
                		msg = mainMessage.message.require_row("Title",index);
            			
            			BaseService.alertWarning(msg , function() { 
                    		setTimeout(function(){
                    			BaseService.focusTableRow($scope.table_warning,index);
                    			$('#input_title_warning_popup').focus();   
                                
                            },200);
                            });
            			return false;	
            		}
                });
            	
            	if(!isValid){
            		return false;
            	}
            	
            	return true;
            	
            	
            	
            }
            
            $scope.saveWarning = function(){
            	
            	if($scope.validateSaveWarning()){
            	
            		var paramWarning = [];       
                	$.each($scope.popupDataWarning, function(index, item){
                		if(item.cwareAction != null){
                           if(item.cwareAction == "I" || item.cwareAction == "U"){
                        	   var warning = {
                        			   TITLE1_CAUTION: item.TITLE1_CAUTION,
                        			   CONTENTS_CAUTION: item.CONTENTS_CAUTION,
                        			   SHARE_FLAG: item.SHARE_FLAG,
                        			   GOODS_CODE: item.GOODS_CODE,
                        			   SEQ_NO: item.SEQ_NO,
                        			   cwareAction: item.cwareAction
                               };
                        	   paramWarning.push(warning);
                            }
                        }
                    });
                	
                	if(paramWarning.length > 0){
                    	
                        var data = {"paramWarning":paramWarning};
                       
                        BaseService.savePopupData('popup/save-goods-share-caution', data).then(
                                function(response){
                                    
                                        BaseService.alertSaveSuccess(function(){
                                            $scope.getPopupData();
                                        });
                                    
                                    
                                },
                                function(response){
                                    BaseService.alertError(response.message);
                                }
                            );
                        
                        
                        
                    } else {
                    	BaseService.alertNoSaveData();
                    }
            		
            		
            	}
            	
            	
            };
            //End Warning tab
            
            
          //Return tab
            $scope.renderTableReturn = function(dataSource){
                if(dataSource != null){

                    $scope.table_return = $('#table_return_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "SEQ_NO",
                            
                        }, {
                            "data": "TITLE1_RETURN"
                        }, {
                            "data": "INSERT_ID",
                           
                        }, {
                            "data": "INSERT_DATE"
                        }
                        ],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table_return, 0);
                    BaseService.generateTooltip($scope.table_return);
                    
                    setTimeout(function(){
                        $scope.table_return.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentReturn = this;
                            var aData = $scope.table_return.api().row(this).data();
                            if(aData != null){
                            	$scope.popupSelectedDataReturn = aData;
                                $scope.$apply();
                            }
                        });
                    }, 50);
                }
            };
            
            $scope.onReturnChange = function(fieldName){
            	
            	if($scope.table_return && $scope.currentReturn != null && $scope.popupSelectedDataReturn != null){
            		
            		$scope.popupSelectedDataReturn.checkModify = true;
            		
            		if($scope.popupSelectedDataReturn.cwareAction == null){
            			$scope.popupSelectedDataReturn.cwareAction = "U";
            		}
            		
            		if(fieldName == "TITLE1_RETURN"){
            			
            			 $scope.table_return.api()
                  		.cell($scope.currentReturn.childNodes[2])
                  		.data($scope.popupSelectedDataReturn.TITLE1_RETURN)
                  		.draw(); 
            			
            			
            			setTimeout(function(){
                            $scope.$apply();
                        },50);
            			
            		}
            	}
            	
            };
            
            $scope.insertReturn = function(){
            	
            	$scope.popupDataReturn = ($scope.popupDataReturn == null) ? [] : $scope.popupDataReturn;
           	 	var returnData = {
           	 		SEQ_NO:"",
           	 		TITLE1_RETURN:"",
           	 		CONTENTS_RETURN:"",
           	 		SHARE_FLAG: "20",
           	 		GOODS_CODE: $scope.selectedItem.GOODS_CODE,
           	 		INSERT_ID:"",
           	 		INSERT_DATE:"",
           			cwareAction: "I",
    				rowId : BaseService.generateId(18)
           		 }
           	 	$scope.popupDataReturn.push(returnData);
           	 	$scope.renderTableReturn($scope.popupDataReturn);
           	 	BaseService.focusTableRow($scope.table_return,-1);
           	 	
           	 	
           	 setTimeout(function(){
           		$("#table-container").animate({ 
                    scrollTop: $('#table-container').prop("scrollHeight")
           		}, 200);
           		
           		$("#input_title_return_popup").focus();
           		
             },200);
            	
            	
            };
            
            $scope.deleteReturn = function(){
            	
            	if($scope.popupSelectedDataReturn != null){
    	   			
 	   		       if($scope.popupSelectedDataReturn.cwareAction == "I"){
 	   		    	   
 	   		    	if($scope.popupSelectedDataReturn.checkModify == true){
	   		    		   
 	   		    		$scope.validatePopupDeleteClicked($scope.popupDataReturn,$scope.popupSelectedDataReturn,$scope.table_return);
 	   		    	   }
 	   		    	else{
 	   		    	_.remove($scope.popupDataReturn, { "rowId": $scope.popupSelectedDataReturn.rowId });
 	   		    	$scope.popupSelectedDataReturn = null;
 	   		    	$scope.renderTableReturn($scope.popupDataReturn);
 	   		    	BaseService.focusTableRow($scope.table_return,-1);
 	   		    	
 	   		    	}

 	   		    	
 	   		       }
 	   		       else {
 	   		    	BaseService.alertWarning("Existing data cannot be deleted.");
 	   		          
 	   		       }
 	   		   }
 	   		   else {
 	   			BaseService.alertNoDeleteData();
 	   		       }
            	
            };
            
            $scope.validateSaveReturn = function(){
            	var isValid = true;
            	var msg = '';
            	
            	$.each($scope.popupDataReturn, function(index, item){
            		
                	if(item.CONTENTS_RETURN == "" || item.CONTENTS_RETURN == '' || item.CONTENTS_RETURN == null){
                		isValid = false;
                		msg = mainMessage.message.require_row("Detail",index);
            			
            			BaseService.alertWarning(msg , function() { 
                    		setTimeout(function(){
                    			BaseService.focusTableRow($scope.table_return,index);
                            	$('#input_detail_return_popup').focus();   
                            },200);
                            });
            			return false;	
            		}
                });
            	
            	$.each($scope.popupDataReturn, function(index, item){
            		
                	if(item.TITLE1_RETURN == "" || item.TITLE1_RETURN == '' || item.TITLE1_RETURN == null){
                		isValid = false;
                		msg = mainMessage.message.require_row("Title",index);
            			
            			BaseService.alertWarning(msg , function() { 
                    		setTimeout(function(){
                    			BaseService.focusTableRow($scope.table_return,index);
                    			$('#input_title_return_popup').focus();   
                                
                            },200);
                            });
            			return false;	
            		}
                });
            	
            	if(!isValid){
            		return false;
            	}
            	
            	return true;
            	
            	
            	
            }
            
            $scope.saveReturn = function(){
            	
            	if($scope.validateSaveReturn()){
            	
            		var paramReturn = [];       
                	$.each($scope.popupDataReturn, function(index, item){
                		if(item.cwareAction != null){
                           if(item.cwareAction == "I" || item.cwareAction == "U"){
                        	   var returnData = {
                        			   TITLE1_RETURN: item.TITLE1_RETURN,
                        			   CONTENTS_RETURN: item.CONTENTS_RETURN,
                        			   SHARE_FLAG: item.SHARE_FLAG,
                        			   GOODS_CODE: item.GOODS_CODE,
                        			   SEQ_NO: item.SEQ_NO,
                        			   cwareAction: item.cwareAction
                               };
                        	   paramReturn.push(returnData);
                            }
                        }
                    });
                	
                	if(paramReturn.length > 0){
                    	
                        var data = {"paramReturn":paramReturn};
                       
                        BaseService.savePopupData('popup/save-goods-share-return', data).then(
                                function(response){
                                    
                                        BaseService.alertSaveSuccess(function(){
                                            $scope.getPopupData();
                                        });
                                    
                                    
                                },
                                function(response){
                                    BaseService.alertError(response.message);
                                }
                            );
                    } else {
                    	BaseService.alertNoSaveData();
                    }
            		
            		
            	}
            	
            	
            };
            //End Return tab
            
            
            $scope.inquiryClick = function(){
//                if($scope.selectedItem.GOODS_CODE == null){
//                    BaseService.alertWarning("Please Enter Item code.",function(){
//                    	setTimeout(function(){
//                    		$('#input_item_picker_item_description_popup').focus();
//                    		$scope.$apply();
//                        }, 200);
//                    });
//                    return;
//                }
//                $scope.getPopupData();
                
                
                setTimeout(function(){
                    if($scope.selectedItem.GOODS_CODE == null || $scope.selectedItem.GOODS_CODE == ""){
                        BaseService.alertWarning("Please Enter Item code." ,function(){
                        	setTimeout(function(){
                        		$('#input_item_picker_item_description_popup').focus();
                        		$scope.$apply();
                            }, 200);
                        });
                        return;
                    }
                    else{
                    	if($scope.alreadyEnterPress == false){
                    		$scope.getPopupData();
                        	
                    	}
                    	else{
                    		$scope.alreadyEnterPress = false;
                    	}
                        
                    }
                	}, 100);
            };
            
            $scope.descriptionMinorClick = function(){
            	if($scope.popupDataDescribe){
            		
            		var descriptionCLOB = '';
            		
            		var des_ext = '';
            		
            		$.each($scope.popupDataDescribe, function(index, item){
            			
            			des_ext = (item.DESCRIBE_EXT) ? item.DESCRIBE_EXT : "";
            			
            			descriptionCLOB += '<b style="color:blue">[ '+ item.DESCRIBE_TITLE + ' ]</b><br><br>';
            			descriptionCLOB +=  des_ext + '<br><br>';
                    });
            		
            		$scope.descriptionMinorData.CLOB = descriptionCLOB;
            		
            		setTimeout(function(){
            		$scope.$broadcast('minor_item_description_popup.open');
            		},200);
            	}
            	
            }
            
            
            $scope.onEnterPress = function(e){
            	//xx
            	setTimeout(function(){
            		
            		 if(e.which == 13 && $scope.selectedItem != null){
            			
            			 $scope.alreadyEnterPress = true;
            			 
            			 var data = {
            					 goods_code : $scope.selectedItem.GOODS_CODE
            			 }
                 		
            			 BaseService.getPickerData(1002, data).then(
                                 function(respone){
                                	 if(respone.data.result.length > 0){
                                		 $scope.selectedItem.GOODS_CODE = respone.data.result[0].GOODS_CODE;
                                    	 $scope.selectedItem.GOODS_NAME = respone.data.result[0].GOODS_NAME;
                                	 }
                                	 else{
                                		 $scope.selectedItem = {};
                                		 
                                	 }
                                },
                                 function(respone){
                                	 $scope.selectedItem = {};
                                	
                                 }
                         );
                 		
            			 	 
                 	}
            		 
                 }, 100);
            	
            }
            
            $scope.getPickerGoodsName = function(){
            	
            	
             if($scope.selectedItem.GOODS_CODE != null || $scope.selectedItem.GOODS_CODE != ""){
            	 var data = {
       					 goods_code : $scope.selectedItem.GOODS_CODE
       			 }
            		
       			 BaseService.getPickerData(1002, data).then(
                            function(respone){
                           	 if(respone.data.result.length > 0){
                           		 $scope.selectedItem.GOODS_CODE = respone.data.result[0].GOODS_CODE;
                               	 $scope.selectedItem.GOODS_NAME = respone.data.result[0].GOODS_NAME;
                           	 }
                           	 else{
                           		 $scope.selectedItem = {};
                           		 
                           	 }
                           },
                            function(respone){
                           	 $scope.selectedItem = {};
                           	
                            }
                    );
             }	
             
   			 
            };
            
            $scope.$on('item_description_popup_item_picker.select', function(e, data){
                $scope.selectedItem = data;
                $scope.$apply();
                
                setTimeout(function(){
                    $scope.getPopupData();
                }, 200);
            });
            $scope.$on('item_description_popup_item_picker.clear', function(e){
                $scope.selectedItem = {};
                $scope.$apply();
            });
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'make_order_item_description_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
        }
    }
});

app.directive('masterItemDescriptionPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/masterItemDescriptionPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.selectedItem = {};
           
            $scope.cmbWhCode = [];
            $scope.cmbSaleGb = [];
            $scope.currentTab = 0;
            
            $scope.masterDescriptionMinorData = {};
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
            	$scope.selectedItem.GOODS_CODE = "";
            	$scope.currentTab = 0;
            	
            	$scope.masterDescriptionMinorData = {};
            	
            	$scope.popupData = null;
            	$scope.popupDataWorkShare = null;
            	$scope.popupDataWarning = null;
            	$scope.popupDataReturn = null;
            	
            	$scope.popupSelectedDataWorkShare = null;
                $scope.popupSelectedDataWarning = null;
                $scope.popupSelectedDataReturn = null;
                
                $scope.alreadyEnterPress = false;
            	
            	
                
            	
                $('#' + $scope.popupId).modal('show');
                
                setTimeout(function(){
                	$('#master_input_item_picker_item_description_popup').focus();
                	$scope.$apply();
                }, 500);
                
                setTimeout(function(){
                    if($scope.popupParam != null){
                        if($scope.popupParam.goods_code != null){
                            $scope.selectedItem.GOODS_CODE = $scope.popupParam.goods_code;
                            $scope.selectedItem.GOODS_NAME = $scope.popupParam.goods_name;
                            $scope.getPopupData();
                        }
                    }
                }, 200);
                
                $('#master_item_description_popup_input_item_picker button.picker-button').on('click', function(e){
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
                });
                
                $('#master_item_description_popup_input_item_picker .master-picker-input').on('keyup', function(e){
                	if(e.keyCode == 113){
                		$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
                	}
                });
                
                
                
                $('#master_item_description_popup_item_picker').on('hidden.bs.modal', function () {
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 1);
                });
                
                
                $('#master_description_minor_btn').on('click', function(e){
                	
            		$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 0);
            	
                });
                
                $('#master_description_popup').on('hidden.bs.modal', function () {
                	$('#' + $scope.popupId + ' .modal-content-wrapper').css('opacity', 1);
                });
                
                
                
                $('#' + $scope.popupId).on('hidden.bs.modal', function () {
                    $scope.popupData = null;
                    $scope.popupSelectedData = {};
                    $scope.selectedItem = {};
                    if($scope.table_work_share != null){
                        $scope.table_work_share.fnClearTable();
                        $scope.table_work_share.fnDestroy();
                    }
                    if($scope.table_warning != null){
                        $scope.table_warning.fnClearTable();
                        $scope.table_warning.fnDestroy();
                    }
                    if($scope.table_return != null){
                        $scope.table_return.fnClearTable();
                        $scope.table_return.fnDestroy();
                    }
                });
                
                
                
                
                
            });
            
            $scope.getPopupData = function(){
            	
            	$scope.popupData = null;
            	$scope.popupDataWorkShare = null;
            	$scope.popupDataWarning = null;
            	$scope.popupDataReturn = null;
            	
            	$scope.popupDataDescribe = null;
            	$scope.masterDescriptionMinorData = {};
            	
            	
            	
                //P_GOODS_DESCRIBE = 1204
                var filter = {
                    goods_code: ($scope.selectedItem.GOODS_CODE == null) ? "" : $scope.selectedItem.GOODS_CODE
                };
            	BaseService.getPopupData("popup/retrieve-many/1204", filter).then(
	                function(respone){
	                	
                        $scope.popupData = respone.data.result.RESULT_GOODS_INFO[0];
                        $scope.popupDataDescribe = respone.data.result.RESULT_GOODS_DESCRIBE;
                        
                        
                       
                        
                        if($scope.popupData){
                        	
						$scope.popupData.SAVEAMT = BaseService.formatDecimal($scope.popupData.SAVEAMT, 2, '.', ',');
						$scope.popupData.CUST_PRICE = BaseService.formatDecimal($scope.popupData.CUST_PRICE, 2, '.', ',');
						$scope.popupData.SALE_PRICE = BaseService.formatDecimal($scope.popupData.SALE_PRICE, 2, '.', ',');	
						$scope.selectedItem.GOODS_NAME = $scope.popupData.GOODS_NAME;
						
                        }
                        else
                        	$scope.selectedItem.GOODS_NAME = "";
                        
                        
	                	$scope.popupDataWorkShare = respone.data.result.RESULT_GOODS_SHARE;
	                	$scope.popupDataWarning = respone.data.result.RESULT_GOODS_CAUTION;
	                	$scope.popupDataReturn = respone.data.result.RESULT_GOODS_RETURN;
	                	
	                	if($scope.popupDataWorkShare)
	                	$.each($scope.popupDataWorkShare, function(index, item){
	                		
	                		item.checkModify = false;
	                    	
	                    });
	                	
	                	if($scope.popupDataWarning)
	                	$.each($scope.popupDataWarning, function(index, item){
	                		
	                		item.checkModify = false;
	                    });

	                	if($scope.popupDataReturn)
	                	$.each($scope.popupDataReturn, function(index, item){
	
	                		item.checkModify = false;
	                	});
                        
	                	
	                	$scope.renderTableWorkShare($scope.popupDataWorkShare);
	                	BaseService.focusTableRow($scope.table_work_share, 0);
	                	
	                	$scope.renderTableWarning($scope.popupDataWarning);
	                	BaseService.focusTableRow($scope.table_warning, 0);
	                	
	                	$scope.renderTableReturn($scope.popupDataReturn);
	                	BaseService.focusTableRow($scope.table_return, 0);
	                	
                        //$scope.renderTable($scope.popupData);
                        
	                	
	                	
	                }
	            );
                $scope.popupSelectedDataWorkShare = null;
                $scope.popupSelectedDataWarning = null;
                $scope.popupSelectedDataReturn = null;
                
                
                
                
                

            };
            
            $scope.btnCloseClick = function(){
            	$('#' + $scope.popupId).modal('hide');
            };
            
            $scope.validatePopupDeleteClicked = function(dataSource,selectedData,table){
            	swal({ 
                    title: "Question ?",
                    text: "Delete ?",
                    type: "warning",
                    showCancelButton: false,
                    showRejectButton: true,
                    confirmButtonText: "Yes"
                }, function(button){
                	if(button == 'confirm'){
                    	setTimeout(function(){
                    		 _.remove(dataSource, { "rowId": selectedData.rowId });
                    		 if($scope.currentTab == 1)
                             $scope.renderTableWorkShare(dataSource);
                    		 else if($scope.currentTab == 2)
                                 $scope.renderTableWarning(dataSource);
                    		 else if($scope.currentTab == 3)
                                 $scope.renderTableReturn(dataSource);
                    		 
                             BaseService.focusTableRow(table, -1);
                        },500);
                    }
                    else if(button == 'reject') {
                    	setTimeout(function(){
                    		
                    },500);
                    }
                });
            }
            
            $scope.validatePopupSaveChange = function(event,currentTab){
            	
            	swal({ 
                    title: "Question ?",
                    text: "Details changed. Do you want to save?",
                    type: "info",
                    showCancelButton: true,
                    showRejectButton: true,
                    confirmButtonText: "Yes"
                }, function(button){
                	if(button == 'confirm'){
                		if(currentTab == 1){
                			setTimeout(function(){
                				$scope.saveWorkShare(); 
                            },200);
                		}
                		else if(currentTab == 2){
                			setTimeout(function(){
                				$scope.saveWarning();
                            },200);
                		}
                		else if(currentTab == 3){
                			setTimeout(function(){
                				$scope.saveReturn();
                            },200);
                		}
                    	
                    }
                    else if(button == 'reject') {
                    	setTimeout(function(){
                    		$scope.getPopupData();
                    },200);
                    }
                });
            	
            	event.originalEvent;
            	return;
            	
            	
            };
            
            $scope.checkDataTabModify = function(popupData){
            	
            	var isValid = false;
            	$.each(popupData, function(index, item){
            		
                	if(item.cwareAction != null){
                		isValid = true;
                		return false;	
            		}
                });
            	
            	if(isValid){
            		return true;
            	}
            	
            	return false;
            };
            
            $scope.onPopUpItemDescriptionChange = function(event,tabIndex){
            	//tabIndex 0 = Item Information
            	//tabIndex 1 = Work Share
            	//and so on ...
            	
            	if($scope.currentTab == 1){
            		if($scope.checkDataTabModify($scope.popupDataWorkShare)){
            			event.stopImmediatePropagation();
            			$scope.validatePopupSaveChange(event,$scope.currentTab);
            			return;
            		}
            	}
            	else if($scope.currentTab == 2){
            		if($scope.checkDataTabModify($scope.popupDataWarning)){
            			event.stopImmediatePropagation();
            			$scope.validatePopupSaveChange(event,$scope.currentTab);
            			return;
            		}
            	}
            	else if($scope.currentTab == 3){
            		if($scope.checkDataTabModify($scope.popupDataReturn )){
            			event.stopImmediatePropagation();
            			$scope.validatePopupSaveChange(event,$scope.currentTab);
            			return;
            		}
            	}
            	
            	$scope.currentTab = tabIndex;
//            	return;
            };
            
            
            //Work share tab
            $scope.renderTableWorkShare = function(dataSource){
                if(dataSource != null){

                    $scope.table_work_share = $('#master_table_work_share_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "SEQ_NO",
                            
                        }, {
                            "data": "TITLE1"
                        }, {
                            "data": "INSERT_ID",
                           
                        }, {
                            "data": "INSERT_DATE"
                        }
                        ],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table_work_share, 0);
                    BaseService.generateTooltip($scope.table_work_share);
                    
                    setTimeout(function(){
                        $scope.table_work_share.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentWorkShare = this;
                            var aData = $scope.table_work_share.api().row(this).data();
                            if(aData != null){
                                $scope.popupSelectedDataWorkShare = aData;
                                $scope.$apply();
                            }
                        });
                    }, 50);
                }
            };
            
            $scope.onWorkShareChange = function(fieldName){
            	
            	if($scope.table_work_share && $scope.currentWorkShare != null && $scope.popupSelectedDataWorkShare != null){
            		
            		$scope.popupSelectedDataWorkShare.checkModify = true;
            		
            		if($scope.popupSelectedDataWorkShare.cwareAction == null){
            			$scope.popupSelectedDataWorkShare.cwareAction = "U";
            			
            		}
            		
            		if(fieldName == "TITLE1"){
            			
            			 $scope.table_work_share.api()
                  		.cell($scope.currentWorkShare.childNodes[2])
                  		.data($scope.popupSelectedDataWorkShare.TITLE1)
                  		.draw(); 
            			
            			
            			setTimeout(function(){
                            $scope.$apply();
                        },50);
            			
            		}
            		
            	}
            	
            };
            
            $scope.insertWorkShare = function(){
            	
            	$scope.popupDataWorkShare = ($scope.popupDataWorkShare == null) ? [] : $scope.popupDataWorkShare;
           	 	var workShare = {
           	 		SEQ_NO:"",
           	 		TITLE1:"",
           	 		CONTENTS:"",
           	 		SHARE_FLAG: "00",
           	 		GOODS_CODE: $scope.selectedItem.GOODS_CODE,
           	 		INSERT_ID:"",
           	 		INSERT_DATE:"",
           			cwareAction: "I",
           			checkModify: false,
    				rowId : BaseService.generateId(18)
           		 }
           	 	$scope.popupDataWorkShare.push(workShare);
           	 	$scope.renderTableWorkShare($scope.popupDataWorkShare);
           	 	BaseService.focusTableRow($scope.table_work_share,-1);
           	 	
           	 	
           	 setTimeout(function(){
           		$("#table-container").animate({ 
                    scrollTop: $('#table-container').prop("scrollHeight")
           		}, 200);
           		
           		$("#master_input_title_work_share_popup").focus();
           		
             },200);
            	
            	
            };
            
            $scope.deleteWorkShare = function(){
            	
            	if($scope.popupSelectedDataWorkShare != null){
    	   			
 	   		       if($scope.popupSelectedDataWorkShare.cwareAction == "I"){
 	   		    	   
 	   		    	   if($scope.popupSelectedDataWorkShare.checkModify == true){
 	   		    		   
 	   		    		$scope.validatePopupDeleteClicked($scope.popupDataWorkShare,$scope.popupSelectedDataWorkShare,$scope.table_work_share);
 	   		    	   }
 	   		    	   else{
 	   		    		_.remove($scope.popupDataWorkShare, { "rowId": $scope.popupSelectedDataWorkShare.rowId });
 	   		    		$scope.popupSelectedDataWorkShare = null;
 	   		    		$scope.renderTableWorkShare($scope.popupDataWorkShare);
 	           	 		BaseService.focusTableRow($scope.table_work_share,-1);
 	           	 		
 	           	 		
 	   		    	   }
 	   		    	
 	   		       }
 	   		       else {
 	   		    	BaseService.alertWarning("Existing data cannot be deleted.");
 	   		          
 	   		       }
 	   		   }
 	   		   else {
 	   			BaseService.alertNoDeleteData();
 	   		       }
            	
            };
            
            $scope.validateSaveWorkShare = function(){
            	var isValid = true;
            	var msg = '';
            	
            	$.each($scope.popupDataWorkShare, function(index, item){
            		
                	if(item.CONTENTS == "" || item.CONTENTS == '' || item.CONTENTS == null){
                		isValid = false;
                		msg = mainMessage.message.require_row("Detail",index);
            			BaseService.alertWarning(msg , function() { 
                    		setTimeout(function(){
                    			BaseService.focusTableRow($scope.table_work_share,index);
                            	$('#master_input_detail_work_share_popup').focus();   
                            },200);
                            });
            			return false;	
            		}
                });
            	
            	$.each($scope.popupDataWorkShare, function(index, item){
            		
                	if(item.TITLE1 == "" || item.TITLE1 == '' || item.TITLE1 == null){
                		isValid = false;
                		msg = mainMessage.message.require_row("Title",index);
                		
            			BaseService.alertWarning(msg , function() { 
                    		setTimeout(function(){
                    			BaseService.focusTableRow($scope.table_work_share,index);
                    			$('#master_input_title_work_share_popup').focus();   
                                
                            },200);
                            });
            			return false;	
            		}
                });
            	
            	if(!isValid){
            		return false;
            	}
            	
            	return true;
            	
            	
            	
            }
            
            $scope.saveWorkShare = function(){
            	
            	if($scope.validateSaveWorkShare()){
            	
            		var paramGoodsShare = [];       
                	$.each($scope.popupDataWorkShare, function(index, item){
                		if(item.cwareAction != null){
                           if(item.cwareAction == "I" || item.cwareAction == "U"){
                        	   var goodsShare = {
                        			   TITLE1: item.TITLE1,
                        			   CONTENTS: item.CONTENTS,
                        			   SHARE_FLAG: item.SHARE_FLAG,
                        			   GOODS_CODE: item.GOODS_CODE,
                        			   SEQ_NO: item.SEQ_NO,
                        			   cwareAction: item.cwareAction
                               };
                        	   paramGoodsShare.push(goodsShare);
                            }
                        }
                    });
                	
                	if(paramGoodsShare.length > 0){
                    	
                        var data = {"paramGoodsShare":paramGoodsShare};
                       
                        BaseService.savePopupData('popup/save-goods-share', data).then(
                                function(response){
                                    
                                        BaseService.alertSaveSuccess(function(){
                                            $scope.getPopupData();
                                        });
                                    
                                    
                                },
                                function(response){
                                    BaseService.alertError(response.message);
                                }
                            );
                        
                        
                        
                    } else {
                    	BaseService.alertNoSaveData();
                    }
            		
            		
            	}
            	
            	
            };
            //End Work share tab
            
            
          //Warning tab
            $scope.renderTableWarning = function(dataSource){
                if(dataSource != null){

                    $scope.table_warning = $('#master_table_warning_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "SEQ_NO",
                            
                        }, {
                            "data": "TITLE1_CAUTION"
                        }, {
                            "data": "INSERT_ID",
                           
                        }, {
                            "data": "INSERT_DATE"
                        }
                        ],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table_warning, 0);
                    BaseService.generateTooltip($scope.table_warning);
                    
                    setTimeout(function(){
                        $scope.table_warning.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentWarning = this;
                            var aData = $scope.table_warning.api().row(this).data();
                            if(aData != null){
                            	$scope.popupSelectedDataWarning = aData;
                                $scope.$apply();
                            }
                        });
                    }, 50);
                }
            };
            
            $scope.onWarningChange = function(fieldName){
            	
            	if($scope.table_warning && $scope.currentWarning != null && $scope.popupSelectedDataWarning != null){
            		
            		$scope.popupSelectedDataWarning.checkModify = true;
            		
            		if($scope.popupSelectedDataWarning.cwareAction == null){
            			$scope.popupSelectedDataWarning.cwareAction = "U";
            		}
            		
            		if(fieldName == "TITLE1_CAUTION"){
            			
            			 $scope.table_warning.api()
                  		.cell($scope.currentWorkShare.childNodes[2])
                  		.data($scope.popupSelectedDataWarning.TITLE1_CAUTION)
                  		.draw(); 
            			
            			
            			setTimeout(function(){
                            $scope.$apply();
                        },50);
            			
            		}
            	}
            	
            };
            
            $scope.insertWarning = function(){
            	
            	$scope.popupDataWarning = ($scope.popupDataWarning == null) ? [] : $scope.popupDataWarning;
           	 	var warning = {
           	 		SEQ_NO:"",
           	 		TITLE1_CAUTION:"",
           	 		CONTENTS_CAUTION:"",
           	 		SHARE_FLAG: "10",
           	 		GOODS_CODE: $scope.selectedItem.GOODS_CODE,
           	 		INSERT_ID:"",
           	 		INSERT_DATE:"",
           			cwareAction: "I",
    				rowId : BaseService.generateId(18)
           		 }
           	 	$scope.popupDataWarning.push(warning);
           	 	$scope.renderTableWarning($scope.popupDataWarning);
           	 	BaseService.focusTableRow($scope.table_warning,-1);
           	 	
           	 	
           	 setTimeout(function(){
           		$("#table-container").animate({ 
                    scrollTop: $('#table-container').prop("scrollHeight")
           		}, 200);
           		
           		$("#master_input_title_warning_popup").focus();
           		
             },200);
            	
            	
            };
            
            $scope.deleteWarning = function(){
            	
            	if($scope.popupSelectedDataWarning != null){
    	   			
 	   		       if($scope.popupSelectedDataWarning.cwareAction == "I"){
 	   		    	   
 	   		    	if($scope.popupSelectedDataWarning.checkModify == true){
	   		    		   
 	   		    		$scope.validatePopupDeleteClicked($scope.popupDataWarning,$scope.popupSelectedDataWarning,$scope.table_warning);
 	   		    	   }
 	   		    	   
 	   		       else{
 	   		    	_.remove($scope.popupDataWarning, { "rowId": $scope.popupSelectedDataWarning.rowId });
 	   		    	$scope.popupSelectedDataWarning = null;
 	   		    	$scope.renderTableWarning($scope.popupDataWarning);
           	 		BaseService.focusTableRow($scope.table_warning,-1);
           	 		
 	   		       }
 	   		    	
 	   		       }
 	   		       else {
 	   		    	BaseService.alertWarning("Existing data cannot be deleted.");
 	   		          
 	   		       }
 	   		   }
 	   		   else {
 	   			BaseService.alertNoDeleteData();
 	   		       }
            	
            };
            
            $scope.validateSaveWarning = function(){
            	var isValid = true;
            	var msg = '';
            	
            	$.each($scope.popupDataWarning, function(index, item){
            		
                	if(item.CONTENTS_CAUTION == "" || item.CONTENTS_CAUTION == '' || item.CONTENTS_CAUTION == null){
                		isValid = false;
                		msg = mainMessage.message.require_row("Detail",index);
            			
            			BaseService.alertWarning(msg , function() { 
                    		setTimeout(function(){
                    			BaseService.focusTableRow($scope.table_warning,index);
                            	$('#master_input_detail_warning_popup').focus();   
                            },200);
                            });
            			return false;	
            		}
                });
            	
            	$.each($scope.popupDataWarning, function(index, item){
            		
                	if(item.TITLE1_CAUTION == "" || item.TITLE1_CAUTION == '' || item.TITLE1_CAUTION == null){
                		isValid = false;
                		msg = mainMessage.message.require_row("Title",index);
            			
            			BaseService.alertWarning(msg , function() { 
                    		setTimeout(function(){
                    			BaseService.focusTableRow($scope.table_warning,index);
                    			$('#master_input_title_warning_popup').focus();   
                                
                            },200);
                            });
            			return false;	
            		}
                });
            	
            	if(!isValid){
            		return false;
            	}
            	
            	return true;
            	
            	
            	
            }
            
            $scope.saveWarning = function(){
            	
            	if($scope.validateSaveWarning()){
            	
            		var paramWarning = [];       
                	$.each($scope.popupDataWarning, function(index, item){
                		if(item.cwareAction != null){
                           if(item.cwareAction == "I" || item.cwareAction == "U"){
                        	   var warning = {
                        			   TITLE1_CAUTION: item.TITLE1_CAUTION,
                        			   CONTENTS_CAUTION: item.CONTENTS_CAUTION,
                        			   SHARE_FLAG: item.SHARE_FLAG,
                        			   GOODS_CODE: item.GOODS_CODE,
                        			   SEQ_NO: item.SEQ_NO,
                        			   cwareAction: item.cwareAction
                               };
                        	   paramWarning.push(warning);
                            }
                        }
                    });
                	
                	if(paramWarning.length > 0){
                    	
                        var data = {"paramWarning":paramWarning};
                       
                        BaseService.savePopupData('popup/save-goods-share-caution', data).then(
                                function(response){
                                    
                                        BaseService.alertSaveSuccess(function(){
                                            $scope.getPopupData();
                                        });
                                    
                                    
                                },
                                function(response){
                                    BaseService.alertError(response.message);
                                }
                            );
                        
                        
                        
                    } else {
                    	BaseService.alertNoSaveData();
                    }
            		
            		
            	}
            	
            	
            };
            //End Warning tab
            
            
          //Return tab
            $scope.renderTableReturn = function(dataSource){
                if(dataSource != null){

                    $scope.table_return = $('#master_table_return_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "SEQ_NO",
                            
                        }, {
                            "data": "TITLE1_RETURN"
                        }, {
                            "data": "INSERT_ID",
                           
                        }, {
                            "data": "INSERT_DATE"
                        }
                        ],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table_return, 0);
                    BaseService.generateTooltip($scope.table_return);
                    
                    setTimeout(function(){
                        $scope.table_return.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentReturn = this;
                            var aData = $scope.table_return.api().row(this).data();
                            if(aData != null){
                            	$scope.popupSelectedDataReturn = aData;
                                $scope.$apply();
                            }
                        });
                    }, 50);
                }
            };
            
            $scope.onReturnChange = function(fieldName){
            	
            	if($scope.table_return && $scope.currentReturn != null && $scope.popupSelectedDataReturn != null){
            		
            		$scope.popupSelectedDataReturn.checkModify = true;
            		
            		if($scope.popupSelectedDataReturn.cwareAction == null){
            			$scope.popupSelectedDataReturn.cwareAction = "U";
            		}
            		
            		if(fieldName == "TITLE1_RETURN"){
            			
            			 $scope.table_return.api()
                  		.cell($scope.currentReturn.childNodes[2])
                  		.data($scope.popupSelectedDataReturn.TITLE1_RETURN)
                  		.draw(); 
            			
            			
            			setTimeout(function(){
                            $scope.$apply();
                        },50);
            			
            		}
            	}
            	
            };
            
            $scope.insertReturn = function(){
            	
            	$scope.popupDataReturn = ($scope.popupDataReturn == null) ? [] : $scope.popupDataReturn;
           	 	var returnData = {
           	 		SEQ_NO:"",
           	 		TITLE1_RETURN:"",
           	 		CONTENTS_RETURN:"",
           	 		SHARE_FLAG: "20",
           	 		GOODS_CODE: $scope.selectedItem.GOODS_CODE,
           	 		INSERT_ID:"",
           	 		INSERT_DATE:"",
           			cwareAction: "I",
    				rowId : BaseService.generateId(18)
           		 }
           	 	$scope.popupDataReturn.push(returnData);
           	 	$scope.renderTableReturn($scope.popupDataReturn);
           	 	BaseService.focusTableRow($scope.table_return,-1);
           	 	
           	 	
           	 setTimeout(function(){
           		$("#table-container").animate({ 
                    scrollTop: $('#table-container').prop("scrollHeight")
           		}, 200);
           		
           		$("#master_input_title_return_popup").focus();
           		
             },200);
            	
            	
            };
            
            $scope.deleteReturn = function(){
            	
            	if($scope.popupSelectedDataReturn != null){
    	   			
 	   		       if($scope.popupSelectedDataReturn.cwareAction == "I"){
 	   		    	   
 	   		    	if($scope.popupSelectedDataReturn.checkModify == true){
	   		    		   
 	   		    		$scope.validatePopupDeleteClicked($scope.popupDataReturn,$scope.popupSelectedDataReturn,$scope.table_return);
 	   		    	   }
 	   		    	else{
 	   		    	_.remove($scope.popupDataReturn, { "rowId": $scope.popupSelectedDataReturn.rowId });
 	   		    	$scope.popupSelectedDataReturn = null;
 	   		    	$scope.renderTableReturn($scope.popupDataReturn);
           	 		BaseService.focusTableRow($scope.table_return,-1);
           	 		}

 	   		    	
 	   		       }
 	   		       else {
 	   		    	BaseService.alertWarning("Existing data cannot be deleted.");
 	   		          
 	   		       }
 	   		   }
 	   		   else {
 	   			BaseService.alertNoDeleteData();
 	   		       }
            	
            };
            
            $scope.validateSaveReturn = function(){
            	var isValid = true;
            	var msg = '';
            	
            	$.each($scope.popupDataReturn, function(index, item){
            		
                	if(item.CONTENTS_RETURN == "" || item.CONTENTS_RETURN == '' || item.CONTENTS_RETURN == null){
                		isValid = false;
                		msg = mainMessage.message.require_row("Detail",index);
            			
            			BaseService.alertWarning(msg , function() { 
                    		setTimeout(function(){
                    			BaseService.focusTableRow($scope.table_return,index);
                            	$('#master_input_detail_return_popup').focus();   
                            },200);
                            });
            			return false;	
            		}
                });
            	
            	$.each($scope.popupDataReturn, function(index, item){
            		
                	if(item.TITLE1_RETURN == "" || item.TITLE1_RETURN == '' || item.TITLE1_RETURN == null){
                		isValid = false;
                		msg = mainMessage.message.require_row("Title",index);
            			
            			BaseService.alertWarning(msg , function() { 
                    		setTimeout(function(){
                    			BaseService.focusTableRow($scope.table_return,index);
                    			$('#master_input_title_return_popup').focus();   
                                
                            },200);
                            });
            			return false;	
            		}
                });
            	
            	if(!isValid){
            		return false;
            	}
            	
            	return true;
            	
            	
            	
            }
            
            $scope.saveReturn = function(){
            	
            	if($scope.validateSaveReturn()){
            	
            		var paramReturn = [];       
                	$.each($scope.popupDataReturn, function(index, item){
                		if(item.cwareAction != null){
                           if(item.cwareAction == "I" || item.cwareAction == "U"){
                        	   var returnData = {
                        			   TITLE1_RETURN: item.TITLE1_RETURN,
                        			   CONTENTS_RETURN: item.CONTENTS_RETURN,
                        			   SHARE_FLAG: item.SHARE_FLAG,
                        			   GOODS_CODE: item.GOODS_CODE,
                        			   SEQ_NO: item.SEQ_NO,
                        			   cwareAction: item.cwareAction
                               };
                        	   paramReturn.push(returnData);
                            }
                        }
                    });
                	
                	if(paramReturn.length > 0){
                    	
                        var data = {"paramReturn":paramReturn};
                       
                        BaseService.savePopupData('popup/save-goods-share-return', data).then(
                                function(response){
                                    
                                        BaseService.alertSaveSuccess(function(){
                                            $scope.getPopupData();
                                        });
                                    
                                    
                                },
                                function(response){
                                    BaseService.alertError(response.message);
                                }
                            );
                    } else {
                    	BaseService.alertNoSaveData();
                    }
            		
            		
            	}
            	
            	
            };
            //End Return tab
            
            
            $scope.inquiryClick = function(){
            	
            	
            	setTimeout(function(){
                if($scope.selectedItem.GOODS_CODE == null || $scope.selectedItem.GOODS_CODE == ""){
                    BaseService.alertWarning("Please Enter Item code." ,function(){
                    	setTimeout(function(){
                    		$('#master_input_item_picker_item_description_popup').focus();
                    		$scope.$apply();
                        }, 200);
                    });
                    return;
                }
                else{
                	if($scope.alreadyEnterPress == false){
                		$scope.getPopupData();
                		setTimeout(function(){
                    		$scope.$apply();
                        }, 200);
                    	
                	}
                	else{
                		$scope.alreadyEnterPress = false;
                	}
                    
                }
            	}, 100);
                
            };
            
            
            
            $scope.descriptionMinorClick = function(){
            	
            	if($scope.popupDataDescribe){
            		
            		var descriptionCLOB = '';
            		
            		var des_ext = '';
            		
            		$.each($scope.popupDataDescribe, function(index, item){
            			
            			des_ext = (item.DESCRIBE_EXT) ? item.DESCRIBE_EXT : "";
            			
            			descriptionCLOB += '<b style="color:blue">[ '+ item.DESCRIBE_TITLE + ' ]</b><br><br>';
            			descriptionCLOB +=  des_ext + '<br><br>';
                    });
            		
            		$scope.masterDescriptionMinorData.CLOB = descriptionCLOB;
            		
            		setTimeout(function(){
            		$scope.$broadcast('master_description_popup.open');
            		},200);
            	}
            	
            };
            
      
            $scope.onEnterPress = function(e){
            	//bb
            	setTimeout(function(){
            		
            		 if(e.which == 13 && $scope.selectedItem != null){
            			
            			 $scope.alreadyEnterPress = true;
            			 
            			 var data = {
            					 goods_code : $scope.selectedItem.GOODS_CODE
            			 }
                 		
            			 BaseService.getPickerData(1002, data).then(
                                 function(respone){
                                	 if(respone.data.result.length > 0){
                                		 $scope.selectedItem.GOODS_CODE = respone.data.result[0].GOODS_CODE;
                                    	 $scope.selectedItem.GOODS_NAME = respone.data.result[0].GOODS_NAME;
                                	 }
                                	 else{
                                		 $scope.selectedItem = {};
                                		 
                                	 }
                                },
                                 function(respone){
                                	 $scope.selectedItem = {};
                                	
                                 }
                         );
                 		
            			 	 
                 	}
            		 
                 }, 100);
            	
            };
            
            $scope.getPickerGoodsName = function(){
            	
            	if($scope.selectedItem.GOODS_CODE != ""){
            		
            		 var data = {
           					 goods_code : $scope.selectedItem.GOODS_CODE
           			 }
                		
           			 BaseService.getPickerData(1002, data).then(
                                function(respone){
                               	 if(respone.data.result.length > 0){
                               		 $scope.selectedItem.GOODS_CODE = respone.data.result[0].GOODS_CODE;
                                   	 $scope.selectedItem.GOODS_NAME = respone.data.result[0].GOODS_NAME;
                               	 }
                               	 else{
                               		 $scope.selectedItem = {};
                               		 
                               	 }
                               },
                                function(respone){
                               	 $scope.selectedItem = {};
                               	
                                }
                        );
            		
            		
            	}
            };
            
            $scope.masterPrintClick = function(){
            	if($scope.selectedItem.GOODS_CODE != null){
	            	$scope.masterDescriptionPrintData = {};
	            	$scope.masterDescriptionPrintData.goods_code = $scope.selectedItem.GOODS_CODE;
	            	
	            	setTimeout(function(){
	            		$scope.$broadcast('master_description_print_popup.open');
	            	}, 50);
            	}
            }
            
            $scope.$on('master_item_description_popup_item_picker.select', function(e, data){
                
                $scope.selectedItem = data;
                $scope.$apply();
                
                
                setTimeout(function(){
                    $scope.getPopupData();
                  
                }, 200);
            });
            $scope.$on('master_item_description_popup_item_picker.clear', function(e){
                $scope.selectedItem = {};
                $scope.$apply();
            });
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'master_item_description_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
        }
    }
});


app.directive('masterDescriptionPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        
        templateUrl: currentUrl + '/resources/assets/partials/popup/masterDescriptionPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
        	
        	$scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');
                $('#summernote').summernote();

                $('.note-toolbar').css('display','none')
                $('#summernote').code($scope.popupData.CLOB)
                
            });
        	
        	$scope.btnCloseClick = function(){
            	$('#' + $scope.popupId).modal('hide');
            }
            
            
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'master_description_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.popupData = (scope.popupData == null) ? {} : scope.popupData;
            scope.isLoading = false;
        }
    }
});



app.directive('minorItemDescriptionPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        
        templateUrl: currentUrl + '/resources/assets/partials/popup/minorItemDescriptionPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
        	
        	$scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');
                $('#summernote_minor').summernote();

                $('.note-toolbar').css('display','none')
                $('#summernote_minor').code($scope.popupData.CLOB)
                
            });
        	
        	$scope.btnCloseClick = function(){
            	$('#' + $scope.popupId).modal('hide');
            }
        	
        	//jj
            
            
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'minor_description_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.popupData = (scope.popupData == null) ? {} : scope.popupData;
            scope.isLoading = false;
        }
    }
});


app.directive('adChannelPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        
        templateUrl: currentUrl + '/resources/assets/partials/popup/adChannelPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');
                setTimeout(function(){
                	$scope.getPopupData();
                }, 200);     
            });
            
            $scope.getPopupData = function(){
            	BaseService.getPopupData("popup/retrieve/1123").then(
	                function(respone){
                        $scope.popupData = respone.data.result;
                        var arrMediaCode = $scope.popupParam.ad_channel.split(',');
                        $.each($scope.popupData, function(index, item){
                        	if($.inArray(item.MEDIA_CODE, arrMediaCode) > -1){
                        		item.SELECTION = 1;
                        	}
                        	else {
                        		item.SELECTION = 0;
                        	}
                        	
                        });
                        $scope.renderTable($scope.popupData);
	                }
	            );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                
                    $scope.table = $('#table_ad_channel_popup').dataTable({
                    "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "SELECTION",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "0") ? false : true;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" action-change="selectChange(event, checked)"></table-checkbox>';
                            }
                        }, {
                            "data": "CODE_MGROUP",
                            "class": "text-center"
                        }, {
                            "data": "CODE_NAME"
                        }, {
                            "data": "MEDIA_CODE",
                            "class": "text-center"
                        }, {
                            "data": "MEDIA_NAME"
                            }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table, 0);
                    BaseService.generateTooltip($scope.table);
                    
                    setTimeout(function(){
                        $scope.table.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentRow = this;
                            });
                    }, 50);
                }
            };
            
            $scope.selectChange = function(e, checked){
                if($scope.currentRow != null){
                    var aData = $scope.table.api().row($scope.currentRow).data();
                    if(aData != null){
                        aData.SELECTION = (checked) ? "1" : "0";
                    }
                }
            };
            
            /*$scope.inquiryClick = function(){
                $scope.getPopupData();
            };*/
            
            $scope.selectAllClick = function(){
            	$.each($scope.popupData, function(index, item){
            		item.SELECTION = 1;
                });
                $scope.renderTable($scope.popupData);
            };
            
            $scope.removeSelectClick = function(){
            	$.each($scope.popupData, function(index, item){
            		item.SELECTION = 0;
                });
                $scope.renderTable($scope.popupData);
            };
            
            $scope.confirmClick = function(){
            	var arrSelectData = [];
            	$.each($scope.popupData, function(index, item){
            		 if(item.SELECTION == '1'){
                         var data = {
                             AD_CHANNEL: item.MEDIA_CODE,
                             AD_CHANNEL_NAME: item.MEDIA_NAME
                         };
                         arrSelectData.push(data);
                     }
            	});
            	
                $scope.$emit($scope.popupId + ".confirm", angular.copy(arrSelectData));
                $('#' + $scope.popupId).modal('hide');
                
            };
            
            $scope.cancelClick = function(){
                $('#' + $scope.popupId).modal('hide');
            };
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'ad_channel_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
        }
    }
});

app.directive('customerLotteryCouponPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/customerLotteryCouponPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.dataCoupon = null;
            $scope.dataLottery = null;
            $scope.isCouponLoading = false;
            $scope.isLotteryLoading = false;
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');
                setTimeout(function(){
                	$scope.getPopupHeaderData();
                }, 200);
            });
            
            $scope.getPopupHeaderData = function(){
                setTimeout(function(){
                    //P_CUST_LOTTERY_COUPON 1196
                    BaseService.getPopupData("popup/retrieve/1196/header", $scope.popupParam).then(
                        function(respone){
                            setTimeout(function(){
                                $scope.cmbDoFlag = respone.data.G_DO_TYPE;
                                $scope.cmbAppType = respone.data.C_APP_TYPE;
                                $scope.cmbUseCode = respone.data.C_USE_CODE;

                                $scope.getPopupData();
                            }, 100);
                        }
                    );
                }, 200);
            };
            
            $scope.getPopupData = function(){
                //P_CUST_LOTTERY_COUPON 1196
                $scope.isCouponLoading = true;
            	BaseService.getPopupData("popup/retrieve/1196", $scope.popupParam).then(
	                function(respone){
                        $scope.isCouponLoading = false;
                        $scope.dataCoupon = respone.data.result;
                        $scope.renderTableCoupon($scope.dataCoupon);
	                }
	            );
                
                //P_CUST_LOTTERY_COUPON_DETAIL 1197
                $scope.isLotteryLoading = true;
            	BaseService.getPopupData("popup/retrieve/1197", $scope.popupParam).then(
	                function(respone){
                        $scope.isLotteryLoading = false;
                        $scope.dataLottery = respone.data.result;
                        $scope.renderTableLottery($scope.dataLottery);
	                }
	            );
            };
            
            $scope.renderTableCoupon = function(dataSource){
                if(dataSource != null){
                    $scope.table_coupon = $('#table_customer_coupon_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "APP_TYPE",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.cmbAppType, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                        }, {
                            "data": "DO_TYPE",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.cmbDoFlag, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                        }, {
                            "data": "PROMO_NO"
                        }, {
                            "data": "PROMO_NAME"
                        }, {
                            "data": "USE_CODE",
                            "class": "text-center",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.cmbUseCode, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                        }, {
                            "data": "GET_ORDER_NO"
                        }, {
                            "data": "ISSUE_DATE"
                        }, {
                            "data": "USE_YN",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "1") ? true : false;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" disabled="disabled"></table-checkbox>';
                            }
                        }, {
                            "data": "USE_ORDER_NO"
                        }, {
                            "data": "ISSUE_CANCEL_YN",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "1") ? true : false;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" disabled="disabled"></table-checkbox>';
                            }
                        }, {
                            "data": "ISSUE_CANCEL_DATE"
                        }, {
                            "data": "USE_START_DATE"
                        }, {
                            "data": "USE_END_DATE"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table_coupon, 0);
                    BaseService.generateTooltip($scope.table_coupon);
                    
                    setTimeout(function(){
                        BaseService.setFixedHeader($scope.table_coupon);
                        $scope.table_coupon.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                        });
                    }, 50);
                }
            };
            
            $scope.renderTableLottery = function(dataSource){
                if(dataSource != null){
                    $scope.table_lottery = $('#table_customer_lottery_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "DO_TYPE",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.cmbDoFlag, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                        }, {
                            "data": "LOTTERY_PROMO_NO"
                        }, {
                            "data": "LOTTERY_PROMO_NAME"
                        }, {
                            "data": "USE_CODE",
                            "class": "text-center",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.cmbUseCode, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                        }, {
                            "data": "END_YN",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "0") ? true : false;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" disabled="disabled"></table-checkbox>';
                            }
                        }, {
                            "data": "SELECT_YN",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "0") ? true : false;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" disabled="disabled"></table-checkbox>';
                            }
                        }, {
                            "data": "ORDER_NO"
                        }, {
                            "data": "ISSUE_DATE"
                        }, {
                            "data": "ISSUE_CANCEL_YN",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "0") ? true : false;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" disabled="disabled"></table-checkbox>';
                            }
                        }, {
                            "data": "ISSUE_CANCEL_DATE"
                        }, {
                            "data": "SELECT_DATE"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table_lottery, 0);
                    BaseService.generateTooltip($scope.table_lottery);
                    
                    setTimeout(function(){
                        BaseService.setFixedHeader($scope.table_lottery);
                        $scope.table_lottery.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                        });
                    }, 50);
                }
            };
            
            $scope.inputClick = function(){
                if(!$scope.popupParam.coupon_no){
                    BaseService.alertWarning("Input your coupon number 12 digit correctly");
                    return;
                }
                $scope.saveData();
            };
            
            $scope.saveData = function(){
                var data = {
                    "paramCoupon" : [{
                        CUST_NO: $scope.popupParam.cust_no,
                        PROMO_NO: $scope.popupParam.coupon_no
                    }]
                };

                BaseService.savePopupData('popup/save-cust-coupon', data).then(
                    function(response){
                        if(response.data.result == '000000'){
                            BaseService.alertSaveSuccess(function(){
                                $scope.getPopupData();
                            });
                        }
                        else {
                            BaseService.alertWarning(response.data.result);
                        }
                    },
                    function(response){
                        BaseService.alertError(response.message);
                    }
                );
            };
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'customer_lottery_coupon_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
        }
    }
});

app.directive('claimPromotionListPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/claimPromotionListPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');

                setTimeout(function(){
                    $scope.popupData = $scope.popupParam.dataPromotion;
                    $scope.cmbAppType = $scope.popupParam.cmbAppType;
                    $scope.cmbDoType = $scope.popupParam.cmbDoType;
                    $scope.renderTable($scope.popupData);
                    $scope.$apply();
                }, 200);     
            });
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    $scope.table = $('#table_claim_promotion_list_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "APP_TYPE",
                            "class": "text-center",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.cmbAppType, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                        }, {
                            "data": "DO_TYPE",
                            "class": "text-center",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.cmbDoType, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                        }, {
                            "data": "COUPON_YN",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "1") ? true : false;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" disabled="disabled"></table-checkbox>';
                            }
                        }, {
                            "data": "CANCEL_YN",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "1") ? true : false;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" disabled="disabled"></table-checkbox>';
                            }
                        }, {
                            "data": "PROMO_NO",
                            "class": "text-center",
                        }, {
                            "data": "PROMO_NAME"
                        }, {
                            "data": "COUPON_LOTTERY_PROMO_NAME",
                            "class": "text-right",
                            "render": function(data, type, row){
                                if(!data) return "";
                                return BaseService.formatDecimal(data, 2)
                            }
                        }, {
                            "data": "FIRST_ORDER_YN",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "1") ? true : false;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" disabled="disabled"></table-checkbox>';
                            }
                        }, {
                            "data": "CANCEL_DATE"
                        }, {
                            "data": "CANCEL_USER_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table, 0);
                    BaseService.generateTooltip($scope.table);
                    
                    setTimeout(function(){
                        $scope.table.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentRow = this;
                            var aData = $scope.table.api().row(this).data();
                            if(aData != null){
                                $scope.popupSelectedData = aData;
                                $scope.$apply();
                            }
                        });
                    }, 50);
                }
            };
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'claim_promotion_list_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
        }
    }
});

app.directive('waybillPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/waybillPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');
                
                $scope.init();
                
                setTimeout(function(){
                    $scope.inquiryData();
                }, 500);
                
            });
            
            $scope.init = function(){
                if($scope.table != null){
                    $scope.isLoading = false;
                    $scope.table.fnClearTable();
                    $scope.table.fnDestroy();
                }
                
                if($scope.table_detail != null){
                    $scope.isLoading = false;
                    $scope.table_detail.fnClearTable();
                    $scope.table_detail.fnDestroy();
                }
                
                if($scope.table_process != null){
                    $scope.isLoading = false;
                    $scope.table_process.fnClearTable();
                    $scope.table_process.fnDestroy();
                }
                
                $scope.dataSheetWayBill = null;
                $scope.dataSheetDetail = null;
                $scope.dataSheetProcess = null;
                
                $scope.cmbSlipGbs = [];
                $scope.cmbDelyGbs = [];
                $scope.cmbDelyTypes = [];

                setTimeout(function(){
                    $scope.dataFilter = {};
                    $scope.dataFilter.cust_no = $scope.popupParam.cust_no;
                    $scope.dataFilter.cust_name = $scope.popupParam.cust_name;
                    $scope.dataFilter.order_no = $scope.popupParam.order_no;
                    $scope.$apply();
                }, 200); 
            }
            
            $scope.inquiryData = function(){
                
                //retrieve waybill table
                BaseService.getPopupData("popup/retrieve/1210", $scope.dataFilter).then(
                    function(response){
                        $scope.dataSheetWayBill = response.data.result;
                        $scope.cmbSlipGbs = response.data.c_slip_gb;
                        $scope.cmbDelyGbs = response.data.c_dely_gb;
                        $scope.cmbDelyTypes = response.data.c_dely_type;
                        
                        $scope.renderTableWayBill($scope.dataSheetWayBill);
                        BaseService.focusTableRow($scope.table, -1);
                    },
                    function(respone){
                        
                    }
                );    
            }
            
            $scope.renderTableWayBill = function(dataSource){
                if(dataSource != null){
                    $scope.table = $('#table_waybill_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "SLIP_NO"
                        }, {
                            "data": "SLIP_GB",
                            "class": "text-center",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.cmbSlipGbs, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                        }, {
                            "data": "WH_NAME"
                        }, {
                            "data": "DELY_TYPE",
                            "class": "text-center",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.cmbDelyTypes, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                        }, {
                            "data": "DELY_GB",
                            "class": "text-center",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.cmbDelyGbs, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                        }, {
                            "data": "MIXPACK_FLAG",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "1") ? true : false;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" disabled="disabled"></table-checkbox>';
                            }
                        }, {
                            "data": "RECEIVER"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table, 0);
                    BaseService.generateTooltip($scope.table);
                    
                    setTimeout(function(){
                        $scope.table.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentRow = this;
                            var aData = $scope.table.api().row(this).data();
                            if(aData != null){
                                $scope.popupSelectedData = aData;
                                $scope.$apply();
                                
                                $scope.retrieveDetail();
                            }
                        });
                    }, 50);
                }
            };
            
            $scope.renderTableDetail = function(dataSource){
                if(dataSource != null){
                    $scope.table_detail = $('#table_waybill_detail_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "ORDER_NO"
                        }, {
                            "data": "GOODS_CODE"
                        }, {
                            "data": "GOODS_NAME"
                        }, {
                            "data": "GOODSDT_INFO"
                        }, {
                            "data": "DELY_QTY",
                            "class": 'text-right'
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table_detail, 0);
                    BaseService.generateTooltip($scope.table_detail);
                }
            };
            
            $scope.renderTableProcess = function(dataSource){
                if(dataSource != null){
                    $scope.table_process = $('#table_waybill_process_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "SLIP_PROC"
                        }, {
                            "data": "SLIP_PROC_DATE"
                        }, {
                            "data": "USER_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table_process, 0);
                    BaseService.generateTooltip($scope.table_process);
                    
                }
            };
            
            $scope.retrieveDetail = function(){
                
                var filter = {
                    slip_i_no: $scope.popupSelectedData.SLIP_I_NO
                };
                
                BaseService.getPopupData("popup/retrieve-many/1210", filter).then(
                    function(response){
                        $scope.dataSheetDetail = response.data.result.RESULT_DETAIL;
                        $scope.dataSheetProcess = response.data.result.RESULT_PROC;
                        
                        //render table detial
                        $scope.renderTableDetail($scope.dataSheetDetail);
                        
                        //render table process
                        $scope.renderTableProcess($scope.dataSheetProcess);
                    },
                    function(respone){
                        
                    }
                );  
            }
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'waybill_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
        }
    }
});

app.directive('orderUseCouponPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/orderUseCouponPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.dataConfig = null;
            $scope.dataSheet30 = null;
            $scope.dataSheet32 = null;
            $scope.dataSheet36 = null;
            $scope.dataSheet39 = null;
            $scope.dataSheetCoupon = null;
            $scope.paramMap = {};
            $scope.selectedCoupon = {};
            $scope.selectedGiftGoods  = {};
            $scope.selectedSheet36 = {};
            
            $scope.isConfirmClicked = false;
            $scope.imgLoadingPath = currentUrl + "/resources/assets/images/progress/progress-circle-success.svg";
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');

                setTimeout(function(){
                    $scope.dataConfig = $scope.popupParam.dataConfig;
                    $scope.dataSheet30 = $scope.popupParam.dataSheet30;
                    $scope.dataSheet32 = $scope.popupParam.dataSheet32;
                    $scope.dataSheet36 = $scope.popupParam.dataSheet36;
                    $scope.dataSheet39 = $scope.popupParam.dataSheet39;
                    $scope.cmbAppType = $scope.popupParam.cmbAppType;
                    $scope.cmbDoType = $scope.popupParam.cmbDoType;
                    
                    $scope.paramMap.coupon_g_seq = $scope.popupParam.coupon_g_seq;
                    $scope.paramMap.coupon_promo10_gb = $scope.popupParam.coupon_promo10_gb;
                    $scope.paramMap.amt_goods_gb = $scope.popupParam.amt_goods_gb;
                    $scope.paramMap.first_order_date = $scope.popupParam.first_order_date;
                    $scope.paramMap.first_order_yn = $scope.popupParam.first_order_yn;
                    $scope.paramMap.memb_gb = $scope.popupParam.memb_gb;
                    $scope.$apply();
                    
                    $.each($scope.dataSheet36, function(index, item) {
                        item.GOODS_CODE = "";
                    });
                    $scope.retrieveData();
                }, 200);   
                
                $('#' + $scope.popupId).on('hidden.bs.modal', function () {
                    $scope.selectedCoupon = {};
                    if($scope.table != null){
                        $scope.table.fnClearTable();
                        $scope.table.fnDestroy();
                    }
                    $('.promotion-tab-container').find('li[role="presentation"]').removeClass('active');
                    $('.promotion-tab-container').find('div[role="tabpanel"]').removeClass('fade active in');
                    $scope.isConfirmClicked = false;
                });
            });
            
            $scope.retrieveData = function(){
                if($scope.dataSheet36.length > 0){
                    var p_coupon_yn       = "";
		    		var p_use_yn          = "0";
		    		var p_order_g_seq     = "";
		    		var p_master_selecter = "";
		    		var findRow           = -1;
                    
                    $.each($scope.dataSheet36, function(i, itemSheet36){
                        p_coupon_yn       = itemSheet36.COUPON_YN;
		                p_use_yn          = itemSheet36.USE_YN;
		                p_order_g_seq     = itemSheet36.ORDER_G_SEQ;
		                p_master_selecter = itemSheet36.MASTER_SELECTER;
                        
                        if(p_coupon_yn == "1") {
                            if(itemSheet36.SELECT_YN == "1") {
                                if($scope.paramMap.amt_goods_gb == "goods"){
                                    if( (p_use_yn == "0" || (p_use_yn == "1" && p_order_g_seq == p_master_selecter)) ) {
                                        var selectSheet30 = BaseService.findObject($scope.dataSheet30, 'ORDER_G_SEQ', itemSheet36.ORDER_G_SEQ, null);
                                        if(selectSheet30 != null){
                                            itemSheet36.GOODS_CODE = selectSheet30.GOODS_CODE;
                                        }
                                        else {
                                            itemSheet36.GOODS_CODE = "";
                                        }

                                        //= 금액 사은품은 SHEET30의 order_g_seq의 MAX값을 세팅.
                                        if(itemSheet36.ORDER_G_SEQ == ""){
                                            itemSheet36.ORDER_G_SEQ = $scope.paramMap.coupon_g_seq;
                                            itemSheet36.MAX_D_SEQ = "001";
                                        }
                                        else {
                                            //= SHEET30에 해당하는 order_g_seq의 SHEET32중 order_d_seq의 MAX값을 세팅.(금액사은품은 무조건 "001"로 세팅)
                                            var pre_order_d_seq = "";
                                            var max_order_d_seq = 0;
                                            $.each($scope.dataSheet32, function(j, itemSheet32){
                                                if(itemSheet32.ORDER_G_SEQ == itemSheet36.ORDER_G_SEQ){
                                                    pre_order_d_seq = itemSheet32.ORDER_D_SEQ;
                                                    if( (pre_order_d_seq != "") && (itemSheet32.GOODS_GB != "37") ) {
                                                        if(parseInt(pre_order_d_seq) > max_order_d_seq) {
                                                            max_order_d_seq = parseInt(pre_order_d_seq);
                                                        }
                                                    }
                                                }
                                            });
                                            max_order_d_seq++;
                                            itemSheet36.MAX_D_SEQ = BaseService.padZero(max_order_d_seq, 3);     
                                        }
                                        $scope.retrieveOrderGiftInfo(itemSheet36);
                                    }
                                }
                                else if($scope.paramMap.amt_goods_gb == "amt"){
                                    //if(itemSheet36.ORDER_G_SEQ == "" && itemSheet36.DO_TYPE != '10'){
                                    $scope.dataConfig.order_d_seq = "001";
                                   //= 금액 사은품은 SHEET30의 order_g_seq의 MAX값을 세팅.
                                    if(itemSheet36.ORDER_G_SEQ == "") {
                                        itemSheet36.ORDER_G_SEQ = $scope.paramMap.coupon_g_seq;
                                        itemSheet36.MAX_D_SEQ = "001";
                                    }
                                    else {
                                        //= SHEET30에 해당하는 order_g_seq의 SHEET32중 order_d_seq의 MAX값을 세팅.(금액사은품은 무조건 "001"로 세팅)
                                        pre_order_d_seq = "";
                                        max_order_d_seq = 0;
                                        $.each($scope.dataSheet30, function(j, itemSheet30) {
                                            if(itemSheet30.ORDER_G_SEQ == itemSheet36.ORDER_G_SEQ) {
                                                pre_order_d_seq = itemSheet30.ORDER_D_SEQ;
                                                if(pre_order_d_seq != "" && itemSheet30.GOODS_GB != "37") {
                                                    if(parseInt(pre_order_d_seq) > max_order_d_seq) {
                                                        max_order_d_seq = parseInt(pre_order_d_seq);
                                                    }
                                                }
                                            }
                                        });
                                        max_order_d_seq++;
                                        itemSheet36.MAX_D_SEQ = BaseService.padZero(max_order_d_seq, 3);
                                    }
                                    $scope.retrieveOrderGiftInfo(itemSheet36);
                                }
                            }
                        }
                    });
                    
                    $scope.renderTable($scope.dataSheet36);
                    var selectRowIndex = 0;
                    $.each($scope.dataSheet36, function(index, item) {
                        if(item.SELECT_YN == '1') {
                            selectRowIndex = index;
                            return false;
                        }
                    });
                    if(selectRowIndex > 0) {
                        BaseService.focusTableRow($scope.table, selectRowIndex);
                    }
                }
            };
            
            $scope.retrieveOrderGiftInfo = function(itemSheet36){
                $scope.paramMap.parentValue1 = itemSheet36.PROMO_NO;
                $scope.paramMap.parentValue2 = itemSheet36.GOODS_CODE;
                $scope.paramMap.parentValue3 = itemSheet36.ORDER_QTY;
                $scope.paramMap.parentValue4 = itemSheet36.GOODS_CODE;
                $scope.paramMap.actions = "READ";
                $scope.paramMap.cust_gb = $scope.paramMap.cust_gb;
                $scope.paramMap.order_no = $scope.paramMap.order_no;
                $scope.paramMap.order_g_seq = itemSheet36.ORDER_G_SEQ;
                $scope.paramMap.seq = itemSheet36.SEQ;
                $scope.paramMap.pre_order_g_seq = itemSheet36.ORDER_G_SEQ;
                $scope.paramMap.max_d_seq = itemSheet36.MAX_D_SEQ;
                $scope.paramMap.user_id = $rootScope.userLogin.userId;
                $scope.paramMap.COUPON_YN = "1";
                $scope.paramMap.GIFT_PROMO_NO = itemSheet36.PROMO_NO;
                $scope.paramMap.GIFT_GOODS_CODE = itemSheet36.GOODS_CODE;

                $scope.paramMap.COUNSEL_QTY = itemSheet36.ORDER_QTY;
                $scope.paramMap.ORDER_NO = $scope.paramMap.order_no;
                $scope.paramMap.ORDER_G_SEQ = itemSheet36.ORDER_G_SEQ;
                $scope.paramMap.INSERT_ID = $rootScope.userLogin.userId;
                $scope.paramMap.DELETE_PROMO_NO = $scope.paramMap.delete_promo_no;
                $scope.paramMap.DELETE_ORDER_G_SEQ = $scope.paramMap.delete_order_g_seq;
                $scope.paramMap.FIRST_ORDER_YN = $scope.paramMap.first_order_yn;
                $scope.paramMap.MEMB_GB = $scope.paramMap.memb_gb;

                //Popup.retrieveOrderGiftInfo
                BaseService.getPopupData("popup/retrieve-order-gift-info", $scope.paramMap).then(
                    function(respone){
                        $scope.resultPopSheet(respone);
                    }
                );
            };
            
            $scope.resultPopSheet = function(respone){
                $scope.dataGift = [];
                $scope.selectedCoupon = respone.data.result.RESULT_AMT_GIFT[0];
                setTimeout(function(){
                    switch($scope.selectedCoupon.DO_TYPE){
                        case "10": {
                                $scope.dataGift = respone.data.result.RESULT_AMT_GIFT;
                                if($scope.dataGift) {
                                    $scope.setTabActiveClass("gift");
                                    if($scope.selectedCoupon.SELECT_YN == "1"){
                                        $scope.selectedCoupon.GIFT_QTY = $scope.selectedCoupon.SELECT_QTY + " Number";
                                    }
                                    else {
                                        $scope.selectedCoupon.GIFT_QTY = "Select";
                                    }
                                    $scope.dataGiftGoods = [];
                                    var giftGoods =  respone.data.result['RESULT_GIFT_GOODS_' + $scope.selectedCoupon.PROMO_NO];
                                    if(giftGoods != null){
                                        $.each(giftGoods, function(i, item){
                                            $scope.dataGiftGoods.push(item);
                                        });
                                    }
                                    $scope.dataGiftGoodsDt = [];
                                    var giftGoodsDt =  respone.data.result['RESULT_GIFT_GOODSDT_' + $scope.selectedCoupon.PROMO_NO];
                                    if(giftGoodsDt != null){
                                        $.each(giftGoodsDt, function(i, item){
                                            $scope.dataGiftGoodsDt.push(item);
                                        });
                                    }
                                    $scope.renderTableGiftGoods($scope.dataGiftGoods);
                                    BaseService.focusTableRow($scope.table_gift_goods, 0);
                                }
                            }
                            break;
                        case "30": 
                            $scope.setTabActiveClass("discount");
                            break;
                    }
                    
                    
                }, 100);
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    $scope.table = $('#table_order_coupon_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "APP_TYPE",
                            "class": "text-center",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.cmbAppType, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                        }, {
                            "data": "DO_TYPE",
                            "class": "text-center",
                            "render": function(data, type, row){
                                var returnData = "";
                                var selectedData = getJSONObjects($scope.cmbDoType, 'code', data);
                                if(selectedData != null && selectedData.length > 0){
                                    returnData = selectedData[0].codeName;
                                }
                                return returnData;
                            }
                        }, {
                            "data": "PROMO_NAME"
                        }, {
                            "data": "AMOUNT",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 2)
                            }
                            
                        }, {
                            "data": "SELECT_YN",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "1") ? true : false;
                                return '<table-checkbox check-id="'+ row.SEQ +'" checked="'+ checked +'" action-change="selectChangeClick(event, checked)"></table-checkbox>';
                            }
                        }, {
                            "data": "GOODS_CODE",
                            "class": "text-center",
                        }, {
                            "data": "FIRST_ORDER_YN",
                            "render": function(data, type, row){
                                return (data == 0) ? '' : data;
                            }
                        }, {
                            "data": "COUPON_PROMO_EDATE"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.setFixedHeader($scope.table);
                    BaseService.generateRowNumber($scope.table, 0);
                    BaseService.generateTooltip($scope.table);
                    
                    setTimeout(function(){
                        $scope.table.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentRow = this;
                        });
                    }, 50);
                }
            };
            
            $scope.renderTableGiftGoods = function(dataSource){
                if(dataSource != null){
                    
                    $scope.table_gift_goods = $('#table_gift_goods').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "render": function(data, type, row){
                                return row.GIFT_GOODS_CODE + "&ensp;&ensp;" + row.GOODS_NAME;
                            }
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false,
                    });
                    
                    BaseService.generateRowNumber($scope.table_gift_goods, 0);
                    BaseService.generateTooltip($scope.table_gift_goods);
                    
                    setTimeout(function(){
                        $scope.table_gift_goods.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentGiftGoodsRow = this;

                            var aData = $scope.table_gift_goods.api().row(this).data();
                            if(aData != null){
                                $scope.selectedGiftGoods = aData;
                                $scope.dataGiftGoodsDt = getJSONObjects($scope.dataGiftGoodsDt, 'GOODS_CODE', $scope.selectedGiftGoods.GIFT_GOODS_CODE);
                                $scope.renderTableGiftGoodsDt($scope.dataGiftGoodsDt);
                                BaseService.focusTableRow($scope.table_gift_goods_dt, 0);
                            }
                        });
                    }, 50);
                }
            };
            
            $scope.renderTableGiftGoodsDt = function(dataSource){
                if(dataSource != null){
                    
                    $scope.table_gift_goods_dt = $('#table_gift_goods_dt').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "render": function(data, type, row){
                                return row.GOODSDT_CODE + "&ensp;&ensp;" + row.CODE_NAME + "&ensp;&ensp;" + row.GOODSDT_INFO;
                            }
                        }, {
                            "data": "SELECT_YN",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                //row.selectCheckId = BaseService.generateId();
                                var checked = (data == "1") ? true : false;
                                return '<table-checkbox check-id="'+ row.GOODS_CODE + row.GOODSDT_CODE +'" checked="'+ checked +'" action-change="goodsDtSelectChangeClick(event, checked)"></table-checkbox>';
                            }
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false,
                    });
                    
                    setTimeout(function(){
                        $scope.table_gift_goods_dt.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentGiftGoodsDtRow = this;
                        });
                    }, 50);
                }
            };
            
            $scope.selectChangeClick = function(e, checked){
                var rowData = $scope.table.api().row($scope.currentRow).data();
                if(rowData != null){
                    var newValue = (checked) ? 1 : 0;
                    if($scope.dataSheet36 != null){
                        $.each($scope.dataSheet36, function(index, item){
                            if(item.SEQ == rowData.SEQ){
                                item.SELECT_YN = newValue;
                            }
                            else item.SELECT_YN = 0;
                            
                            $('#' + item.SEQ).prop('checked', (item.SELECT_YN == 1) ? true : false);
                        });
                        
                        var selectedData = getJSONObjects($scope.dataSheet36, 'SELECT_YN', 1);
                        if(selectedData.length > 0) {
                            $scope.selectedSheet36 = rowData;
                            setTimeout(function(){
                                $scope.retrieveData();
                            }, 100);
                        } 
                        else {
                            $('.promotion-tab-container').find('li[role="presentation"]').removeClass('active');
                            $('.promotion-tab-container').find('div[role="tabpanel"]').removeClass('fade active in');
                            $scope.selectedCoupon = {};
                        }
                    }
                }
            };
            
            $scope.setTabActiveClass = function(tab){
                $('.promotion-tab-container').find('li[role="presentation"]').removeClass('active');
                $('.promotion-tab-container').find('div[role="tabpanel"]').removeClass('fade active in');
                
                $('a[href="#tab_'+ tab +'"]').parent().addClass('active');
                $('#tab_' + tab).addClass('fade active in');
            };
            
            $scope.confirmClick = function(){
                if($scope.isConfirmClicked) {
            		return false;
            	}
            	$scope.isConfirmClicked = true;
                if($scope.selectedCoupon.DO_TYPE == '10') {
                    var filter = {
                        paramConfig: [$scope.popupParam.dataConfig],
                        paramPromoGift: $scope.getSelectedGift()
                    };
                    BaseService.getPopupData("popup/set-order-amt-gift", filter, 'POST').then(
                        function(respone){
                            if(respone.data.ERROR_MESSAGE){
                                BaseService.alertWarning(respone.data.ERROR_MESSAGE);
                                return;
                            }
                            var data = respone.data.result;
                            data.promoGift = filter.paramPromoGift[0];
                            data.promoGift.GOODS_GB = "37";
                            data.promoGift.USE_YN = "1";
                            data.promoGift.SEQ = $scope.selectedSheet36.SEQ;
                            data.promoGift.MASTER_SELECTER = $scope.popupParam.dataConfig.order_g_seq;
                            data.promoGift.ORDER_G_SEQ = $scope.popupParam.dataConfig.order_g_seq;
                            data.DO_TYPE = data.promoGift.DO_TYPE;
                            $scope.confirmData(data);
                            
//                            $scope.$emit($scope.popupId + ".confirm", angular.copy(respone.data.result));
//                            $('#' + $scope.popupId).modal('hide');
                        }
                    );
                }
                else if($scope.selectedCoupon.DO_TYPE == '30') {
                    $scope.selectedSheet36.USE_YN = "1";
                    $scope.selectedSheet36.promo = $scope.selectedCoupon;
                    $scope.confirmData($scope.selectedSheet36);
//                    $scope.$emit($scope.popupId + ".confirm", angular.copy($scope.selectedSheet36));
//                    $('#' + $scope.popupId).modal('hide');
                }
                else {
                    $scope.confirmData(null);
//                    $scope.$emit($scope.popupId + ".confirm", angular.copy({}));
//                    $('#' + $scope.popupId).modal('hide');
                }
            };
            
            $scope.confirmData = function(data){
                var returnData = {
                    selectedCoupon: data,
                    amt_goods_gb: $scope.popupParam.amt_goods_gb
                };
                setTimeout(function(){
                	$scope.$emit($scope.popupId + ".confirm", angular.copy(returnData));
                    $('#' + $scope.popupId).modal('hide');
                }, 200);
            };
            
            $scope.getSelectedGift = function(){
                var arrSelectedGift = [];
                var isSelectedGift = true;
                var msg;
                var currentGiftGoods, currentGiftGoodsDt, selectedGiftGoodsDt;
                if($scope.dataGift.length > 0){
                    $.each($scope.dataGift, function(i, promoItem) {
                        if(promoItem.DO_TYPE == '10'){
                            currentGiftGoods = getJSONObjects($scope.dataGiftGoods, 'PROMO_NO', promoItem.PROMO_NO);
                            $.each(currentGiftGoods, function(j, promoGoodsItem){
                                //currentGiftGoodsDt = getJSONObjects($scope.dataGiftGoodsDt, 'GOODS_CODE', promoGoodsItem.GIFT_GOODS_CODE);
                                currentPromotionGoodsDt = _.filter($scope.dataPromotionGoodsDt, function(data) {
                                    return (data.GOODS_CODE == promoGoodsItem.GIFT_GOODS_CODE && data.PROMO_SEQ == promoGoodsItem.PROMO_SEQ);
                                });
                                
                                if(currentGiftGoodsDt.length == 1) {
                                    selectedGiftGoodsDt = currentGiftGoodsDt[0];
                                    selectedGiftGoodsDt.SELECT_YN = 1;
                                }
                                else {
                                    var selectedGoodDt = getJSONObjects(currentGiftGoodsDt, 'SELECT_YN', 1);
                                    if(selectedGoodDt.length == 1){
                                        selectedGiftGoodsDt = selectedGoodDt[0];
                                        selectedGiftGoodsDt.SELECT_YN = 1;
                                    }
                                    else {
                                        if(!msg){
                                            msg = "Select category.<br>[Promotion [" + promoItem.PROMO_NAME + "] Gift Unit " + (i+1) + " Number]";
                                        }
                                        isSelectedGift = false;
                                    }
                                }
                                
                                if(isSelectedGift) {
                                    var selectedGift = promoGoodsItem;
                                    selectedGift.CODE_NAME = selectedGiftGoodsDt.CODE_NAME;
                                    selectedGift.GOODSDT_CODE = selectedGiftGoodsDt.GOODSDT_CODE;
                                    selectedGift.GOODSDT_INFO = selectedGiftGoodsDt.GOODSDT_INFO;
                                    selectedGift.GOODS_CODE = selectedGiftGoodsDt.GOODS_CODE;
                                    selectedGift.PROMO_NO = selectedGiftGoodsDt.PROMO_NO;
                                    selectedGift.PROMO_SEQ = selectedGiftGoodsDt.PROMO_SEQ;
                                    selectedGift.SALE_GB = selectedGiftGoodsDt.SALE_GB;
                                    selectedGift.SELECT_YN = selectedGiftGoodsDt.SELECT_YN;
                                    arrSelectedGift.push(selectedGift);
                                }
                            });
                        }
                    });
                    
                    if(!isSelectedGift && msg){
                        BaseService.alertWarning(msg);
                        $scope.isConfirmClicked = false;
                    }
                }
                return (isSelectedGift) ? arrSelectedGift : [];
            };
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'order_coupon_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
        }
    }
});


app.directive('receiptsClaimPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/receiptsClaimPopup.html',
        controller: function($scope, $rootScope, BaseService) {
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                
                $scope.dataSheet30 = $scope.popupParam.main.dataSheet30;
                $scope.dataSheet32 = $scope.popupParam.main.dataSheet32;
                $scope.dataSheet40 = $scope.popupParam.main.dataSheet40;
                $scope.dataSheet42 = $scope.popupParam.main.dataSheet42;
                $scope.settleInfo = $scope.popupParam.main.settleInfo;
                
                $scope.dataSheet = [];
                $scope.dataSheet1 = [];
                $scope.comboArr = [];
                $scope.result = [];
                
                if($scope.table_dg_sheet1_popup != null){
                    $scope.table_dg_sheet1_popup.fnClearTable();
                    $scope.table_dg_sheet1_popup.fnDestroy();
                }
                
                $scope.init_claim_combo(); 
                
                $scope.wf_initSheetSet_receipts_claim();
                
                $scope.renderTableDgSheet($scope.dataSheet);
                BaseService.focusTableRow($scope.table_dg_sheet_claim_popup, 0);
                
                
                $scope.renderTableDgSheet1($scope.dataSheet1);
                BaseService.focusTableRow($scope.table_dg_sheet1_claim_popup, -1);
                
                $scope.$apply();
                
                $('#' + $scope.popupId).modal('show');
                
            });
            
            $scope.init_claim_combo = function(){
                var validFlag = "";
				for(var i = 0; i < $scope.settleInfo.length ; i++){
					if(validFlag != $scope.settleInfo[i].REFUND_FLAG && Number($scope.settleInfo[i].REFUND_FLAG) < 60){
				    	$scope.comboArr.push({ code : $scope.settleInfo[i].REFUND_FLAG, codeName : $scope.settleInfo[i].REFUND_NAME});
				 	}
				    validFlag = $scope.settleInfo[i].REFUND_FLAG;
				}
                
                //build selected list
                $scope.settleGB = {};
                $.each($scope.comboArr, function(index, item){
                    $scope.settleGB[item.code] = item.codeName;
                });
            }
            
            $scope.wf_initSheetSet_receipts_claim = function(){
                
                var settle_gb         = "";
                var cancel_yn         = "";
                var repay_pb_amt      = 0;  
                var addRow               = 0;
                var tempSumClaimAmt   = 0;                
                var checkFindRow         = -1;
                var checkFindRow1        = -1;    
                var chkRow               = -1;  
                var isDeposit        = true;   
                var i                    = 0;       
                var j                    = 0;
                
                for(i=0 ; i<$scope.dataSheet40.length; i++){
	                settle_gb    = $scope.dataSheet40[i].SETTLE_GB;
	                cancel_yn    = $scope.dataSheet40[i].CANCEL_YN;
	                repay_pb_amt = Number($scope.dataSheet40[i].REPAY_PB_AMT);

                    //= 환불접수건/수수료 건은 제외
                    if(settle_gb.substring(0,1) == "5" || settle_gb.substring(0,1) == "6" ){
                        continue;
                    }

                    //= 신규 ROW 제외
                    if($scope.dataSheet40[i].cwareAction == "I" || $scope.dataSheet40[i].cwareAction == "IM"){
                        continue;
                    }

                    if(cancel_yn =="0"){
                        if( settle_gb !="01" && settle_gb !="05" ){
                            if( repay_pb_amt <= 0){
                                continue;
                            }
                        }
                    }else{
                        continue;
                    }
                    
                    addRow = $scope.dataSheet.length;
                    BaseService.gf_dgSheetCopyInsert($scope.dataSheet, $scope.dataSheet40, i, addRow);
                    BaseService.uf_SetItemModified($scope.dataSheet, addRow, "");
                                        
                    for(j = 0; j < $scope.settleInfo.length ; j++){
                    	if($scope.settleInfo[j].SETTLE_FLAG == settle_gb){
							if($scope.settleInfo[j].REFUND_DEPOSIT_YN == '0'){
								isDeposit = false;
							}
                    	}
                    }                                                                               
                }
                
                for( i=0; i<$scope.dataSheet42.length; i++){
                    addRow = $scope.dataSheet1.length;
                    BaseService.gf_dgSheetCopyInsert($scope.dataSheet1, $scope.dataSheet42, i);
                    BaseService.uf_SetItemModified($scope.dataSheet1, addRow, "");
                } 

			    //= 반품접수 금액 Setting.
			    for( i=0; i<$scope.dataSheet30.length; i++ ) {
			        if( Number($scope.dataSheet30[i].ACT_CLAIM_AMT) > 0){
			            tempSumClaimAmt = tempSumClaimAmt + Number($scope.dataSheet30[i].ACT_CLAIM_AMT);
			        }
			    }
			    tempSumClaimAmt = BaseService.modAmt(tempSumClaimAmt);
			    $scope.em_claim_amt = String(tempSumClaimAmt);
			
			    //= 반품접수된 수량
			    for(i=0; i<$scope.dataSheet30.length; i++) {
			        if( Number($scope.dataSheet30[i].ACT_CLAIM_QTY) > 0){
			            checkFindRow = i;
			            break;
			        }
			    }
			    
			    //= 한 주문건에 대한 환불정보는 한건임
			    if(checkFindRow >= 0){
			        chkRow = $scope.dataSheet1.length;
			        for( i = 0; i < chkRow; i++ ) {
			            if($scope.dataSheet1[i].STATE_CHECK == "I" || $scope.dataSheet1[i].STATE_CHECK == "IM"){
                            $scope.dataSheet1[i].cwareAction = $scope.dataSheet1[i].STATE_CHECK;
			                checkFindRow1 = i;
			                break;
			            }
			        }
			        
			        //= 신규 환불정보 입력 (dw_sheet1)
			        if(checkFindRow1 == -1){
                        
                        var rowSheet1 = {
                            CLAIM_DATE      : "",
                            SETTLE_GB       : "",
                            BANK_CODE       : "",
                            BANK_NAME       : "",
                            BANK_DEPOSIT_NO : "",
                            DEPOSITOR       : "",
                            REPAY_NOTE      : "",
                            ORDER_NO        : "",
                            CUST_NO         : "",
                            INSERT_ID       : "",
                            STATE_CHECK     : "",
                            cwareAction     : "I",
                        }

                        addRow = $scope.dataSheet1.length;
                        $scope.dataSheet1.push(rowSheet1);
			        	/*addRow = dg_sheet1.uf_insertRow($scope.dataSheet1.length);
			        	dg_sheet1.uf_SetItem(addRow, "ORDER_NO"    , parentDocument.gWindow.master.order_no.text);
			        	dg_sheet1.uf_SetItem(addRow, "CUST_NO"     , $scope.dataSheet30[0].CUST_NO);
			        	dg_sheet1.uf_SetItem(addRow, "STATE_CHECK" , "N");	
			        	
			        	if(dg_sheet.dataProvider.length > 0 && isDeposit){
							dg_sheet1.uf_SetItem(dg_sheet1.selectedIndex,"SETTLE_GB","56",false);
							dg_sheet1.uf_SetItem(dg_sheet1.selectedIndex, "DEPOSITOR", parentDocument.gWindow.master.cust_name.text);
			        	}*/	
                        
                        
                        BaseService.uf_SetItem($scope.dataSheet1, addRow, "ORDER_NO", $scope.popupParam.main.dataSheet.ORDER_NO);
                        BaseService.uf_SetItem($scope.dataSheet1, addRow, "CUST_NO", $scope.popupParam.main.dataSheet.CUST_NO);
                        BaseService.uf_SetItem($scope.dataSheet1, addRow, "DEPOSITOR", $scope.popupParam.main.dataSheet.CUST_NAME);
                        BaseService.uf_SetItem($scope.dataSheet1, addRow, "STATE_CHECK", "N");
                        
                        if($scope.dataSheet.length > 0 && isDeposit){
                            BaseService.uf_SetItem($scope.dataSheet1, addRow, "SETTLE_GB", "56");
                        }
			        }
			    }
			
			    /*for( i=0; i<$scope.dataSheet1.length; i++) {
			        if($scope.dataSheet1[i].STATE_CHECK != "N"){
			        	dg_sheet1.uf_SetItemModified(i, $scope.dataSheet1[i].STATE_CHECK);
			        }
			    }*/
                
            }
            
            $scope.confirmClick = function(){
                
                $scope.wf_click_select_popup();
                
                $('#' + $scope.popupId).modal('hide');
            };
            
            $scope.cancelClick = function(){
                $('#' + $scope.popupId).modal('hide');
            };
            
            $scope.renderTableDgSheet = function(dataSource){
                if(dataSource != null){
                    
                    $scope.table_dg_sheet_claim_popup = $('#table_dg_sheet_claim_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                        	"data": "DO_FLAG",
                            "render": function(data, type, row){
                                var doFlag = "";
                                var selectDoFlag = getJSONObjects($scope.popupParam.main.SHEET40_C_DO_FLAG, 'code', row.DO_FLAG);
                                if(selectDoFlag != null && selectDoFlag.length > 0){
                                    doFlag = selectDoFlag[0].codeName;
                                }
                                return doFlag;
                            }
                        }, {
                            "data": "SETTLE_GB",
                            "class": "text-center",
                            "render": function(data, type, row){
                                var settleType = "";
                                var selectSettleType = getJSONObjects($scope.popupParam.main.SHEET40_C_SETTLE_GB, 'code', row.SETTLE_GB);
                                if(selectSettleType != null && selectSettleType.length > 0){
                                    settleType = selectSettleType[0].codeName;
                                }
                                return settleType;
                            }
                        }, {
                            "data": "CARD_BANK_CODE",
                            "class": "text-center"
                        }, {
                            "data": "BANK_NAME",
                        }, {
                            "data": "CARD_NO",
                        }, {
                            "data": "DEPOSITOR",
                        }, {
                            "data": "QUEST_AMT",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(row.QUEST_AMT, 2, '.', ',');
                            }
                        }, {
                            "data": "REPAY_PB_AMT",
                            "class": "text-right",
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(row.QUEST_AMT, 2, '.', ',');
                            }
                        }, {
                            "data": "VALID_DATE",
                        }, {
                            "data": "PAY_MONTH",
                        }, {
                            "data": "OK_DATE",
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table_dg_sheet_claim_popup, 0);
                    BaseService.generateTooltip($scope.table_dg_sheet_claim_popup);
                    
                    setTimeout(function(){
                        $scope.table_dg_sheet_claim_popup.off('click', 'tbody tr');
                        $scope.table_dg_sheet_claim_popup.on('click', 'tbody tr', function(e) {
                            $.each(this.parentElement.childNodes, function(index, elem){
                                $(elem).removeClass("row-focus");
                            });
                            $(this).addClass("row-focus");
                            $scope.currentRowDgSheet = this;

                            var aData = $scope.table_dg_sheet_claim_popup.api().row(this).data();
                            if(aData != null){
                                $scope.selectedRow = aData;
                            }
                        });
                    }, 50);
                }
            };
            
            $scope.renderTableDgSheet1 = function(dataSource){
                if(dataSource != null){
                    
                    $scope.table_dg_sheet1_claim_popup = $('#table_dg_sheet1_claim_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                        	"data": "CLAIM_DATE",
                        }, {
                            "data": "SETTLE_GB",
                            "class": "col-SETTLE_GB editable select-in-row",
                            "render": function(data, type, row){
                                var settleType = "";
                                var selectSettleType = getJSONObjects($scope.comboArr, 'code', row.SETTLE_GB);
                                if(selectSettleType != null && selectSettleType.length > 0){
                                    settleType = selectSettleType[0].codeName;
                                }
                                return settleType;
                            }
                        }, {
                            "data": "BANK_CODE",
                            "class": "text-center"
                        }, {
                            "data": "BANK_NAME",
                        }, {
                            "data": "BANK_DEPOSIT_NO",
                            "class": "col-BANK_DEPOSIT_NO editable",
                        }, {
                            "data": "DEPOSITOR",
                            "class": "col-DEPOSITOR editable",
                        }, {
                            "data": "REPAY_NOTE",
                            "class": "col-REPAY_NOTE editable",
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table_dg_sheet1_claim_popup, 0);
                    BaseService.generateTooltip($scope.table_dg_sheet1_claim_popup);
                    
                    setTimeout(function(){
                        $scope.table_dg_sheet1_claim_popup.off('click', 'tbody tr');
                        $scope.table_dg_sheet1_claim_popup.on('click', 'tbody tr', function(e) {
                            $.each(this.parentElement.childNodes, function(index, elem){
                                $(elem).removeClass("row-focus");
                            });
                            $(this).addClass("row-focus");
                            $scope.currentRowDgSheet1 = this;

                            var aData = $scope.table_dg_sheet1_claim_popup.api().row(this).data();
                            if(aData != null){
                                $scope.selectedDgSheet1Row = aData;
                            }
                        });
                        
                        BaseService.activateEditTable($scope.table_dg_sheet1_claim_popup, 'SETTLE_GB', {
                            "data": angular.toJson($scope.settleGB),
                            type: "select",
                            selectId: "claimDataSheet1SettleGB",
                            angularScope: $scope,
                            angularValidate: function (value, settings){
                                var aData = $scope.table_dg_sheet1_claim_popup.api().row($scope.currentRowDgSheet1).data();
                                
                                $scope.settleGBOld = aData.SETTLE_GB;
                                
                                if(aData.cwareAction && aData.cwareAction == 'I'){
                                    return true;
                                }else{
                                    return false;
                                }
                                
                            },
                            callback: function (value, settings, selectedValue){
                                $(this).html($scope.settleGB[$scope.settleGBOld]);
                                var focusRow = $scope.table_dg_sheet1_claim_popup.api().row($scope.currentRowDgSheet1); 
                                var aData = focusRow.data();

                                /*if($scope.ue_itemRenderChanged('SETTLE_GB', $scope.selectedDgSheet1Row, value, $scope.settleGBOld)){
                                    if(aData != null){
                                        $(this).html($scope.settleGB[value]);
                                    }
                                }else{
                                    $(this).html($scope.settleGB[$scope.settleGBOld]);
                                }*/
                                
                                $scope.renderTableDgSheet1($scope.dataSheet1);
                                BaseService.focusTableRow($scope.table_dg_sheet1_claim_popup, focusRow.index());
                            }
                        });
                        
                        BaseService.activateEditTable($scope.table_dg_sheet1_claim_popup, 'BANK_DEPOSIT_NO', {
                            "typeClassName": "",
                            "inputFormat": "",
                            angularValidate: function (value, settings){
                                var aData = $scope.table_dg_sheet1_claim_popup.api().row($scope.currentRowDgSheet1).data();
                                if(aData.cwareAction && aData.cwareAction == 'I'){
                                    return true;
                                }else{
                                    return false;
                                }
                            },
                            callback: function (value, settings){
                                
                                var aData = $scope.table_dg_sheet1_claim_popup.api().row($scope.currentRowDgSheet1).data();
                                
                                if(aData != null){
                                    aData.BANK_DEPOSIT_NO = value;
                                }
                                
                            }
                        });
                        
                        BaseService.activateEditTable($scope.table_dg_sheet1_claim_popup, 'DEPOSITOR', {
                            "typeClassName": "",
                            "inputFormat": "",
                            angularValidate: function (value, settings){
                                var aData = $scope.table_dg_sheet1_claim_popup.api().row($scope.currentRowDgSheet1).data();
                                /*if(aData.cwareAction && aData.cwareAction == 'I'){
                                    return true;
                                }else{
                                    return false;
                                }*/
                                return true;
                            },
                            callback: function (value, settings){
                                
                                var aData = $scope.table_dg_sheet1_claim_popup.api().row($scope.currentRowDgSheet1).data();
                                
                                if(aData != null){
                                    aData.DEPOSITOR = value;
                                }
                            }
                        });
                        
                        BaseService.activateEditTable($scope.table_dg_sheet1_claim_popup, 'REPAY_NOTE', {
                            "typeClassName": "text-left",
                            "inputFormat": "",
                            angularValidate: function (value, settings){
                                var aData = $scope.table_dg_sheet1_claim_popup.api().row($scope.currentRowDgSheet1).data();
                                /*if(aData.cwareAction && aData.cwareAction == 'I'){
                                    return true;
                                }else{
                                    return false;
                                }*/
                                return true;
                            },
                            callback: function (value, settings){
                                var aData = $scope.table_dg_sheet1_claim_popup.api().row($scope.currentRowDgSheet1).data();
                                
                                if(aData != null){
                                    aData.REPAY_NOTE = value;
                                }
                                
                            }
                        });
                        
                    }, 50);
                    
                }
            };
            
            $scope.$on('claimDataSheet1SettleGB.change', function(e, selectValue){
                
                if($scope.ue_itemRenderChanged('SETTLE_GB', $scope.selectedDgSheet1Row, selectValue, $scope.settleGBOld)){
                    if($scope.selectedDgSheet1Row != null){
                        $scope.selectedDgSheet1Row.SETTLE_GB = selectValue;
                    }
                }else {
                    $scope.selectedDgSheet1Row.SETTLE_GB = $scope.settleGBOld;
                }
                
                $scope.renderTableDgSheet1($scope.dataSheet1);
                
            });
            
            $scope.wf_click_select = function(s){
                
                var settle_gb       = "";
                var bank_code       = "";
                var bank_name       = "";
                var bank_deposit_no = "";
                var depositor       = "";
                var repay_note      = "";
                var templen            = 0;
                var findRow            = -1;
                var addRow             = 0;
                
                templen = $scope.dataSheet1.length;	 
                if($scope.dataSheet && $scope.dataSheet.length > 0){
                	for( var i = 0; i < templen; i++ ) {
    	        	    if($scope.dataSheet1[i].cwareAction != null && $scope.dataSheet1[i].cwareAction != ''){
                            settle_gb       = $scope.dataSheet1[i].SETTLE_GB;
                            bank_code       = $scope.dataSheet1[i].BANK_CODE;
                            bank_name       = $scope.dataSheet1[i].BANK_NAME;
                            bank_deposit_no = $scope.dataSheet1[i].BANK_DEPOSIT_NO;
                            depositor       = $scope.dataSheet1[i].DEPOSITOR;
                            repay_note      = $scope.dataSheet1[i].REPAY_NOTE;

    		                if($scope.dataSheet1[i].cwareAction == "I" || $scope.dataSheet1[i].cwareAction == "IM"){
    		                    if(settle_gb == "" && bank_code == "" && bank_deposit_no == "" && depositor == "" /* && repay_note == "" */){
    								$scope.dataSheet1.splice(i);
                                    templen--;
                                    i--;
    		                        continue;
    		                    }
    		                }
    		
    		                //= 필수항목 Null Check
    		                if(settle_gb == ""){
    		                    //Main.messageBox(Main.gf_getMessageCross("msg", "msg.select_item_a", "word", "word.pay_gb"));
    							BaseService.alertWarning("Select category. Category:Payment code");
    		                    return;
    		                }
    		                if(depositor == ""){
    		                    //Main.messageBox(Main.gf_getMessageCross("msg", "msg.select_item_a", "word", "word.deposit_owner"),dg_sheet1,i,dg_sheet1.getColumnIndex("DEPOSITOR"));
    							BaseService.alertWarning("Select category. Category:Ac. Owner");
    		                    return;
    		                }

//    		                //= 필수항목 Null Check
//    		                chk = gf_chk_dwmodified(dw_sheet1)
//    		                IF chk < 0 THEN RETURN

    		                //= 현금환불인 경우 환불은행 Check
    		                if(settle_gb =="52"||settle_gb =="53"){
    		
//    		                    if(bank_code == "" || bank_name == ""){
    		                    if(bank_code == ""){
    		                        //Main.messageBox(Main.gf_getMessageCross("msg", "msg.select_item_a", "word", "word.refund_bank"),dg_sheet1,i,dg_sheet1.getColumnIndex("BANK_NAME"));
    								BaseService.alertWarning("Select category. Category:Bank");
    		                        return;
    		                    }
    		
    		                    if( bank_deposit_no == "" ){
    		                        //Main.messageBox(Main.gf_getMessageCross("msg", "msg.select_item_a", "word", "word.refumd_bank_account_no"),dg_sheet1,i,dg_sheet1.getColumnIndex("BANK_DEPOSIT_NO"));
    								BaseService.alertWarning("Select category. Category:Refund Bank Account No.");
    		                        return;
    		                    }
    		                }else if(settle_gb =="01"){
    		                    /* if( repay_note == "" ){
    		                        Main.messageBox(Main.gf_getMessageCross("msg", "msg.select_item_a", "word", "word.refund_list"),dg_sheet1,i,dg_sheet1.getColumnIndex("REPAY_NOTE"));
    		                        return;
    		                    } */
    		                }
    		
    		                $scope.dataSheet1[i].STATE_CHECK = $scope.dataSheet1[i].cwareAction;
    		            }
    		        }	
                }
	        		
		
		        //= Modified 안된 신규Row 삭제		
		        for( i = 0; i < $scope.dataSheet1.length; i++ ) {                
		            if($scope.dataSheet1[i].STATE_CHECK == "N"){
		                findRow = i;
		            }
		        }
		
		        if(findRow >= 0){
                    $scope.dataSheet1.splice(findRow);
		        }
		
		        //= 접수된 환불 정보를 불만접수 Window의 환불정보 Dw로 옮김
		        templen = $scope.dataSheet42.length;
		        for( i = 0; i < templen; i++ ) {  
		            if($scope.dataSheet42[i].cwareAction == "I" || $scope.dataSheet42[i].cwareAction == "IM"){
                        $scope.dataSheet42.splice(i);
			            templen--;
			            i--;
		            }
		        }
		
		        for( i = 0; i < $scope.dataSheet1.length; i++ ) {    
		            if($scope.dataSheet1[i].cwareAction){
		            	
                        var data = {
                            "CUST_NO"        : $scope.dataSheet1[i].CUST_NO,
                            "CLAIM_DATE"     : "",
                            "ORDER_NO"       : $scope.popupParam.main.dataSheet.ORDER_NO,
                            "SETTLE_GB"      : $scope.dataSheet1[i].SETTLE_GB,
                            "BANK_CODE"      : $scope.dataSheet1[i].BANK_CODE,
                            "BANK_DEPOSIT_NO": $scope.dataSheet1[i].BANK_DEPOSIT_NO,
                            "DEPOSITOR"      : $scope.dataSheet1[i].DEPOSITOR,
                            "REPAY_NOTE"     : $scope.dataSheet1[i].REPAY_NOTE,
                            "INSERT_ID"      : "",
                            "BANK_NAME"      : $scope.dataSheet1[i].BANK_NAME,
                            "STATE_CHECK"    : $scope.dataSheet1[i].STATE_CHECK,
                            "cwareAction"    : "I",
                        };
                        
                        $scope.dataSheet42.push(data);
		            }
		        }
		        $scope.chk_cod_ccod = s;
		        
				//close popup
                var data = {
                    dg_sheet42: $scope.dataSheet42,
                    chk_cod_ccod: $scope.chk_cod_ccod
                }
                $scope.$emit($scope.popupId + ".confirm", angular.copy(data));
                $('#' + $scope.popupId).modal('hide');
                
            }
            
            $scope.ue_itemRenderChanged = function(dataField, data, newVal, oldVal){
                
                var findRow = -1;
                var i = 0;
                var j = 0;
                
                if(dataField == 'SETTLE_GB'){
                    if(newVal == ''){
                        BaseService.alertWarning("Category not entered. Classification:[Payment code]");
                        //reset value
                        $scope.selectedDgSheet1Row.SETTLE_GB = oldVal;
                        return false;
                    }

                    for(i = 0; i < $scope.settleInfo.length ; i++){
                        if($scope.settleInfo[i].REFUND_FLAG == newVal){
                            for(j= 0; j < $scope.dataSheet.length; j++ ) {
                                if($scope.dataSheet[j].SETTLE_GB == $scope.settleInfo[i].SETTLE_FLAG){
                                    findRow = j;
                                    break;	
                                }
                            }
                            if(findRow < 0) if($scope.dataSheet.length > 0 && newVal == '56' && $scope.settleInfo[i].REFUND_DEPOSIT_YN == '1'){
                                findRow = j;
                                break;
                            }
                        }
                    }
                    
                    if(findRow < 0){                           
                        BaseService.alertWarning("Selected payment cannot be processed.");
                        //reset value
                        $scope.selectedDgSheet1Row.SETTLE_GB = oldVal;
                        return false;
                    }
		            
		            /*dg_sheet1.uf_SetItem(evt.target.selectedIndex, "BANK_CODE", "");
		            dg_sheet1.uf_SetItem(evt.target.selectedIndex, "BANK_DEPOSIT_NO", "");
		            dg_sheet1.uf_SetItem(evt.target.selectedIndex, "DEPOSITOR", parentDocument.gWindow.master.cust_name.text);*/
                    
                    data.BANK_CODE = "";
                    data.BANK_DEPOSIT_NO = "";
                    data.DEPOSITOR = $scope.popupParam.main.dataSheet.CUST_NAME;
                }
                
                /*if(evt.dataField == "SETTLE_GB" ) {         
                    if(newVal == "52" || newVal == "53" || newVal == "54"){
                        dg_sheet1.uf_setColumn("REPAY_NOTE");
                    }else{
                        dg_sheet1.uf_setColumn("REPAY_NOTE");    
                    }
                } */
                
                $scope.selectedDgSheet1Row.SETTLE_GB = newVal;
                
                return true;
                
            }
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'receipts_cliam_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = true;
        }
    }
});

app.directive('orderGiftSelectionPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/orderGiftSelectionPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.dataGift = [];
            $scope.dataGiftGoods = [];
            $scope.dataGiftGoodsDt = [];

            $scope.selectedGift = {};
            $scope.selectedGiftGoods = {};
            $scope.selectedGiftGoodsDt = {};
            
            $scope.isConfirmClicked = false;
            $scope.imgLoadingPath = currentUrl + "/resources/assets/images/progress/progress-circle-success.svg";
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');

                setTimeout(function(){
                    $scope.dataGift = $scope.popupParam.dataSheetGift;
                    $scope.renderTable($scope.dataGift);
                    BaseService.focusTableRow($scope.table, 0);
                }, 200);  
                $scope.isConfirmClicked = false;
            });
            
            $scope.retrieveGiftData = function(){
                var filter = {
                    COUPON_YN: '0',
                    GIFT_PROMO_NO: $scope.selectedGift.PROMO_NO,
                    FIRST_ORDER_YN: $scope.popupParam.dataConfig.first_order_yn,
                    MEMB_GB: $scope.popupParam.dataConfig.memb_gb
                };
                BaseService.getPopupData("popup/retrieve-order-gift-info", filter).then(
                    function(respone){
                        $scope.dataGift = respone.data.result.RESULT_AMT_GIFT;
                        if($scope.dataGift) {
                            if($scope.dataGift.length > 0) {
                                $scope.selectedGift = $scope.dataGift[0];
                            }
                            $scope.dataGiftGoods = [];
                            var giftGoods =  respone.data.result['RESULT_GIFT_GOODS_' + $scope.selectedGift.PROMO_NO];
                            if(giftGoods != null){
                                $.each(giftGoods, function(i, item){
                                    $scope.dataGiftGoods.push(item);
                                });
                            }
                            $scope.dataGiftGoodsDt = [];
                            var giftGoodsDt =  respone.data.result['RESULT_GIFT_GOODSDT_' + $scope.selectedGift.PROMO_NO];
                            if(giftGoodsDt != null){
                                $.each(giftGoodsDt, function(i, item){
                                    $scope.dataGiftGoodsDt.push(item);
                                });
                            }
                            $scope.renderTableGiftGoods($scope.dataGiftGoods);
                            BaseService.focusTableRow($scope.table_order_gift_goods, 0);
                        }
                    }
                );
            };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    $scope.table = $('#table_order_gift').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "PROMO_NAME"
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table, 0);
                    BaseService.generateTooltip($scope.table);
                    
                    setTimeout(function(){
                        $scope.table.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentRow = this;
                            var aData = $scope.table.api().row(this).data();
                            if(aData != null){
                                $scope.selectedGift = aData;
                                setTimeout(function(){
                                    $scope.$apply();
                                    $scope.retrieveGiftData();
                                }, 100);
                            }
                        });
                    }, 50);
                }
            };
            
            $scope.renderTableGiftGoods = function(dataSource){
                if(dataSource != null){
                    $scope.table_order_gift_goods = $('#table_order_gift_goods').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return "";
                            }
                        }, {
                            "render": function(data, type, row){
                                return row.GIFT_GOODS_CODE + "&ensp;&ensp;" + row.GOODS_NAME;
                            }
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false,
                    });
                    
                    BaseService.generateRowNumber($scope.table_order_gift_goods, 0);
                    BaseService.generateTooltip($scope.table_order_gift_goods);
                    
                    setTimeout(function(){
                        $scope.table_order_gift_goods.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentGiftGoodsRow = this;

                            var aData = $scope.table_order_gift_goods.api().row(this).data();
                            if(aData != null){
                                $scope.selectedGiftGoods = aData;
                                $scope.dataGiftGoodsDt = getJSONObjects($scope.dataGiftGoodsDt, 'GOODS_CODE', $scope.selectedGiftGoods.GIFT_GOODS_CODE);
                                $scope.renderTableGiftGoodsDt($scope.dataGiftGoodsDt);
                                BaseService.focusTableRow($scope.table_order_gift_goods_dt, 0);
                            }
                        });
                    }, 50);
                }
            };
            
            $scope.renderTableGiftGoodsDt = function(dataSource){
                if(dataSource != null){
                    $scope.table_order_gift_goods_dt = $('#table_order_gift_goods_dt').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "render": function(data, type, row){
                                return row.GOODSDT_CODE + "&ensp;&ensp;" + row.CODE_NAME + "&ensp;&ensp;" + row.GOODSDT_INFO;
                            }
                        }, {
                            "data": "SELECT_YN",
                            "class": "text-center checkbox-in-row",
                            "render": function(data, type, row){
                                var checked = (data == "1") ? true : false;
                                return '<table-checkbox check-id="'+ row.GOODS_CODE + row.GOODSDT_CODE +'" checked="'+ checked +'" action-change="goodsDtSelectChangeClick(event, checked)"></table-checkbox>';
                            }
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false,
                    });
                    
                    setTimeout(function(){
                        $scope.table_order_gift_goods_dt.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentGiftGoodsDtRow = this;
                        });
                    }, 50);
                }
            };
            
            $scope.goodsDtSelectChangeClick = function(e, checked){
                var rowData = $scope.table_order_gift_goods_dt.api().row($scope.currentGiftGoodsDtRow).data();
                if(rowData != null){
                    var newValue = (checked) ? 1 : 0;
                    if($scope.dataGiftGoodsDt != null){
                        $.each($scope.dataGiftGoodsDt, function(index, item){
                            if(item.GOODSDT_CODE == rowData.GOODSDT_CODE){
                                item.SELECT_YN = newValue;
                            }
                            else item.SELECT_YN = 0;
                            
                            $('#' + item.GOODS_CODE + item.GOODSDT_CODE).prop('checked', (item.SELECT_YN == 1) ? true : false);
                        });
                    }
                }
            };
            
            $scope.confirmClick = function(){
            	if($scope.isConfirmClicked) {
            		return false;
            	}
            	$scope.isConfirmClicked = true;
            	var filter = {
                    paramConfig: [$scope.popupParam.dataConfig],
                    paramPromoGift: $scope.getSelectedGift()
                };
                BaseService.getPopupData("popup/set-order-amt-gift", filter, 'POST').then(
                    function(respone){
                        if(respone.data.ERROR_MESSAGE){
                            BaseService.alertWarning(respone.data.ERROR_MESSAGE);
                            return;
                        }
                        var data = respone.data.result;
                        data.promoGift = filter.paramPromoGift[0];
                        data.ORDERGOODS.promo_no = data.promoGift.PROMO_NO;
                        $scope.$emit($scope.popupId + ".confirm", angular.copy(respone.data.result));
                        $('#' + $scope.popupId).modal('hide');
                    }
                );
            };
            
            $scope.getSelectedGift = function(){
                var arrSelectedGift = [];
                var isSelectedGift = true;
                var msg;
                var currentGiftGoods, currentGiftGoodsDt, selectedGiftGoodsDt;
                if($scope.dataGift.length > 0){
                    $.each($scope.dataGift, function(i, promoItem) {
                        if(promoItem.DO_TYPE == '10'){
                            currentGiftGoods = getJSONObjects($scope.dataGiftGoods, 'PROMO_NO', promoItem.PROMO_NO);
                            $.each(currentGiftGoods, function(j, promoGoodsItem){
                                currentGiftGoodsDt = getJSONObjects($scope.dataGiftGoodsDt, 'GOODS_CODE', promoGoodsItem.GIFT_GOODS_CODE);
                                if(currentGiftGoodsDt.length == 1) {
                                    selectedGiftGoodsDt = currentGiftGoodsDt[0];
                                    selectedGiftGoodsDt.SELECT_YN = 1;
                                }
                                else {
                                    var selectedGoodDt = getJSONObjects(currentGiftGoodsDt, 'SELECT_YN', 1);
                                    if(selectedGoodDt.length == 1){
                                        selectedGiftGoodsDt = selectedGoodDt[0];
                                        selectedGiftGoodsDt.SELECT_YN = 1;
                                    }
                                    else {
                                        if(!msg){
                                            msg = "Select category.<br>[Promotion [" + promoItem.PROMO_NAME + "] Gift Unit " + (i+1) + " Number]";
                                        }
                                        isSelectedGift = false;
                                    }
                                }
                                
                                if(isSelectedGift){
                                    var selectedGift = promoGoodsItem;
                                    selectedGift.CODE_NAME = selectedGiftGoodsDt.CODE_NAME;
                                    selectedGift.GOODSDT_CODE = selectedGiftGoodsDt.GOODSDT_CODE;
                                    selectedGift.GOODSDT_INFO = selectedGiftGoodsDt.GOODSDT_INFO;
                                    selectedGift.GOODS_CODE = selectedGiftGoodsDt.GOODS_CODE;
                                    selectedGift.PROMO_NO = selectedGiftGoodsDt.PROMO_NO;
                                    selectedGift.PROMO_SEQ = selectedGiftGoodsDt.PROMO_SEQ;
                                    selectedGift.SALE_GB = selectedGiftGoodsDt.SALE_GB;
                                    selectedGift.SELECT_YN = selectedGiftGoodsDt.SELECT_YN;
                                    arrSelectedGift.push(selectedGift);
                                }
                            });
                        }
                    });
                    
                    if(!isSelectedGift && msg){
                        BaseService.alertWarning(msg);
                        $scope.isConfirmClicked = false;
                    }
                }
                return (isSelectedGift) ? arrSelectedGift : [];
            };
            
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'order_gift_selection_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
        }
    }
});

app.directive('invoiceRequestPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/invoiceRequestPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.dataInvoice = null;
            $scope.selectedInvoice = {};
            $scope.selectedReceieverGb = {};
            $scope.cmbReceieverGb = [];
            $scope.deliveryInquiryParam = {};
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');

                setTimeout(function(){
                    $scope.getPopupHeaderData();
                }, 200);
                
                $('#' + $scope.popupId).on('hidden.bs.modal', function () {
                    $scope.dataInvoice = null;
                    $scope.dataInvoiceDetail = null;
                    $scope.selectedInvoice = {};
                    $scope.selectedReceieverGb = {};
                    $scope.cmbReceieverGb = [];
                    $scope.deliveryInquiryParam = {};
                    $scope.$apply();
                });
            });
            
            $scope.getPopupHeaderData = function(){
            	//P_INVOICE = 1198
            	BaseService.getPopupData("popup/retrieve/1198/header", $scope.popupParam).then(
	                function(respone){
                        setTimeout(function(){
                            $scope.cmbReceieverGb = respone.data.C_RECEIVER_GB;
                            $scope.getPopupData();
                        }, 100);
	                }
	            );
            };
            
            $scope.getPopupData = function(){
            	//P_INVOICE = 1198
            	BaseService.getPopupData("popup/retrieve-many/1198", $scope.popupParam).then(
	                function(respone){
                        setTimeout(function(){
                            $scope.dataInvoice = (respone.data.result.RESULT.length > 0) ? respone.data.result.RESULT : respone.data.result.RESULT_DETAIL;
                            $.each($scope.dataInvoice, function(index, item){
                                item.ORDER_NO = (item.ORDER_NO) ? item.ORDER_NO : $scope.popupParam.order_no;
                                item.ORDER_NO_WITH_DASH = item.ORDER_NO.substring(0, 8) + '-' + item.ORDER_NO.substring(8, 14);
                                item.CANCEL_YN = (item.CANCEL_YN) ? item.CANCEL_YN : "0";
                            });
                            $scope.selectedInvoice = ($scope.dataInvoice != null && $scope.dataInvoice.length > 0) ? $scope.dataInvoice[0] : {};
                            $scope.selectedReceieverGb = BaseService.findObject($scope.cmbReceieverGb, 'code', $scope.selectedInvoice.RECEIVER_GB);
                            $('input[name="radio-invoice-request"][value="' + $scope.selectedInvoice.CANCEL_YN + '"]').prop('checked', true);
                            $scope.$apply();
                        }, 500);
	                }
	            );
            };
            
            $scope.openDeliveryLocationPicker = function(){
                $scope.deliveryInquiryParam = {
                    cust_no: $scope.selectedInvoice.CUST_NO,
                    receiver: $scope.selectedInvoice.RECEIVER
                };
                setTimeout(function(){
                    $scope.$broadcast('invoice_request_popup_delivery_inquiry_picker.open');
                }, 100);
            };
            
            $scope.saveClick = function(){
                $scope.selectedInvoice.CANCEL_YN = $('input[name=radio-invoice-request]:checked').val();
                if($scope.selectedInvoice.CANCEL_YN == '1' && ($scope.selectedInvoice.COMP_ADDR == null || $scope.selectedInvoice.COMP_ADDR == "")) {
                    BaseService.alertEmpty("Address.");
                    return;
                }
                if($scope.selectedInvoice.ORDER_NO) {
                    var paramInvoice = {
                        ORDER_NO: $scope.selectedInvoice.ORDER_NO,
                        CUST_NO: $scope.selectedInvoice.CUST_NO,
                        RECEIVER_SEQ: $scope.selectedInvoice.RECEIVER_SEQ,
                        PROC_YN: $scope.selectedInvoice.PROC_YN,
                        CANCEL_YN: $scope.selectedInvoice.CANCEL_YN,
                        INVOICE_TYPE: $scope.selectedReceieverGb.code,
                        TAX_ID: $scope.selectedInvoice.TAX_ID,
                        HEAD_OFFICE: $scope.selectedInvoice.HEAD_OFFICE
                    };
                    
                    var data = {
                        paramInvoice: [paramInvoice]
                    }
                    BaseService.savePopupData('popup/save-invoice', data).then(
                        function(response){
                            if(response.data.result == '000000'){
                                BaseService.alertSaveSuccess(function(){
                                    $scope.$emit($scope.popupId + ".confirm", angular.copy(response.data.result));
                                    $('#' + $scope.popupId).modal('hide');
                                });
                            }
                            else {
                                BaseService.alertWarning(response.data.result);
                            }
                        },
                        function(response){
                            BaseService.alertError(response.message);
                        }
                    );
                } else {
                    BaseService.alertNoSaveData();
                }
            };
            
            $scope.cancelClick = function(){
                $('#' + $scope.popupId).modal('hide');
            };
            
            $scope.$on('invoice_request_popup_delivery_inquiry_picker.select', function(e, data){
            	$scope.selectedInvoice.RECEIVER = data.RECEIVER;
                $scope.selectedInvoice.RECEIVER_ADDR = data.RECEIVER_ADDR;
                $scope.selectedInvoice.COMP_ADDR = data.COMP_ADDR;
                $scope.selectedInvoice.RECEIVER_POST = data.RECEIVER_POST;
                $scope.selectedInvoice.RECEIVER_GB = data.RECEIVER_GB;
                $scope.selectedInvoice.RECEIVER_SEQ = data.RECEIVER_SEQ;
                $scope.selectedInvoice.TAX_ID = data.TAX_ID;
                $scope.selectedInvoice.HEAD_OFFICE = data.HEAD_OFFICE;
                $scope.selectedInvoice.INSERT_DATE = "";
                $scope.selectedReceieverGb = BaseService.findObject($scope.cmbReceieverGb, 'code', data.RECEIVER_GB);
                $scope.$apply();
            });
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'invoice_request_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
        }
    }
});

app.directive('payReceivingDetailsPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/payReceivingDetailsPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');
                
                setTimeout(function(){
                	$scope.getData();
                }, 200);
            });
            
            $scope.getData = function (){
            	$scope.dataFilter = {};
                $scope.dataFilter.receipt_no = $scope.popupParam.receipt_no;
                $scope.dataFilter.quest_amt = $scope.popupParam.quest_amt;
                $scope.dataFilter.settle_gb = $scope.popupParam.settle_gb;
                $scope.dataFilter.settle_name = $scope.popupParam.settle_name;
                $scope.dataFilter.card_no = $scope.popupParam.card_no;
                $scope.dataFilter.comp_name = $scope.popupParam.comp_name;
                $scope.pay_do_flag = $scope.popupParam.pay_do_flag;
                
              //P_RECEIPTS_DETAIL
                BaseService.getPopupData("popup/retrieve/1209", $scope.dataFilter).then(
                    function(response){
                        $scope.popupData = response.data.result;
                        
                        $scope.renderTable($scope.popupData);
                        BaseService.focusTableRow($scope.table, 0);
                    },
                    function(respone){
                        
                    }
                );
            };

            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    $scope.table = $('#table_pay_receiving_details_popup').dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": "no text-center",
                            "render": function(data, type, row){
                                return '';
                            }
                        }, {
                            "data": "DO_FLAG",
                            "class": "text-center",
                            "render": function(data, type, row){
                                var doFlag = "";
                                var selectDoFlag = getJSONObjects($scope.pay_do_flag, 'code', data);
                                if(selectDoFlag != null && selectDoFlag.length > 0){
                                	doFlag = selectDoFlag[0].codeName;
                                }
                                return doFlag;
                            }
                        }, {
                            "data": "PROC_DATE"
                        }, {
                            "data": "USER_NAME"
                        }, {
                            "data": "PROC_AMT"
                        }, {
                        	"render": function(data, type, row){
                                return '';
                            }
                        }, {
                        	"render": function(data, type, row){
                                return '';
                            }
                        }, {
                        	"render": function(data, type, row){
                                return '';
                            }
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false
                    });
                    
                    BaseService.generateRowNumber($scope.table, 0);
                    BaseService.generateTooltip($scope.table);
                    
                    setTimeout(function(){
                        $scope.table.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                            BaseService.setRowFocus(this);
                            $scope.currentRow = this;
                            var aData = $scope.table.api().row(this).data();
                            if(aData != null){
                                $scope.popupSelectedData = aData;
                                $scope.$apply();
                            }
                        });
                    }, 50);
                }
            };
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'table_pay_receiving_details_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
        }
    }
});

app.directive('characterPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/characterPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.fileUpload = {};
            $scope.fileName = "";
            $scope.cmbLiveFlag = [];
            $scope.currentUrl = currentUrl;
            $scope.selectedPopUpData = {};
            $scope.selectedPopUpCharacter = {};
            $scope.cmbPopUpCharacter = [];
            $scope.selectedRow = {};
            $scope.saveStatus = false;
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
            	
            	$scope.selectedPopUpData = {};
                $scope.selectedPopUpCharacter = {};
            	$scope.popupData = {};
            	$('#' + $scope.popupId).modal('show');
                
            	$scope.getPopupData();
            	$scope.cmbPopUpCharacter = $scope.popupParam.cmbCharecter;
//            	$scope.cmbPopUpRowCharacter = angular.copy($scope.popupParam.cmbCharecter);
            	
                setTimeout(function(){
                	
                	$scope.$apply();
                }, 200);
            });
            
            
            
            $scope.getPopupData = function(){
            	           	
            	//P_CUST_SP_INFO = 1207;
            	BaseService.getPopupData("popup/retrieve/1207", $scope.popupParam).then(
	                function(respone){
	                	$scope.popupData = respone.data.result;
	                    $scope.isLoading = false;
	                    $scope.renderTable($scope.popupData);
	                    BaseService.focusTableRow($scope.oTable, 0);
	                    
	                    if($scope.popupData){
	                    	$scope.selectedPopUpCharacter = getJSONObjects($scope.cmbPopUpCharacter, 'code', $scope.popupData[0].CONTENT)[0];
	                    	
	                    }
	                    
	                },
	                function(respone){
	                	BaseService.alertWarning(respone.message)
	                }
	            );
            	
            };
            
           $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "bSortable": false,
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'SEQ',
                            "class": 'text-center',
                            "bSortable": false,
                            
                        }, {
                            "data": 'CONTENT',
                            "class": "col-CONTENT select-in-row",
                            "bSortable": false,
                            "render": function(data, type, row){
                            var content = "";
                            
                            var selectContent = getJSONObjects($scope.cmbPopUpCharacter, 'code', row.CONTENT);
                            if(selectContent != null && selectContent.length > 0){
                            	content = selectContent[0].codeName;
                            }
                            return content;
                        }
                            
                        }, {
                            "data": 'USER_NAME',
                            "bSortable": false,
                        }, {
                            "data": 'MODIFY_DATE',
                            "bSortable": false,
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "dom": 'rt<"bottom"lp><"clear">',
                        "order": [ 1, 'aesc' ],
                        "bDestroy": true,
                        "bSort": true,
                        "paging": false,
                        "filter": false,
                        "info": false,

                        
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    setTimeout(function(){
                    	
                    	$scope.tempPopUp = {
                    			selectedPopUpData: null,
                        		previousPopUpRow: null
                        };
                        
                    	$scope.oTable.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                    		
                    	if($scope.oTable != null){
                        		$scope.selectedRow = $scope.oTable.api().row(this).index();
                        		
                        	}
                    	
                    	if($scope.tempPopUp.previousPopUpRow != this){
                    		if($scope.tempPopUp.previousPopUpRow != null){
                    			if($scope.selectedPopUpData.cwareAction == "I"){
                    				$scope.validateSaveChange();
                                	return;
                    			}
                			}
                    		
                    	BaseService.setRowFocus(this);
                        $scope.currentRowPopUp = this;
                        $scope.tempPopUp.previousPopUpRow = this;

                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                            $scope.selectedPopUpData = aData;
                            $scope.tempPopUp.selectedPopUpData = angular.copy(aData);
                            $scope.selectedPopUpCharacter = getJSONObjects($scope.cmbPopUpCharacter, 'code', $scope.selectedPopUpData.CONTENT)[0];
                            setTimeout(function(){
                            	$scope.$apply();
                            }, 200);
                            
                        }
                        
                    	}
                    });
                    
                },50);
                    
                }
            };
            
            $scope.$on('onColumnEdit', function(e, elem, attrs){
                if($scope.oTable  != null && $scope.currentRowPopUp  != null && $scope.popupData != null){
                    setTimeout(function(){
                    	 if(attrs.checkColumnEdit == "CONTENT"){
                    		 $scope.selectedPopUpCharacter = ($scope.selectedPopUpCharacter == null) ? null : $scope.selectedPopUpCharacter;
                    		 
                    		 if($scope.selectedPopUpCharacter)
                    		 $scope.oTable.api()
                             .cell($scope.currentRowPopUp.childNodes[2])
                             .data($scope.selectedPopUpCharacter.code).render();
                    		 else{
                    			 $scope.oTable.api()
                                 .cell($scope.currentRowPopUp.childNodes[2])
                                 .data("").render();
                    		 }
                    		 
                    		 
                        }
                        
                    }, 50);
                }
            });
            
            $scope.inquiryClick = function(){
            	if($scope.selectedPopUpData.cwareAction == "I"){
                	$scope.validateSaveChange();
                }
            	else
            	$scope.getPopupData();
            }
            
            $scope.btnNewClick = function(){
            	
            	if($scope.selectedPopUpData.cwareAction == "I"){
                	$scope.validateSaveChange();
                }
            	else
            	$scope.insertPopUpData();

            	
            };
            
            $scope.btnDeleteClick = function(){
            	
            	if($scope.selectedPopUpData != null){
                    if($scope.selectedPopUpData.cwareAction == "I"){
                    	$scope.validateDeleteClicked();
                    }
                    else {
                    	BaseService.alertWarning("Existing data cannot be deleted.");
                    }
                }
                else {
                	BaseService.alertNoDeleteData();
                }
            };
            
            $scope.btnCloseClick = function(){
            	if($scope.selectedPopUpData){
            		if($scope.selectedPopUpData.cwareAction == "I"){
            			$scope.validateSaveChangeClose();
            		}
            		else{
            			$scope.$emit($scope.popupId + ".close", $scope.saveStatus);
            			$('#' + $scope.popupId).modal('hide');
            		}
            			
            	}
            	else{
            		$scope.$emit($scope.popupId + ".close", $scope.saveStatus);
            		$('#' + $scope.popupId).modal('hide');
            		
            	}
            	
            };
            
            $scope.btnSaveClick = function(){
        		
            	if($scope.validateSavePopUpData()){
            		var arrCustSpInfo = [];
                    
                        var custSpInfo = {
                        		
                        		CUST_NO : $scope.selectedPopUpData.CUST_NO,
                    			TYPE : $scope.selectedPopUpData.TYPE,
                    			SEQ : $scope.selectedPopUpData.SEQ,
                    			CONTENT : $scope.selectedPopUpData.CONTENT,
                    			MSG : $scope.selectedPopUpData.MSG,
                    			cwareAction : $scope.selectedPopUpData.cwareAction,
                        };
                        arrCustSpInfo.push(custSpInfo);
                    
                    
                    var data = {
                    		"paramCustSpInfo" : arrCustSpInfo
                    };

                    BaseService.savePopupData('popup/save-cust-sp-info', data).then(
                        function(response){
                            BaseService.alertSaveSuccess(function(){
                            	$scope.saveStatus = true;
                            	$scope.getPopupData();
                            });
                           
                        },
                        function(response){
                            BaseService.alertError(response.message);
                        }
                    );
            		
            		
            	}
            };
            
            $scope.insertPopUpData = function(){
            	
            	$scope.popupData = ($scope.popupData == null) ? [] : $scope.popupData;
            	var data = {
            			CUST_NO : $scope.popupParam.cust_no,
            			TYPE : "30",
            			SEQ : "",
            			CONTENT : "",
            			MSG : "",
            			cwareAction : "I",
            			USER_NAME : "",
            			rowId: BaseService.generateId(18),
            			
            	}
            	$scope.popupData.push(data);
    	        $scope.renderTable($scope.popupData);
    	        BaseService.focusTableRow($scope.oTable, -1);
            	
            	
            	
            };
            
            $scope.validateSavePopUpData = function(){
            	var msg = '';
            	var isValid = true;
            	
            	if($scope.selectedPopUpData.cwareAction == null){
            		isValid = false;
            		BaseService.alertNoSaveData();
            		return;
                }
            	
            	if($scope.selectedPopUpData.CONTENT == ""){
            		msg = mainMessage.message.require_row(mainMessage.word.character,$scope.selectedRow);
            		isValid = false;
            		BaseService.alertWarning(msg)
            		return;
            	}
            	
            	if($scope.selectedPopUpData.MSG == ""){
            		msg = mainMessage.message.require_row(mainMessage.word.explanation,$scope.selectedRow);
            		isValid = false;
            		BaseService.alertWarning(msg)
            		return;
            	}
            	
            	if(!isValid){
            		return false;
            	}
            	
            	return true;
            }
            
            
            
            $scope.validateDeleteClicked = function(){
            	swal({ 
                    title: "Question ?",
                    text: "Delete ?",
                    type: "warning",
                    showCancelButton: false,
                    showRejectButton: true,
                    confirmButtonText: "Yes"
                }, function(button){
                	if(button == 'confirm'){
                		setTimeout(function(){
                      		 _.remove($scope.popupData, { "rowId": $scope.selectedPopUpData.rowId });
                               $scope.renderTable($scope.popupData);
                               BaseService.focusTableRow($scope.oTable, -1);
                          },200);
                    }
                    else if(button == 'reject') {
                    	setTimeout(function(){
                    		
                    },500);
                    }
                });
            	
            };
            
            $scope.validateSaveChange = function(){
                swal({ 
                    title: "Question ?",
                    text: "Details changed. Do you want to save?",
                    type: "info",
                    showCancelButton: true,
                    showRejectButton: true,
                    confirmButtonText: "Yes"
                }, function(button){
                    if(button == 'confirm'){
                    	setTimeout(function(){
                    		$scope.btnSaveClick();
                        },500);
                    }
                    else if(button == 'reject') {
                    	
                    	
                    }
                });
            };
            
            $scope.validateSaveChangeClose = function(){
                swal({ 
                    title: "Question ?",
                    text: "Details changed. Do you want to save?",
                    type: "info",
                    showCancelButton: true,
                    showRejectButton: true,
                    confirmButtonText: "Yes"
                }, function(button){
                    if(button == 'confirm'){
                    	setTimeout(function(){
                    		$scope.btnSaveClick();
                        },500);
                    }
                    else if(button == 'reject') {
                    	$('#' + $scope.popupId).modal('hide');
                    	
                    }
                });
            };
            
            
           
            
            
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'character_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.tableId = 'table_' + scope.popupId;
            scope.isLoading = false;
        }
    }
});

app.directive('broadcastProgrammingTableCopyingPopup', function(){
    return {
        restrict: 'EAC',        
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/broadcastProgrammingTableCopyingPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService ,$filter) {
            
            $scope.selectedPopUpChannel = {};
            $scope.cmbPopUpChannel = [];
            $scope.selectedRow = {};
            $scope.saveStatus = false;
            $scope.selectButtonClick = false;
            
            $scope.popupConfirmData = [];
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
            	$scope.popupConfirmData = [];
            	$scope.selectButtonClick = false;
            	
            	BaseService.activateDatePicker('#' + $scope.popupId);
            	$scope.popupParam = ($scope.popupParam == null)? {}: $scope.popupParam;
            	
                $('#broadcast_program_input_date_pgm').datepicker("setDate", new Date($scope.popupParam.broad_date).toString('yyyy/MM/dd')).datepicker({ dateFormat: 'yyyy-mm-dd'});
            	
            	$scope.cmbPopUpChannel = $scope.popupParam.cmbChannel;
            	$scope.selectedPopUpChannel = $scope.cmbPopUpChannel[0];
            	$('#' + $scope.popupId).modal('show');
                $scope.getPopupData();
            	
            	setTimeout(function(){
                	
                	$scope.$apply();
                }, 200);
            });
            
            
            
            $scope.getPopupData = function(){
            	
            	$scope.popupConfirmData = [];
            	           	
            	//P_MULTI_BROAD_SCHEDULE_COPY = 1165;
            	BaseService.getPopupData("popup/retrieve/1165", $scope.popupParam).then(
	                function(respone){
	                	$scope.popupData = respone.data.result;
	                	$.each($scope.popupData, function(index, item){
	                    	item.rowId = BaseService.generateId(18);
	                    	item.cwareAction = "I";
	                    });
	                	$scope.isLoading = false;
	                    $scope.renderTable($scope.popupData);
	                    BaseService.focusTableRow($scope.oTable, 0);
	                    
	                },
	                function(respone){
	                	BaseService.alertWarning(respone.message)
	                }
	            );
            	
            };
            
           $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
//                            "bSortable": false,
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'COMP_CHECK',
                            "class": 'text-center checkbox-in-row',
                            "render": function(data, type, row){
                                var checked = (data == "0") ? false : true;
                                return '<table-checkbox check-id="'+ BaseService.generateId() +'" checked="'+ checked +'" action-change="popUpCheckBoxChange(event, checked)" id="'+data.rowId+'"></table-checkbox>';
                            }
//                            "bSortable": false,
                            
                        }, 
                         
                        {
                            "data": 'BD_BTIME',
                            "class": 'text-center',
//                            "bSortable": false,
                        }, 
                        {
                            "data": 'BD_ETIME',
                            "class": 'text-center',
//                            "bSortable": false,
                        },
                        {
                            "data": 'PROG_NAME',
//                            "bSortable": false,
                        },
                        {
                            "data": 'LIVE_NM',
//                            "bSortable": false,
                        },
                        
                        {
                            "data": 'MAIN_PD',
                            "class": 'text-center',
//                            "bSortable": false,
                        },
                        {
                            "data": 'SUB_PD',
                            "class": 'text-center',
//                            "bSortable": false,
                        },
                        
                        
                        ],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "createdRow": function( row, data, index ) {
                            $compile(row)($scope);
                        },
                        "dom": 'rt<"bottom"lp><"clear">',
//                        "order": [ 1, 'aesc' ],
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false,

                        
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    setTimeout(function(){
                    	
                    	
                    	$scope.oTable.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                    		
                        	if($scope.oTable != null){
                            		$scope.selectedRow = $scope.oTable.api().row(this).index();
                            		
                            	}
                        	BaseService.setRowFocus(this);
                        	var aData = $scope.oTable.api().row(this).data();
                            if(aData != null){
                                $scope.selectedPopUpData = aData;
//                                $scope.selectedPopUpData.BD_BTIME = new Date($scope.selectedPopUpData.BD_BTIME).setTime(1464587333)
//                                console.log(new Date($scope.selectedPopUpData.BD_BTIME).toString("HH:mm:ss"));
//                                console.log(new Date($scope.popupParam.broad_date).toString('yyyy/MM/dd'));
                            }
                        });
                    	
                    	
//                    	$scope.oTable.off('dblclick', 'tbody tr').on('dblclick', 'tbody tr', function(e) {
//                    	
//
//                        var aData = $scope.oTable.api().row(this).data();
//                        if(aData != null){
//                            $scope.$emit($scope.popupId + ".select", angular.copy(aData));
//                            $('#' + $scope.popupId).modal('hide');
//                        }
//                    });
                    
                },50);
                }
            };
            
            $scope.btnSelectClick = function(){
            	
            	if($scope.popupData && $scope.popupData.length > 0){
            		if($scope.selectButtonClick == false){
            			$scope.popupConfirmData = [];
            			$("#popup_select_click")[0].innerText = "Deselect";
            			$scope.selectButtonClick = true;
                		$.each($scope.popupData, function(index, item){
                        	item.COMP_CHECK = "1";
                        	$scope.popupConfirmData.push(item);
                        });
                	}
                	else{
                		$scope.popupConfirmData = [];
                		$("#popup_select_click")[0].innerText = "Select";
                		$scope.selectButtonClick = false;
                		$.each($scope.popupData, function(index, item){
                        	item.COMP_CHECK = "0";
                        });
                	}
                	 $scope.renderTable($scope.popupData);
                	 if($scope.selectedRow)
                     BaseService.focusTableRow($scope.oTable, $scope.selectedRow);
                	 else
                		 BaseService.focusTableRow($scope.oTable, 0);
            	}
            	else{
            		BaseService.alertWarning(mainMessage.message.do_query)
            	}
            	
            	
            	
            };
            $scope.inquiryClick = function(){
            	 $scope.getPopupData();
            };
            
            $scope.btnConfirmClick = function(){
            	if($scope.popupConfirmData && $scope.popupConfirmData.length > 0){
            		$scope.$emit($scope.popupId + ".confirm", $scope.popupConfirmData);
            		 $('#' + $scope.popupId).modal('hide');
            	}
            	else{
            		BaseService.alertWarning("No data processed");
            	}
            }
            
            $scope.popUpCheckBoxChange = function(event, checked){
            	if(checked == true){
            		$scope.popupConfirmData.push($scope.selectedPopUpData);
            	}
            	else if(checked == false)
            		_.remove($scope.popupConfirmData, { "rowId": $scope.selectedPopUpData.rowId });

            };
            
            $scope.btnCancelClick = function(){
            	$('#' + $scope.popupId).modal('hide');
            }
            
            
            
            
       },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'broadcast_programming_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.tableId = 'table_broadcast_programming_popup';
            scope.dateFormat = (scope.dateFormat == null) ? 'yyyy/mm/dd' : scope.dateFormat;
            scope.isLoading = false;
        }
    }
});

app.directive('dailySaleQtyPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
        	popupId: '@',
        	popupTitle: '@',
        	popupModalClass: '@',
        	popupModalSizeClass: '@',
        	popupControl: '@',
        	popupColumn: '@',
        	popupAutoLoad: '@',
        	popupData: '=',
        	popupSelectedData: '=',
        	popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/dailySaleQtyPopup.html',
        controller: function($scope, $rootScope, BaseService) {
                        
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
            	
            	$('#' + $scope.popupId).modal('show');
            	$scope.popupData = null;
            	$scope.getPopupData();
            });
            
            $scope.getPopupData = function(){
            	BaseService.getExtra($scope.popupParam,'/extra',$scope.popupParam.menuId).then(
                        function(response){
                        	$scope.isLoading = false;
                        	$scope.popupData = response.data.result;
                        	$scope.renderTable($scope.popupData);
                        }
                    );
             };
            
            $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "render": function(row, type, data){
                                return '';
                            }
                        }, 
                         {
                            "data": 'GOODSDT_CODE',
                            "class": 'text-center'
                        },
                         {
                            "data": 'GOODSDT_INFO'
                            
                        },
                         {
                            "data": 'ORDER_OK_QTY',
                            "class": 'text-right',
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0)
                            }
                        },
                         {
                            "data": 'COUNSEL_QTY',
                            "class": 'text-right',
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0)
                            }
                        },
                         {
                            "data": 'ORDER_QTY',
                            "class": 'text-right',
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0)
                            }
                        },
                         {
                            "data": 'ORDER_AMT',
                            "class": 'text-right',
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 2)
                            }
                        },
                         {
                            "data": 'CANCEL_QTY',
                            "class": 'text-right',
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0)
                            }
                        },
                         {
                            "data": 'CANCEL_AMT',
                            "class": 'text-right',
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 2)
                            }
                        },
                         {
                            "data": 'NET_QTY',
                            "class": 'text-right',
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 0)
                            }
                        },
                         {
                            "data": 'NET_AMT',
                            "class": 'text-right',
                            "render": function(data, type, row){
                                return BaseService.formatDecimal(data, 2)
                            }
                        },
                         {
                            "data": 'SALE_GB',
                            "class": 'text-center'
                        },
                        
                      ],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false,
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    setTimeout(function(){
                    
                    $scope.oTable.off("dblclick", "tbody tr").on("dblclick", "tbody tr", function(e) {
                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
                        	//console.log(aData)
                        }
                    });
                    
                    $scope.oTable.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                		BaseService.setRowFocus(this);
                        $scope.currentRowPopUp = this;
                    });
                    
                    },200);
                    

                }
            };
        },
        link: function(scope, element, attrs){
            scope.popupData = null;
            scope.popupId = (scope.popupId == null) ? 'daily_sale_qty_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? 'true' : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.tableId = 'table_' + scope.popupId;
            scope.isLoading = true;
        }
    }
});

app.directive('broadcastFilePopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
            dateFormat: '@',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/broadcastFilePopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.fileUpload = {};
            $scope.fileName = "";
            $scope.cmbLiveFlag = [];
            $scope.currentUrl = currentUrl;
            $scope.selectedPopUpData = {};
            $scope.retrieveId = 1126;
           
            
            $scope.selectedRow = {};
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
            	
            	$scope.selectedPopUpData = {};
                
            	$scope.popupData = {};
            	$('#' + $scope.popupId).modal('show');
                
            	$scope.getPopupData();
            	setTimeout(function(){
                	
                	$scope.$apply();
                }, 200);
            });
            
            $scope.inquiryClick = function(){
            	$scope.getPopupData();
            }
            
            $scope.getPopupData = function(){
            	
            	//P_TAPE_CODE = 1126;
            	BaseService.getPopupData("popup/retrieve/"+$scope.retrieveId, $scope.popupParam).then(
	                function(respone){
	                	$scope.popupData = respone.data.result;
	                    $scope.isLoading = false;
	                    $scope.renderTable($scope.popupData);
	                    BaseService.focusTableRow($scope.oTable, 0);
	                },
	                function(respone){
	                	BaseService.alertWarning(respone.message)
	                }
	            );
            	
            };
            
           $scope.renderTable = function(dataSource){
                if(dataSource != null){
                    
                    $scope.oTable = $('#' + $scope.tableId).dataTable({
                        "data": dataSource,
                        "columns": [{
                            "class": 'no text-center',
                            "bSortable": false,
                            "render": function(row, type, data){
                                return '';
                            }
                        }, {
                            "data": 'TAPE_CODE',
                            "class": 'text-center',
                            
                            
                        }, {
                            "data": 'TAPE_NAME',
                           
                        }],
                        "columnDefs": [{
                            "searchable": false,
                            "orderable": false,
                            "targets": 0
                        }, {
                          "data": null,
                          "defaultContent": "",
                          "targets": -1
                        }],
                        
                        "bDestroy": true,
                        "bSort": false,
                        "paging": false,
                        "filter": false,
                        "info": false,

                        
                    });
                    
                    BaseService.generateRowNumber($scope.oTable, 0);
                    BaseService.generateTooltip($scope.oTable);
                    
                    
                    setTimeout(function(){
                    	
                    	
                    	$scope.oTable.off('click', 'tbody tr').on('click', 'tbody tr', function(e) {
                    		
                        	if($scope.oTable != null){
                            		$scope.selectedRow = $scope.oTable.api().row(this).index();
                            		
                            	}
                        	
                        	BaseService.setRowFocus(this);
                            $scope.currentRowPopUp = this;
                           

                            var aData = $scope.oTable.api().row(this).data();
                            if(aData != null){
                                $scope.selectedPopUpData = aData;
                            }
                        });
                    	
                    	
                    	$scope.oTable.off('dblclick', 'tbody tr').on('dblclick', 'tbody tr', function(e) {
                    		
                    	if($scope.oTable != null){
                        		$scope.selectedRow = $scope.oTable.api().row(this).index();
                        		
                        	}
                    	
//                    	BaseService.setRowFocus(this);
//                        $scope.currentRowPopUp = this;
                       

                        var aData = $scope.oTable.api().row(this).data();
                        if(aData != null){
//                            $scope.selectedPopUpData = aData;
                            $scope.$emit($scope.popupId + ".select", angular.copy(aData));
                            $('#' + $scope.popupId).modal('hide');
                        }
                    });
                    
                },50);
                    
                }
            };
            
            
            $scope.inputChangeClick = function(e){
                var radioId = $(e.currentTarget).attr('radio-relate');
                if(!$('#' + $scope.popupId + ' #' + radioId).prop('checked')){
                    $('#' + $scope.popupId + ' #' + radioId).prop('checked', true);
                    $scope.filterSelectChange(radioId);
                }
            };
            
            $scope.filterSelectChange = function(radioId){
                $scope.popupParam = ($scope.popupParam == null) ? {} : $scope.popupParam;
                switch(radioId){
                    case "rdFileCode":{
                    		$scope.retrieveId = 1126;
                            $scope.popupParam.tape_name = "";
                            $scope.popupParam.goods_code = "";
                            $scope.popupParam.goods_name = "";
                            $scope.popupParam.popModCase = "CASE_1";
                        }
                        break;
                    case "rdFileName":{
                    	$scope.retrieveId = 1127;
                        $scope.popupParam.tape_code = "";
                        $scope.popupParam.goods_code = "";
                        $scope.popupParam.goods_name = "";
                        $scope.popupParam.popModCase = "CASE_1";
                        }
                        break;
                    case "rdItemCode":{
                    	$scope.retrieveId = 1133;
                        $scope.popupParam.tape_code = "";
                        $scope.popupParam.tape_name = "";
                        $scope.popupParam.goods_name = "";
                        $scope.popupParam.popModCase = "CASE_1";
                        }
                        break;
                    case "rdItemName":{
                    	$scope.retrieveId = 1134;
                        $scope.popupParam.tape_code = "";
                        $scope.popupParam.tape_name = "";
                        $scope.popupParam.goods_code = "";
                        $scope.popupParam.popModCase = "CASE_1";
                        }
                        break;
                }
//                $scope.pickerParam = angular.copy($scope.dataFilter);
                $('input[radio-relate="'+ radioId +'"]').focus();
            };
            
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'broadcast_file_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.tableId = 'table_' + scope.popupId;
            scope.isLoading = false;
        }
    };
    
});

app.directive('masterPrintPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        templateUrl: currentUrl + '/resources/assets/partials/popup/masterPrintPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
            
            $scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');
                //$scope.src = $scope.popupParam.src;
                setTimeout(function(){
                	
                	//$('#iframe_loading').hide();
                	$('#master_iframe_print_pdf').prop('src', $scope.popupParam.src);
                }, 300);
                
                $('#' + $scope.popupId).on('hidden.bs.modal', function () {
                    $('#master_iframe_print_pdf').prop('src', '');
                });
            });
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'master_print_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.isLoading = false;
            
            element.attr('src', scope.popupParam.src);
        }
    }
});


app.directive('masterDescriptionPrintPopup', function(){
    return {
        restrict: 'E',
        replace: true,
        scope: {
            popupId: '@',
            popupTitle: '@',
            popupModalClass: '@',
            popupModalSizeClass: '@',
            popupAutoLoad: '@',
            popupData: '=',
            popupSelectedData: '=',
            popupParam: '=',
        },
        
        templateUrl: currentUrl + '/resources/assets/partials/popup/masterDescriptionPrintPopup.html',
        controller: function($scope, $rootScope, $compile, BaseService) {
        	
        	$scope.$on($scope.popupId + ".open", function(e, currentValue) {
                $('#' + $scope.popupId).modal('show');
                
                BaseService.getPopupData("/popup/get-goods-explain-info?goods_code="+ $scope.popupParam.goods_code).then(
	                function(response){
                        $scope.result = response.data.result;
                        
                        setTimeout(function(){
                            $scope.printClick(0);
                        }, 200);
	                }
	            );
            });
        	
        	$scope.printClick = function(waitingTime) {
                $scope.PrintElem('print_appender',0);
            };
            
            $scope.PrintElem = function(id, waitingTime) {
                $scope.Popup($('#'+id).html(),waitingTime);
            }
            
            $scope.Popup = function(data, waitingTime)  {
                var mywindow = window.open('', 'my div', 'height=400,width=600');
                mywindow.document.write('<html><head><title></title>');
                mywindow.document.write('<style>body,table{font-size:10pt;text-align:left}td,th{border-top:#e0e1db 1px solid;overflow:hidden}.b-right,table{border-right:#e0e1db 1px solid}.box,table,td,th{overflow:hidden}.b,th{font-weight:700}<style>body{font-family:Tahoma}table{border-bottom:#e0e1db 1px solid;border-left:#e0e1db 1px solid;border-top:medium none;line-height:normal;margin-top:30px}.c,th{text-align:center}th{border-bottom:#fff 1px solid;white-space:nowrap;height:28px;color:#3e3f3e;background-color:#eff0ed}td{padding:.5em .1em}.box{border:1px solid #e0e1db;padding-left:2px;padding-right:2px;height:23px;line-height:23px;vertical-align:middle;text-overflow:ellipsis}.r{text-align:right}.l{text-align:left}.wtitle{width:95px}.wcode{text-align:center;width:60px}.w100{width:100px}.w150{width:150px}.blue{color:#00f}</style>');
                mywindow.document.write('</head><body >');
                mywindow.document.write(data);
                mywindow.document.write('</body></html>');
                setTimeout(function() {
                    mywindow.print();
                    mywindow.close();
                }, waitingTime);
            }
            
            $scope.replaceNewLine = function(str){
            	if(str){

                	return BaseService.replaceAll(str, "\\r", "<br>");
            	}else{
            		
            		return "";
            	}
            }
            
            $scope.$on("onRepeatLast", function(e, attr){
            	$.each($scope.result.DESCRIBES, function(index, item){
            		if($('#describeTxt'+index).length > 0 && item.DESCRIBE_EXT){

                		$('#describeTxt'+index).html($scope.replaceNewLine(item.DESCRIBE_EXT));
            		}
            	});
            });
            
        },
        link: function(scope, element, attrs){
            scope.popupId = (scope.popupId == null) ? 'master_description_print_popup' : scope.popupId;
            scope.popupAutoLoad = (scope.popupAutoLoad == null) ? true : scope.popupAutoLoad;
            scope.popupParam = (scope.popupParam == null) ? {} : scope.popupParam;
            scope.popupData = (scope.popupData == null) ? {} : scope.popupData;
            scope.isLoading = false;
        }
    }
});